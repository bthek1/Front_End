[
  {
    "objectID": "typescript.html",
    "href": "typescript.html",
    "title": "Typescript",
    "section": "",
    "text": "Superset of JavaScript: TypeScript includes all JavaScript features and adds static typing, interfaces, and advanced tooling support.\nType Safety: Allows you to catch type-related errors at compile time rather than runtime.\nCompiles to JavaScript: TypeScript code is transpiled to JavaScript, ensuring compatibility with browsers and JavaScript environments.\nUsed for Large-Scale Projects: Great for large, complex projects with multiple developers, as it provides better maintainability and readability.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#what-is-typescript",
    "href": "typescript.html#what-is-typescript",
    "title": "Typescript",
    "section": "",
    "text": "Superset of JavaScript: TypeScript includes all JavaScript features and adds static typing, interfaces, and advanced tooling support.\nType Safety: Allows you to catch type-related errors at compile time rather than runtime.\nCompiles to JavaScript: TypeScript code is transpiled to JavaScript, ensuring compatibility with browsers and JavaScript environments.\nUsed for Large-Scale Projects: Great for large, complex projects with multiple developers, as it provides better maintainability and readability.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#key-features",
    "href": "typescript.html#key-features",
    "title": "Typescript",
    "section": "2. Key Features",
    "text": "2. Key Features\n\nStatic Typing: Adds types to variables, functions, and objects.\nlet message: string = \"Hello, TypeScript!\";\nlet count: number = 42;\nType Inference: Automatically infers types when they are not explicitly declared.\nlet inferred = \"This is inferred as a string\";\nInterfaces: Defines the structure of objects, ensuring consistency.\ninterface User {\n    id: number;\n    name: string;\n}\nEnums: Defines a set of named constants.\nenum Direction {\n    North,\n    South,\n    East,\n    West,\n}\nUnion Types: A variable can have multiple types.\nlet value: string | number;\nvalue = \"Hello\";  // Valid\nvalue = 42;       // Valid\nGenerics: Enables reusable, type-safe components.\nfunction identity&lt;T&gt;(value: T): T {\n    return value;\n}\nDecorators (Experimental): Adds metadata to classes and members, often used in frameworks like Angular.\n@Component({...})\nclass MyComponent {}\nModules: Supports ES6 modules for importing and exporting code.\nimport { myFunction } from './myModule';\nexport function myFunction() {}\nStrict Null Checks: Ensures variables are not null or undefined unless explicitly allowed.\nAdvanced Tooling: Better IntelliSense, autocomplete, and refactoring support in IDEs like Visual Studio Code.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#installation",
    "href": "typescript.html#installation",
    "title": "Typescript",
    "section": "3. Installation",
    "text": "3. Installation\nInstall TypeScript globally via npm:\nnpm install -g typescript\nCheck the installed version:\ntsc --version",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#setting-up-a-typescript-project",
    "href": "typescript.html#setting-up-a-typescript-project",
    "title": "Typescript",
    "section": "4. Setting Up a TypeScript Project",
    "text": "4. Setting Up a TypeScript Project\n\na. Initialize a New Project\n\nCreate a new directory:\nmkdir my-project && cd my-project\nInitialize package.json:\nnpm init -y\nInstall TypeScript locally:\nnpm install typescript --save-dev\nCreate a tsconfig.json:\nnpx tsc --init\n\n\n\nb. Example tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"ES6\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"resolveJsonModule\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#compiling-typescript",
    "href": "typescript.html#compiling-typescript",
    "title": "Typescript",
    "section": "5. Compiling TypeScript",
    "text": "5. Compiling TypeScript\nCompile .ts files to .js:\nnpx tsc\nYou can also compile a single file:\nnpx tsc file.ts\nRun the JavaScript file:\nnode dist/file.js",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#typescript-vs-javascript",
    "href": "typescript.html#typescript-vs-javascript",
    "title": "Typescript",
    "section": "6. TypeScript vs JavaScript",
    "text": "6. TypeScript vs JavaScript\n\n\n\n\n\n\n\n\nFeature\nTypeScript\nJavaScript\n\n\n\n\nTyping\nStatically typed (type checking at compile time).\nDynamically typed.\n\n\nError Detection\nCompile-time errors for type mismatches.\nErrors detected at runtime.\n\n\nTooling\nSuperior tooling and editor support.\nLimited tooling capabilities.\n\n\nBackward Compatibility\nCompiles to ES3+ JavaScript for compatibility.\nRuns directly in browsers or Node.js.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#advanced-features",
    "href": "typescript.html#advanced-features",
    "title": "Typescript",
    "section": "7. Advanced Features",
    "text": "7. Advanced Features\n\na. Type Aliases\nAlias complex types for readability:\ntype Point = { x: number; y: number };\nlet pt: Point = { x: 10, y: 20 };\n\n\nb. Intersection Types\nCombine multiple types:\ntype Admin = { id: number; role: string };\ntype User = { name: string };\ntype AdminUser = Admin & User;\n\n\nc. Utility Types\nTypeScript includes built-in utility types like Pick, Partial, and Omit:\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n}\ntype PartialUser = Partial&lt;User&gt;; // All properties are optional\ntype PickedUser = Pick&lt;User, \"id\" | \"email\"&gt;;\n\n\nd. Type Guards\nRefine types at runtime:\nfunction isString(value: unknown): value is string {\n    return typeof value === 'string';\n}",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#typescript-with-frameworks",
    "href": "typescript.html#typescript-with-frameworks",
    "title": "Typescript",
    "section": "8. TypeScript with Frameworks",
    "text": "8. TypeScript with Frameworks\n\na. React\nInstall TypeScript for React:\nnpx create-react-app my-app --template typescript\nUse .tsx for TypeScript files with JSX.\n\n\nb. Node.js\nInstall TypeScript for Node.js:\nnpm install @types/node --save-dev\n\n\nc. Angular\nAngular uses TypeScript by default.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#integrating-typescript-into-existing-projects",
    "href": "typescript.html#integrating-typescript-into-existing-projects",
    "title": "Typescript",
    "section": "9. Integrating TypeScript into Existing Projects",
    "text": "9. Integrating TypeScript into Existing Projects\n\nAdd TypeScript to an existing project:\nnpm install typescript --save-dev\nRename .js files to .ts and fix type errors.\nGradually enable strict checks in tsconfig.json.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#typescript-with-third-party-libraries",
    "href": "typescript.html#typescript-with-third-party-libraries",
    "title": "Typescript",
    "section": "10. TypeScript with Third-Party Libraries",
    "text": "10. TypeScript with Third-Party Libraries\nInstall type definitions for popular libraries:\nnpm install @types/lodash --save-dev",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#tooling-and-ecosystem",
    "href": "typescript.html#tooling-and-ecosystem",
    "title": "Typescript",
    "section": "11. Tooling and Ecosystem",
    "text": "11. Tooling and Ecosystem\n\nEditors: Works best with Visual Studio Code.\nLinting: Use ESLint with TypeScript.\nTesting: Use frameworks like Jest or Mocha with TypeScript.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#advantages-of-typescript",
    "href": "typescript.html#advantages-of-typescript",
    "title": "Typescript",
    "section": "12. Advantages of TypeScript",
    "text": "12. Advantages of TypeScript\n\nImproved Code Quality: Early detection of bugs through static typing.\nRefactoring Support: Easier to refactor large codebases with type safety.\nTooling: Enhanced IntelliSense, auto-completion, and debugging.\nLarge Community: Widespread adoption and support.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#disadvantages-of-typescript",
    "href": "typescript.html#disadvantages-of-typescript",
    "title": "Typescript",
    "section": "13. Disadvantages of TypeScript",
    "text": "13. Disadvantages of TypeScript\n\nLearning Curve: Requires learning types and new syntax.\nExtra Compilation Step: Must compile .ts to .js.\nOverhead: Adds some complexity for small projects.",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "typescript.html#typescript-vs-other-languages",
    "href": "typescript.html#typescript-vs-other-languages",
    "title": "Typescript",
    "section": "14. TypeScript vs Other Languages",
    "text": "14. TypeScript vs Other Languages\n\n\n\n\n\n\n\n\n\n\nFeature\nTypeScript\nJavaScript\nPython\nJava\n\n\n\n\nTyping\nStatic (optional)\nDynamic\nDynamic\nStatic\n\n\nCompilation\nYes\nNo\nNo\nYes\n\n\nRuntime Speed\nFast\nFast\nSlower\nFast\n\n\nPopularity\nGrowing\nHigh\nHigh\nStable",
    "crumbs": [
      "Blog",
      "Typescript"
    ]
  },
  {
    "objectID": "http_headers.html",
    "href": "http_headers.html",
    "title": "HTTP Message Headers",
    "section": "",
    "text": "HTTP headers are key-value pairs sent between the client and server to pass additional information about the request or response.\n\n\n\nRequest Headers – Sent by the client (e.g., browser)\n\nResponse Headers – Sent by the server\n\nEntity Headers – Provide metadata about the body of the resource\n\nGeneral Headers – Applied to both requests and responses\n\nCustom Headers – Defined by developers, prefixed with X- (e.g., X-Request-ID)",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#what-are-http-message-headers",
    "href": "http_headers.html#what-are-http-message-headers",
    "title": "HTTP Message Headers",
    "section": "",
    "text": "HTTP headers are key-value pairs sent between the client and server to pass additional information about the request or response.\n\n\n\nRequest Headers – Sent by the client (e.g., browser)\n\nResponse Headers – Sent by the server\n\nEntity Headers – Provide metadata about the body of the resource\n\nGeneral Headers – Applied to both requests and responses\n\nCustom Headers – Defined by developers, prefixed with X- (e.g., X-Request-ID)",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#common-http-headers",
    "href": "http_headers.html#common-http-headers",
    "title": "HTTP Message Headers",
    "section": "2. Common HTTP Headers",
    "text": "2. Common HTTP Headers\n\nRequest Headers\n\n\n\n\n\n\n\n\nHeader\nDescription\nExample\n\n\n\n\nAccept\nMedia types the client can handle\nAccept: text/html, application/json\n\n\nAuthorization\nCredentials for authentication\nAuthorization: Bearer &lt;token&gt;\n\n\nUser-Agent\nIdentifies the client software\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\n\n\nCookie\nSends cookies to the server\nCookie: sessionId=abc123\n\n\nReferer\nThe URL of the referring page\nReferer: https://example.com\n\n\nContent-Type\nMedia type of the request body\nContent-Type: application/json\n\n\nOrigin\nThe origin of the request (for CORS)\nOrigin: https://example.com\n\n\n\n\n\nResponse Headers\n\n\n\n\n\n\n\n\nHeader\nDescription\nExample\n\n\n\n\nContent-Type\nMedia type of the response body\nContent-Type: application/json\n\n\nCache-Control\nCaching directives\nCache-Control: no-cache, no-store\n\n\nSet-Cookie\nSets cookies in the client\nSet-Cookie: sessionId=abc123; HttpOnly\n\n\nLocation\nRedirect URL\nLocation: https://new-url.com\n\n\nAccess-Control-Allow-Origin\nControls CORS\nAccess-Control-Allow-Origin: *\n\n\nContent-Security-Policy\nSecurity policy for resources\nContent-Security-Policy: default-src 'self'",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#cors-cross-origin-resource-sharing",
    "href": "http_headers.html#cors-cross-origin-resource-sharing",
    "title": "HTTP Message Headers",
    "section": "3. CORS (Cross-Origin Resource Sharing)",
    "text": "3. CORS (Cross-Origin Resource Sharing)\nCORS is a mechanism that allows restricted resources (like fonts, APIs) on a web page to be requested from another domain.\n\nWhy is CORS needed?\n\nBrowsers block cross-origin requests by default for security (Same-Origin Policy).\n\nCORS defines headers to explicitly allow or deny these requests.\n\n\n\nKey CORS Headers\n\n\n\n\n\n\n\n\nHeader\nDescription\nExample\n\n\n\n\nAccess-Control-Allow-Origin\nSpecifies allowed origins\nAccess-Control-Allow-Origin: * or https://example.com\n\n\nAccess-Control-Allow-Methods\nAllowed HTTP methods\nAccess-Control-Allow-Methods: GET, POST, PUT\n\n\nAccess-Control-Allow-Headers\nAllowed custom headers\nAccess-Control-Allow-Headers: Content-Type, Authorization\n\n\nAccess-Control-Allow-Credentials\nAllow sending credentials\nAccess-Control-Allow-Credentials: true\n\n\nAccess-Control-Expose-Headers\nExpose custom headers to JS\nAccess-Control-Expose-Headers: X-Custom-Header\n\n\nAccess-Control-Max-Age\nCaching duration for preflight\nAccess-Control-Max-Age: 86400",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#implementing-http-headers-in-nginx",
    "href": "http_headers.html#implementing-http-headers-in-nginx",
    "title": "HTTP Message Headers",
    "section": "4. Implementing HTTP Headers in Nginx",
    "text": "4. Implementing HTTP Headers in Nginx\nNginx can be configured to add, modify, or remove HTTP headers using the add_header and proxy_set_header directives.\n\nAdding Security Headers in Nginx\nserver {\n    listen 80;\n    server_name example.com;\n\n    location / {\n        root /var/www/html;\n        index index.html;\n\n        # Security Headers\n        add_header X-Frame-Options \"DENY\";\n        add_header X-Content-Type-Options \"nosniff\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n        add_header Content-Security-Policy \"default-src 'self'\";\n    }\n}\n\n\nSetting CORS Headers in Nginx\nserver {\n    listen 80;\n    server_name api.example.com;\n\n    location / {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        \n        # Handle Preflight Requests\n        if ($request_method = OPTIONS ) {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';\n            add_header 'Access-Control-Max-Age' '86400';\n            return 204;\n        }\n    }\n}\n\n\nCustom Headers in Nginx\nserver {\n    listen 80;\n    server_name example.com;\n\n    location / {\n        add_header X-Custom-Header \"MyCustomValue\";\n    }\n}",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#cors-preflight-requests",
    "href": "http_headers.html#cors-preflight-requests",
    "title": "HTTP Message Headers",
    "section": "5. CORS Preflight Requests",
    "text": "5. CORS Preflight Requests\n\nPreflight Requests are made using the OPTIONS method to check if the actual request is safe.\nThese are triggered when:\n\nUsing methods other than GET or POST (e.g., PUT, DELETE)\nUsing custom headers (e.g., Authorization)\nSending JSON or non-simple content types\n\n\n\nHandling Preflight Requests in Nginx\nlocation /api/ {\n    if ($request_method = OPTIONS) {\n        add_header Access-Control-Allow-Origin '*';\n        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';\n        add_header Access-Control-Allow-Headers 'Authorization, Content-Type';\n        add_header Access-Control-Max-Age '86400';\n        return 204;\n    }\n}",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#debugging-cors-issues",
    "href": "http_headers.html#debugging-cors-issues",
    "title": "HTTP Message Headers",
    "section": "6. Debugging CORS Issues",
    "text": "6. Debugging CORS Issues\n\nCheck Console Errors in Browser DevTools:\n\nNo 'Access-Control-Allow-Origin' header → Add the header in Nginx\nMethod not allowed by Access-Control-Allow-Methods → Include the method in Nginx config\n\nUse Browser Extensions for Testing:\n\nAllow CORS: Access-Control-Allow-Origin\n\nUse Curl for Testing\n\ncurl -I -X OPTIONS https://api.example.com \\\n-H \"Origin: https://example.com\" \\\n-H \"Access-Control-Request-Method: POST\" \\\n-H \"Access-Control-Request-Headers: Content-Type, Authorization\"",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#best-practices-for-using-http-headers-in-nginx-and-cors",
    "href": "http_headers.html#best-practices-for-using-http-headers-in-nginx-and-cors",
    "title": "HTTP Message Headers",
    "section": "7. Best Practices for Using HTTP Headers in Nginx and CORS",
    "text": "7. Best Practices for Using HTTP Headers in Nginx and CORS\n\nSecurity Headers:\n\nX-Frame-Options → Prevent Clickjacking\nX-Content-Type-Options → Prevent MIME type sniffing\nContent-Security-Policy → Control resources loading\n\nPerformance Headers:\n\nCache-Control → Browser caching\nETag → Conditional requests\n\nCORS:\n\nUse specific origins instead of * for better security.\nAvoid exposing credentials (Access-Control-Allow-Credentials) unless necessary.",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#testing-and-verification",
    "href": "http_headers.html#testing-and-verification",
    "title": "HTTP Message Headers",
    "section": "8. Testing and Verification",
    "text": "8. Testing and Verification\n\nUse browser Developer Tools (Network tab) to inspect request and response headers.\nOnline tools like:\n\nPostman\nCurl\nRequest Headers Check",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "http_headers.html#conclusion",
    "href": "http_headers.html#conclusion",
    "title": "HTTP Message Headers",
    "section": "Conclusion",
    "text": "Conclusion\n\nHTTP headers are essential for security, caching, and CORS management.\nNginx provides powerful configuration options for setting HTTP headers.\nCORS is critical for cross-origin requests, especially in SPA and API-driven architectures.",
    "crumbs": [
      "Blog",
      "HTTP Message Headers"
    ]
  },
  {
    "objectID": "js_prettier.html",
    "href": "js_prettier.html",
    "title": "Prettier",
    "section": "",
    "text": "Opinionated: Prettier enforces a consistent code style with minimal configuration.\nLanguage Support: Supports a wide range of languages, including JavaScript, TypeScript, HTML, CSS, SCSS, JSON, YAML, Markdown, and more.\nAutomatic Formatting: Formats code automatically, eliminating manual adjustments.\nNo Debates: Reduces arguments about formatting styles in teams.\nExtensible: Supports custom configurations for specific rules (e.g., line width, quote style).\nIntegrations: Compatible with many editors, pre-commit hooks, and CI pipelines.",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#key-features-of-prettier",
    "href": "js_prettier.html#key-features-of-prettier",
    "title": "Prettier",
    "section": "",
    "text": "Opinionated: Prettier enforces a consistent code style with minimal configuration.\nLanguage Support: Supports a wide range of languages, including JavaScript, TypeScript, HTML, CSS, SCSS, JSON, YAML, Markdown, and more.\nAutomatic Formatting: Formats code automatically, eliminating manual adjustments.\nNo Debates: Reduces arguments about formatting styles in teams.\nExtensible: Supports custom configurations for specific rules (e.g., line width, quote style).\nIntegrations: Compatible with many editors, pre-commit hooks, and CI pipelines.",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#installation",
    "href": "js_prettier.html#installation",
    "title": "Prettier",
    "section": "2. Installation",
    "text": "2. Installation\n\nInstall Globally\nInstall Prettier globally using npm:\nnpm install -g prettier\n\n\nInstall Locally (Recommended for Projects)\nInstall Prettier as a development dependency in your project:\nnpm install --save-dev prettier",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#basic-usage",
    "href": "js_prettier.html#basic-usage",
    "title": "Prettier",
    "section": "3. Basic Usage",
    "text": "3. Basic Usage\n\nCommand-Line Interface (CLI)\n\nFormat a File:\nprettier --write file.js\nCheck Formatting (without applying changes):\nprettier --check file.js\nFormat All Files in a Project:\nprettier --write .\nSpecify File Types:\nprettier --write \"**/*.js\"",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#configuration",
    "href": "js_prettier.html#configuration",
    "title": "Prettier",
    "section": "4. Configuration",
    "text": "4. Configuration\n\nPrettier Configuration File\nPrettier can be configured using a variety of file types. Create a configuration file in your project root:\n\n.prettierrc\n.prettierrc.json\n.prettierrc.yaml\n.prettierrc.js\n\n\n\nExample Configuration (.prettierrc)\n{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"trailingComma\": \"es5\",\n  \"printWidth\": 80,\n  \"bracketSpacing\": true\n}\n\n\nKey Options:\n\n\n\n\n\n\n\n\nOption\nDefault\nDescription\n\n\n\n\nsemi\ntrue\nAdds semicolons at the end of statements.\n\n\nsingleQuote\nfalse\nUse single quotes instead of double quotes.\n\n\ntabWidth\n2\nNumber of spaces per tab.\n\n\nuseTabs\nfalse\nUse tabs instead of spaces for indentation.\n\n\ntrailingComma\n\"es5\"\nAdd trailing commas where valid in ES5.\n\n\nprintWidth\n80\nMax line width before wrapping.\n\n\nbracketSpacing\ntrue\nAdd spaces between brackets in object literals.\n\n\n\n\n\n\nIgnore Files\nPrettier can ignore specific files using a .prettierignore file:\nnode_modules/\ndist/\nbuild/\n*.min.js",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#prettier-in-vs-code",
    "href": "js_prettier.html#prettier-in-vs-code",
    "title": "Prettier",
    "section": "5. Prettier in VS Code",
    "text": "5. Prettier in VS Code\n\nExtension\nInstall the official Prettier - Code Formatter extension in VS Code.\n\nOpen Extensions Marketplace: Ctrl+Shift+X or Cmd+Shift+X.\nSearch for “Prettier - Code Formatter.”\nClick Install.\n\n\n\nConfiguration in VS Code\nAdd the following to your settings.json:\n{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[typescript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"prettier.tabWidth\": 4,\n  \"prettier.singleQuote\": true,\n  \"prettier.semi\": false\n}",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#integration-with-eslint",
    "href": "js_prettier.html#integration-with-eslint",
    "title": "Prettier",
    "section": "6. Integration with ESLint",
    "text": "6. Integration with ESLint\nPrettier can be integrated with ESLint to handle both linting and formatting.\n\nInstall ESLint and Prettier Plugins:\nnpm install --save-dev eslint prettier eslint-plugin-prettier eslint-config-prettier\nUpdate .eslintrc:\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:prettier/recommended\"\n  ],\n  \"rules\": {\n    \"prettier/prettier\": [\n      \"error\",\n      {\n        \"singleQuote\": true,\n        \"semi\": false\n      }\n    ]\n  }\n}\nRun Both:\neslint --fix .\nprettier --write .",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#pre-commit-hook-with-prettier",
    "href": "js_prettier.html#pre-commit-hook-with-prettier",
    "title": "Prettier",
    "section": "7. Pre-commit Hook with Prettier",
    "text": "7. Pre-commit Hook with Prettier\nUse pre-commit hooks to format code before committing:\n\nInstall husky and lint-staged:\nnpm install --save-dev husky lint-staged\nUpdate package.json:\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.{js,ts,json,css,md}\": [\n      \"prettier --write\",\n      \"git add\"\n    ]\n  }\n}\nActivate Husky:\nnpx husky install",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#supported-languages",
    "href": "js_prettier.html#supported-languages",
    "title": "Prettier",
    "section": "8. Supported Languages",
    "text": "8. Supported Languages\nPrettier supports the following file types:\n\nJavaScript & TypeScript: .js, .jsx, .ts, .tsx\nHTML: .html, .htm\nCSS & SCSS: .css, .scss, .less\nJSON & YAML: .json, .yaml, .yml\nMarkdown: .md\nOther: .vue, .svelte, .graphql",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#advanced-usage",
    "href": "js_prettier.html#advanced-usage",
    "title": "Prettier",
    "section": "9. Advanced Usage",
    "text": "9. Advanced Usage\n\nCustom Parsers\nPrettier supports custom parsers for non-standard file types. For example, to use a custom Markdown parser:\nprettier --parser markdown file.md\n\n\nCLI Options\nRun prettier --help to see all available options. Examples:\n\nCheck specific files:\nprettier --check \"src/**/*.js\"\nWrite formatted output to a new file:\nprettier file.js &gt; formatted.js",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#best-practices",
    "href": "js_prettier.html#best-practices",
    "title": "Prettier",
    "section": "10. Best Practices",
    "text": "10. Best Practices\n\nFormat-on-Save: Enable auto-formatting in your editor for faster feedback.\nConsistent Config: Share a .prettierrc file across your project.\nPair with ESLint: Use Prettier with ESLint for both formatting and linting.\nPre-commit Hook: Prevent unformatted code from being committed.",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "js_prettier.html#alternatives-to-prettier",
    "href": "js_prettier.html#alternatives-to-prettier",
    "title": "Prettier",
    "section": "11. Alternatives to Prettier",
    "text": "11. Alternatives to Prettier\n\nESLint: Primarily a linter but can be used for formatting with plugins.\nStandardJS: Linter and formatter with its own set of rules.\nBeautify: A highly customizable code formatter for various languages.\n\n\nPrettier simplifies code formatting, increases readability, and improves consistency across your projects. Its integration with editors, CI/CD pipelines, and linting tools makes it a must-have for modern development workflows.",
    "crumbs": [
      "Blog",
      "Prettier"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Front_End",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "Blog",
      "Front_End"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "Front_End",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall Front_End in Development mode\n# make sure Front_End package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to Front_End\n$ nbdev_prepare",
    "crumbs": [
      "Blog",
      "Front_End"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Front_End",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/bthek1/Front_End.git\nor from conda\n$ conda install -c bthek1 Front_End\nor from pypi\n$ pip install Front_End\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "Blog",
      "Front_End"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Front_End",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "Blog",
      "Front_End"
    ]
  },
  {
    "objectID": "eslint.html",
    "href": "eslint.html",
    "title": "ESLint",
    "section": "",
    "text": "Linter: Identifies problematic patterns in JavaScript/TypeScript code.\nCustomizable: Allows users to define rules or extend existing configurations.\nPluggable: Supports plugins for additional rules and integration with frameworks.\nError Prevention: Detects errors like unused variables, incorrect syntax, or non-standard coding practices.\nCode Style Enforcement: Enforces coding standards for consistency across a project.",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#what-is-eslint",
    "href": "eslint.html#what-is-eslint",
    "title": "ESLint",
    "section": "",
    "text": "Linter: Identifies problematic patterns in JavaScript/TypeScript code.\nCustomizable: Allows users to define rules or extend existing configurations.\nPluggable: Supports plugins for additional rules and integration with frameworks.\nError Prevention: Detects errors like unused variables, incorrect syntax, or non-standard coding practices.\nCode Style Enforcement: Enforces coding standards for consistency across a project.",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#key-features",
    "href": "eslint.html#key-features",
    "title": "ESLint",
    "section": "2. Key Features",
    "text": "2. Key Features\n\nCustom Rules: Define custom linting rules to meet your team’s requirements.\nPlugin Support: Extend functionality with plugins (e.g., React, TypeScript, Prettier).\nConfigurable: Supports multiple configuration formats (.eslintrc files or package.json).\nError Levels: Classify issues as:\n\noff → Rule disabled\nwarn → Shows a warning\nerror → Fails the linting process\n\nFixes: Supports automatic fixing of certain issues via the --fix flag.",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#installation",
    "href": "eslint.html#installation",
    "title": "ESLint",
    "section": "3. Installation",
    "text": "3. Installation\n\nInstall Globally (Optional)\nFor global use across projects:\nnpm install -g eslint\n\n\nInstall Locally (Recommended)\nFor project-specific use:\nnpm install eslint --save-dev",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#configuration",
    "href": "eslint.html#configuration",
    "title": "ESLint",
    "section": "4. Configuration",
    "text": "4. Configuration\nESLint requires a configuration file to operate. The configuration determines which rules are enabled, disabled, or customized.\n\nCommon Configuration File Types\n\n.eslintrc.json (JSON format)\n.eslintrc.js (JavaScript format)\n.eslintrc.yml (YAML format)\npackage.json (inside the eslintConfig field)\n\n\n\nCreate a Configuration\nYou can create an ESLint configuration file interactively:\nnpx eslint --init\nThis command prompts you to choose: 1. Type of Project (e.g., Node.js, React). 2. Language (JavaScript/TypeScript). 3. Styling Rules (e.g., Airbnb, StandardJS, Prettier).\n\n\n\nBasic Example Configuration\n\n.eslintrc.json\n{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 12,\n    \"sourceType\": \"module\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": \"warn\",\n    \"eqeqeq\": \"error\",\n    \"quotes\": [\"error\", \"single\"]\n  }\n}\n\n\nExplanation:\n\nenv: Defines environments (e.g., browser, Node.js).\nextends: Extends existing rule sets (e.g., eslint:recommended, React rules).\nparserOptions: Configures ECMAScript version and module type.\nrules: Overrides or customizes specific rules.",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#running-eslint",
    "href": "eslint.html#running-eslint",
    "title": "ESLint",
    "section": "5. Running ESLint",
    "text": "5. Running ESLint\n\nLint Files\nTo lint a specific file:\nnpx eslint file.js\n\n\nLint All Files\nTo lint all JavaScript files in the current directory:\nnpx eslint .\n\n\nFix Issues Automatically\nTo automatically fix fixable issues:\nnpx eslint . --fix\n\n\nIgnore Files\nCreate an .eslintignore file to specify files or directories to exclude:\nnode_modules/\ndist/\nbuild/",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#using-eslint-with-typescript",
    "href": "eslint.html#using-eslint-with-typescript",
    "title": "ESLint",
    "section": "6. Using ESLint with TypeScript",
    "text": "6. Using ESLint with TypeScript\n\nInstall ESLint and TypeScript Plugins:\nnpm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\nUpdate Configuration:\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"rules\": {\n    \"@typescript-eslint/no-unused-vars\": \"warn\"\n  }\n}\nLint TypeScript Files:\nnpx eslint --ext .ts .",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#popular-eslint-plugins",
    "href": "eslint.html#popular-eslint-plugins",
    "title": "ESLint",
    "section": "7. Popular ESLint Plugins",
    "text": "7. Popular ESLint Plugins\n\n1. React\n\nPlugin: eslint-plugin-react\nPurpose: Adds React-specific linting rules.\nInstall:\nnpm install eslint-plugin-react --save-dev\n\n\n\n2. Prettier\n\nPlugin: eslint-config-prettier\nPurpose: Disables ESLint rules that conflict with Prettier.\nInstall:\nnpm install eslint-config-prettier eslint-plugin-prettier --save-dev\n\n\n\n3. Import Sorting\n\nPlugin: eslint-plugin-import\nPurpose: Enforces import sorting and consistency.\nInstall:\nnpm install eslint-plugin-import --save-dev",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#integrating-eslint-with-prettier",
    "href": "eslint.html#integrating-eslint-with-prettier",
    "title": "ESLint",
    "section": "8. Integrating ESLint with Prettier",
    "text": "8. Integrating ESLint with Prettier\n\nPurpose:\n\nUse ESLint for linting.\nUse Prettier for formatting.\n\n\n\nInstall Required Packages:\nnpm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier\n\n\nUpdate Configuration:\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:prettier/recommended\"\n  ],\n  \"rules\": {\n    \"prettier/prettier\": \"error\"\n  }\n}\n\n\nRun Both:\nnpx eslint . --fix\nnpx prettier --write .",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#using-eslint-in-vs-code",
    "href": "eslint.html#using-eslint-in-vs-code",
    "title": "ESLint",
    "section": "9. Using ESLint in VS Code",
    "text": "9. Using ESLint in VS Code\n\nInstall ESLint Extension\n\nOpen VS Code.\nSearch for “ESLint” in the Extensions Marketplace.\nInstall the ESLint extension by Microsoft.\n\n\n\nConfigure VS Code Settings\nAdd the following to your settings.json:\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\"\n  ]\n}\n\n\nHow It Works:\n\nsource.fixAll.eslint: Automatically fixes ESLint issues on save.\neslint.validate: Specifies file types for ESLint to validate.",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#integrating-eslint-with-pre-commit-hooks",
    "href": "eslint.html#integrating-eslint-with-pre-commit-hooks",
    "title": "ESLint",
    "section": "10. Integrating ESLint with Pre-commit Hooks",
    "text": "10. Integrating ESLint with Pre-commit Hooks\nUse Husky and lint-staged to run ESLint before committing code:\n\nInstall Husky and lint-staged:\nnpm install --save-dev husky lint-staged\nUpdate package.json:\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.js\": \"eslint --fix\"\n  }\n}\nEnable Husky:\nnpx husky install",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#best-practices",
    "href": "eslint.html#best-practices",
    "title": "ESLint",
    "section": "11. Best Practices",
    "text": "11. Best Practices\n\nUse Recommended Configurations:\n\nStart with eslint:recommended or other popular presets like Airbnb or Prettier.\n\nCombine with Prettier:\n\nUse Prettier for formatting and ESLint for linting.\n\nIntegrate with CI/CD:\n\nAdd ESLint checks to your CI pipeline to enforce coding standards.\n\nCustom Rules:\n\nAdd rules specific to your project or team’s coding guidelines.",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#alternatives-to-eslint",
    "href": "eslint.html#alternatives-to-eslint",
    "title": "ESLint",
    "section": "12. Alternatives to ESLint",
    "text": "12. Alternatives to ESLint\n\nJSHint: Earlier tool for linting JavaScript, but lacks modern features.\nStandardJS: A zero-config linter with its own style guide.\nTSLint: Deprecated, but previously used for TypeScript (replaced by ESLint).",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "eslint.html#example-eslint-configurations",
    "href": "eslint.html#example-eslint-configurations",
    "title": "ESLint",
    "section": "13. Example ESLint Configurations",
    "text": "13. Example ESLint Configurations\n\nAirbnb Style Guide\nnpm install eslint-config-airbnb --save-dev\n{\n  \"extends\": [\"airbnb\"]\n}\n\n\nNode.js\n{\n  \"env\": {\n    \"node\": true\n  },\n  \"extends\": [\"eslint:recommended\"]\n}",
    "crumbs": [
      "Blog",
      "ESLint"
    ]
  },
  {
    "objectID": "0_website_metrics.html",
    "href": "0_website_metrics.html",
    "title": "Website Metrics",
    "section": "",
    "text": "Google Analytics is the most widely used free tool for tracking website traffic.\n\n\n✅ Real-time Traffic Monitoring – See active users\n✅ User Demographics & Behavior – Track page views, time on site, bounce rate\n✅ Conversion Tracking – Track sign-ups, purchases, and goals\n✅ Acquisition Channels – See where traffic is coming from (SEO, Ads, Social)\n✅ Event Tracking – Monitor clicks, form submissions, video plays\n\n\n\n\nSign up at Google Analytics\nCreate a Google Analytics Property\n\nCopy and paste the Tracking Code (GA4) in the &lt;head&gt; of your website\n\nUse Google Tag Manager to manage multiple tracking scripts\n\n\n\n\n&lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-XXXXXXXXXX');\n&lt;/script&gt;",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#google-analytics-best-for-comprehensive-tracking",
    "href": "0_website_metrics.html#google-analytics-best-for-comprehensive-tracking",
    "title": "Website Metrics",
    "section": "",
    "text": "Google Analytics is the most widely used free tool for tracking website traffic.\n\n\n✅ Real-time Traffic Monitoring – See active users\n✅ User Demographics & Behavior – Track page views, time on site, bounce rate\n✅ Conversion Tracking – Track sign-ups, purchases, and goals\n✅ Acquisition Channels – See where traffic is coming from (SEO, Ads, Social)\n✅ Event Tracking – Monitor clicks, form submissions, video plays\n\n\n\n\nSign up at Google Analytics\nCreate a Google Analytics Property\n\nCopy and paste the Tracking Code (GA4) in the &lt;head&gt; of your website\n\nUse Google Tag Manager to manage multiple tracking scripts\n\n\n\n\n&lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-XXXXXXXXXX');\n&lt;/script&gt;",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#google-search-console-best-for-seo-search-performance",
    "href": "0_website_metrics.html#google-search-console-best-for-seo-search-performance",
    "title": "Website Metrics",
    "section": "2. Google Search Console (Best for SEO & Search Performance)",
    "text": "2. Google Search Console (Best for SEO & Search Performance)\nGoogle Search Console (GSC) helps you monitor website performance in Google Search.\n\nKey Features:\n✅ See which keywords bring traffic\n✅ Check website indexing & crawl errors\n✅ Monitor Core Web Vitals (Speed, Mobile-Friendliness)\n✅ Fix SEO issues & submit sitemaps\n\n\nSetup:\n\nGo to Google Search Console\nAdd your website property\nVerify via HTML tag, DNS, or Google Analytics",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#microsoft-clarity-best-for-heatmaps-session-replay",
    "href": "0_website_metrics.html#microsoft-clarity-best-for-heatmaps-session-replay",
    "title": "Website Metrics",
    "section": "3. Microsoft Clarity (Best for Heatmaps & Session Replay)",
    "text": "3. Microsoft Clarity (Best for Heatmaps & Session Replay)\nMicrosoft Clarity is a free heatmap and session recording tool.\n\nKey Features:\n✅ Session Replay – Watch how users interact with your website\n✅ Heatmaps – See where users click & scroll\n✅ Detect User Frustration – Identify rage clicks & dead clicks\n✅ Privacy-Focused – No impact on website speed\n\n\nSetup:\n\nSign up at Clarity\n\nCopy and paste the tracking script into your website’s &lt;head&gt;\n\nStart viewing real-time user interactions",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#hotjar-best-for-ux-analysis-heatmaps",
    "href": "0_website_metrics.html#hotjar-best-for-ux-analysis-heatmaps",
    "title": "Website Metrics",
    "section": "4. Hotjar (Best for UX Analysis & Heatmaps)",
    "text": "4. Hotjar (Best for UX Analysis & Heatmaps)\nHotjar is another powerful tool for understanding user experience (UX).\n\nKey Features:\n✅ Heatmaps – Click tracking, scroll tracking, move tracking\n✅ Session Recordings – View how users navigate your site\n✅ Surveys & Feedback – Collect user feedback\n✅ Conversion Funnels – See where users drop off\n\n\nSetup:\n\nSign up at Hotjar\n\nCopy the tracking script into your website\n\nStart analyzing user behavior",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#matomo-best-for-privacy-focused-analytics",
    "href": "0_website_metrics.html#matomo-best-for-privacy-focused-analytics",
    "title": "Website Metrics",
    "section": "5. Matomo (Best for Privacy-Focused Analytics)",
    "text": "5. Matomo (Best for Privacy-Focused Analytics)\nMatomo (formerly Piwik) is an open-source alternative to Google Analytics.\n\nKey Features:\n✅ 100% Data Ownership – No third-party data sharing\n✅ GDPR & CCPA Compliance\n✅ Ecommerce & Goal Tracking\n✅ Self-hosted or Cloud-based options\n\n\nSetup:\n\nInstall Matomo on your server (if self-hosted)\nCopy and paste the Matomo tracking code into your website",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#cloudflare-analytics-best-for-performance-security",
    "href": "0_website_metrics.html#cloudflare-analytics-best-for-performance-security",
    "title": "Website Metrics",
    "section": "6. Cloudflare Analytics (Best for Performance & Security)",
    "text": "6. Cloudflare Analytics (Best for Performance & Security)\nIf you use Cloudflare for your website, you can access built-in analytics.\n\nKey Features:\n✅ Bot Traffic Detection\n✅ DNS & Firewall Logs\n✅ Visitor Traffic Analytics\n\n\nSetup:\n\nGo to Cloudflare Dashboard &gt; Analytics",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#awstats-goaccess-best-for-log-based-analytics",
    "href": "0_website_metrics.html#awstats-goaccess-best-for-log-based-analytics",
    "title": "Website Metrics",
    "section": "7. AWStats & GoAccess (Best for Log-Based Analytics)",
    "text": "7. AWStats & GoAccess (Best for Log-Based Analytics)\nFor server-level tracking, you can use AWStats or GoAccess to analyze Apache/Nginx logs.\n\nKey Features:\n✅ Track visitors without JavaScript (no scripts required)\n✅ Fast & lightweight\n✅ Works with Apache & Nginx logs\n\n\nSetup for GoAccess (Live Analytics)\nsudo apt install goaccess\ngoaccess /var/log/apache2/access.log --log-format=COMBINED -o report.html\n\nGenerates a real-time analytics report",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#uptime-monitoring-best-for-downtime-performance-alerts",
    "href": "0_website_metrics.html#uptime-monitoring-best-for-downtime-performance-alerts",
    "title": "Website Metrics",
    "section": "8. Uptime Monitoring (Best for Downtime & Performance Alerts)",
    "text": "8. Uptime Monitoring (Best for Downtime & Performance Alerts)\nTools: ✅ UptimeRobot – Free uptime monitoring\n✅ Pingdom – Advanced website performance tracking\n\nKey Features:\n\nGet notified if your site goes down\nMonitor response time & performance\n\nTrack server issues",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#track-conversions-with-facebook-pixel-google-ads",
    "href": "0_website_metrics.html#track-conversions-with-facebook-pixel-google-ads",
    "title": "Website Metrics",
    "section": "9. Track Conversions with Facebook Pixel & Google Ads",
    "text": "9. Track Conversions with Facebook Pixel & Google Ads\nIf you run ads, you need tracking:\n\nFacebook Pixel (Track Conversions)\n&lt;script&gt;\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window,document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', 'YOUR_PIXEL_ID');\nfbq('track', 'PageView');\n&lt;/script&gt;\n\nTracks ad conversions, leads, purchases\n\n\n\nGoogle Ads Conversion Tracking\n&lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=AW-123456789\"&gt;&lt;/script&gt;\n&lt;script&gt;\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\ngtag('config', 'AW-123456789');\n&lt;/script&gt;\n\nTracks ad ROI & user behavior",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#performance-monitoring-with-lighthouse-web-vitals",
    "href": "0_website_metrics.html#performance-monitoring-with-lighthouse-web-vitals",
    "title": "Website Metrics",
    "section": "10. Performance Monitoring with Lighthouse & Web Vitals",
    "text": "10. Performance Monitoring with Lighthouse & Web Vitals\nGoogle Lighthouse & Web Vitals help measure website speed & performance.\n\nHow to Use Lighthouse:\n\nOpen Chrome DevTools (F12 &gt; “Lighthouse” tab)\n\nClick “Generate Report”\n\n\n\nKey Metrics:\n✅ Page Load Speed\n✅ Largest Contentful Paint (LCP)\n✅ First Input Delay (FID)\nFor advanced tracking, use Google PageSpeed Insights:\n👉 PageSpeed Insights",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "0_website_metrics.html#final-recommendation-best-stack-for-tracking",
    "href": "0_website_metrics.html#final-recommendation-best-stack-for-tracking",
    "title": "Website Metrics",
    "section": "Final Recommendation (Best Stack for Tracking)",
    "text": "Final Recommendation (Best Stack for Tracking)\n\n\n\nTool\nPurpose\n\n\n\n\nGoogle Analytics\nGeneral website traffic\n\n\nGoogle Search Console\nSEO & keyword tracking\n\n\nMicrosoft Clarity\nHeatmaps & user behavior\n\n\nHotjar\nUX & session recordings\n\n\nMatomo\nPrivacy-focused analytics\n\n\nCloudflare Analytics\nSecurity & bot detection\n\n\nGoAccess\nServer log analysis\n\n\nUptimeRobot\nDowntime monitoring\n\n\n\n🚀 For the best insights, use Google Analytics + Microsoft Clarity + Search Console together!\nLet me know if you need help setting up any of these tools! 🔥",
    "crumbs": [
      "Blog",
      "Website Metrics"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html",
    "href": "Flutter/flutter_setup.html",
    "title": "Flutter Setup",
    "section": "",
    "text": "https://docs.flutter.dev/get-started/install/linux\n\nsudo snap install flutter --classic\nflutter sdk-path",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#install-flutter-in-wsl",
    "href": "Flutter/flutter_setup.html#install-flutter-in-wsl",
    "title": "Flutter Setup",
    "section": "",
    "text": "https://docs.flutter.dev/get-started/install/linux\n\nsudo snap install flutter --classic\nflutter sdk-path",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#check-flutter-install-status",
    "href": "Flutter/flutter_setup.html#check-flutter-install-status",
    "title": "Flutter Setup",
    "section": "Check FLutter install status",
    "text": "Check FLutter install status\nflutter doctor",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#install-android-studio-in-wsl",
    "href": "Flutter/flutter_setup.html#install-android-studio-in-wsl",
    "title": "Flutter Setup",
    "section": "Install Android Studio in WSL",
    "text": "Install Android Studio in WSL\nInstall android studio linux tar gz file\n\n\n\nandroid.png\n\n\n\nInstall using snap\n\ninstall java if needed\n\nsudo apt install openjdk-18-jdk\n\nsudo snap install android-studio --classic\n\ncheck android studio status\n\nsnap list android-studio\n\nadd andriod sdk path to flutter\n\nflutter config --android-sdk ~/Android/Sdk/\n\n\nManually download and install\ngo into usr/local and unzip the tar gz file\ncd /usr/local/\ntar xf ~/Downloads/android-studio-version-number-linux.tar.gz\n\n\nRestart the computer\n\nRestart the computer\n\nwsl --update\nwsl --shutdown",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#running-android-studio",
    "href": "Flutter/flutter_setup.html#running-android-studio",
    "title": "Flutter Setup",
    "section": "Running Android Studio",
    "text": "Running Android Studio\nandroid-studio\ncd /usr/local/\nandroid-studio/bin/studio.sh\nOpen Android Studio -&gt; More Actions -&gt; SDK manager -&gt; SDK Tools -&gt; Android SDK Command line\n\n\n\nsdk_manager.png\n\n\n\nConfigure Android\nStart Android Studio.\n\nThe Welcome to Android Studio dialog displays.\n\nFollow the Android Studio Setup Wizard.\n\nInstall the following components:\n    Android SDK Platform, API 33.0.0\n    Android SDK Command-line Tools\n    Android SDK Build-Tools\n    Android SDK Platform-Tools\n    Android Emulator\n\nTo fix android licencing\n\nflutter doctor --android-licenses",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#install-xming",
    "href": "Flutter/flutter_setup.html#install-xming",
    "title": "Flutter Setup",
    "section": "Install Xming",
    "text": "Install Xming\n\nNeeded to render graphic applications\n\nsudo apt update\nsudo apt install x11-apps -y\n\nxeyes",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#install-chrome",
    "href": "Flutter/flutter_setup.html#install-chrome",
    "title": "Flutter Setup",
    "section": "Install Chrome",
    "text": "Install Chrome\nsudo apt install -y chromium-browser",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#connect-phone",
    "href": "Flutter/flutter_setup.html#connect-phone",
    "title": "Flutter Setup",
    "section": "Connect Phone",
    "text": "Connect Phone\n\nEnable Developer options\n\nSettings -&gt; About phone -&gt; Software Information -&gt; Build Number\n\n\n\nUSB debugging\n\nSettings -&gt; Developer Options -&gt; USB debugging && Wireless debugging",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/flutter_setup.html#connect-phone-to-flutter-in-wsl",
    "href": "Flutter/flutter_setup.html#connect-phone-to-flutter-in-wsl",
    "title": "Flutter Setup",
    "section": "Connect Phone to Flutter in WSL",
    "text": "Connect Phone to Flutter in WSL\n\nInstall adb in windows\n\nhttps://developer.android.com/tools/releases/platform-tools\n\nadd path to windows environment path variable\nC:\\Users\\bthek\\OneDrive\\Documents\\platform-tools\nCheck for device connected\nadb devices\nTry restarting adb if device doesn’t show up\nadb kill-server\nadb start-server\n\n\nOnce your device is connected via USB, run the following command to map the desired port to adb.\n\nadb tcpip 5555\nGo to wsl and run\nadb connnect &lt;ip&gt;:&lt;port&gt;\nExample:\nadb connect 192.168.1.4:5555",
    "crumbs": [
      "Blog",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Flutter/widgets.html",
    "href": "Flutter/widgets.html",
    "title": "App development",
    "section": "",
    "text": "To create a new Flutter app, run the following commands in your shell or Terminal.\nflutter create test_flutter\ncd test_flutter\nTo verify that you have a running target device, run the following command.\nflutter devices\n\n\n\n\n\nList devices\nflutter emulators\nLaunch devices\nflutter emulators --launch &lt;emulator id&gt;\nTo run your app, run the following command.\nflutter run",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#create-a-new-project",
    "href": "Flutter/widgets.html#create-a-new-project",
    "title": "App development",
    "section": "",
    "text": "To create a new Flutter app, run the following commands in your shell or Terminal.\nflutter create test_flutter\ncd test_flutter\nTo verify that you have a running target device, run the following command.\nflutter devices\n\n\n\n\n\nList devices\nflutter emulators\nLaunch devices\nflutter emulators --launch &lt;emulator id&gt;\nTo run your app, run the following command.\nflutter run",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#make-changes",
    "href": "Flutter/widgets.html#make-changes",
    "title": "App development",
    "section": "Make changes",
    "text": "Make changes\n\nOpen lib/main.dart.\nMake changes\nSave your changes.\nType r in the terminal window.",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#widget-types",
    "href": "Flutter/widgets.html#widget-types",
    "title": "App development",
    "section": "Widget types",
    "text": "Widget types\n\nStateless widget\n\ncannot change with time\n\n\n\nStateful widget\n\ncan change with time\n\n\ninitState()\n\ncalled only when the widget is created\nSubscribe to streams or any object that could change our widget data\n\n\n\nBuild()\n\nBuilds the widget tree\nA build is triggered every time we use setState()\n\n\n\nDispose()\n\nWhen the widget/state object is removed",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#text-widget",
    "href": "Flutter/widgets.html#text-widget",
    "title": "App development",
    "section": "Text Widget",
    "text": "Text Widget\n\nstyle\ntextAlign\noverflow\nmaxLin- etc\n\nText('Click me')",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#button-widget",
    "href": "Flutter/widgets.html#button-widget",
    "title": "App development",
    "section": "Button Widget",
    "text": "Button Widget\n\ncolor\nelevation\ndisabledColor\nenabled\netc\n\n     body: Center(\n       child: ElevatedButton.icon(\n         onPressed: () {\n           print('You clicked me');\n         },\n         icon: const Icon(Icons.mail),\n         label: const Text('Mail me'),\n         style: ElevatedButton.styleFrom(\n           shadowColor: Colors.amber,\n         ),\n       ),\n     ),",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#row-and-column-widget",
    "href": "Flutter/widgets.html#row-and-column-widget",
    "title": "App development",
    "section": "Row and Column Widget",
    "text": "Row and Column Widget\n    body: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: &lt;Widget&gt;[\n          Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: const &lt;Widget&gt;[\n              Text('Hello'),\n              Text('World'),\n            ],\n          ),\n          Container(\n            padding: const EdgeInsets.all(20.0),\n            color: Colors.grey[200],\n            child: const TextButton(\n              onPressed: null,\n              child: Text('Click Me'),\n            ),\n          ),\n          const ElevatedButton(\n            onPressed: null,\n            child: Text('Click Me'),\n          ),\n          const OutlinedButton(\n            onPressed: null,\n            child: Text('Click'),\n          ),\n        ],\n      ),",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#image-widget",
    "href": "Flutter/widgets.html#image-widget",
    "title": "App development",
    "section": "Image Widget",
    "text": "Image Widget\n    body: Center(\n        child: Image.asset('assets/beach1.jpg'),\n      )",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#expanded-widget",
    "href": "Flutter/widgets.html#expanded-widget",
    "title": "App development",
    "section": "Expanded Widget",
    "text": "Expanded Widget\n\nlife flex grid\n\n      body: Row(\n        children: &lt;Widget&gt;[\n          Expanded(\n            flex: 3,\n            child: Image.asset('assets/space1.jpg'),\n          ),\n          Expanded(\n            flex: 2,\n            child: Container(\n              padding: const EdgeInsets.all(30.0),\n              color: Colors.cyan,\n              child: Text('1'),\n            ),\n          ),\n          Expanded(\n            flex: 1,\n            child: Container(\n              padding: const EdgeInsets.all(30.0),\n              color: Colors.pink,\n              child: Text('2'),\n            ),\n          ),\n          Expanded(\n            flex: 3,\n            child: Container(\n              padding: const EdgeInsets.all(30.0),\n              color: Colors.amber,\n              child: Text('3'),\n            ),\n          ),\n        ],\n      )",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#async-functions",
    "href": "Flutter/widgets.html#async-functions",
    "title": "App development",
    "section": "Async functions",
    "text": "Async functions\nvoid getData() async {\n    // simulate network request for a username\n    String username = await Future.delayed(Duration(seconds: 3), () {\n      return 'yoshi';\n    });\n\n    // simulate network request to get bio of the username\n    String bio = await Future.delayed(Duration(seconds: 2), () {\n      return 'vegan, musician & egg collector';\n    });\n\n    print('$username - $bio');\n  }\n  Future&lt;void&gt; getTime() async {\n    Response response = await get(\n      Uri.parse('http://worldtimeapi.org/api/timezone/$url'),\n    );\n    Map data = json.decode(response.body);\n\n    String datetime = data['datetime'];\n    String offset = data['utc_offset'].substring(1, 3);\n\n    DateTime now = DateTime.parse(datetime);\n    now = now.add(Duration(hours: int.parse(offset)));\n\n    time = now.toString();\n  }\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Flutter/widgets.html#routing",
    "href": "Flutter/widgets.html#routing",
    "title": "App development",
    "section": "Routing",
    "text": "Routing\n      routes: {\n        '/': (context) =&gt; Loading(),\n        '/home': (context) =&gt; Home(),\n        '/location': (context) =&gt; ChooseLocation(),\n      },\n    Navigator.pushReplacementNamed(context, '/home', arguments: {\n      'location': instance.location,\n      'flag': instance.flag,\n      'time': instance.time,\n      'isDaytime': instance.isDaytime,\n    });\n    onPressed: () async {\n      dynamic result =\n          await Navigator.pushNamed(context, '/location');\n      setState(() {\n        data = {\n          'time': result['time'],\n          'location': result['location'],\n          'isDaytime': result['isDaytime'],\n          'flag': result['flag'],\n        };\n      });\n    },\n    Navigator.pop(context, {\n      'location': instance.location,\n      'flag': instance.flag,\n      'time': instance.time,\n      'isDaytime': instance.isDaytime,\n    });",
    "crumbs": [
      "Blog",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "svgs.html",
    "href": "svgs.html",
    "title": "SVG",
    "section": "",
    "text": "SVG (Scalable Vector Graphics) is an XML format for 2D graphics (resolution-independent, searchable, stylable).\nRenders natively in all modern browsers; ideal for icons, logos, charts, diagrams, UI overlays, and annotation layers over Canvas/WebGL.",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#what-is-svg",
    "href": "svgs.html#what-is-svg",
    "title": "SVG",
    "section": "",
    "text": "SVG (Scalable Vector Graphics) is an XML format for 2D graphics (resolution-independent, searchable, stylable).\nRenders natively in all modern browsers; ideal for icons, logos, charts, diagrams, UI overlays, and annotation layers over Canvas/WebGL.",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#core-advantages-tradeoffs",
    "href": "svgs.html#core-advantages-tradeoffs",
    "title": "SVG",
    "section": "Core advantages & tradeoffs",
    "text": "Core advantages & tradeoffs\n\n\n\n\n\n\n\n\nTopic\nWhy it matters\nTips\n\n\n\n\nScalability\nNo pixelation on zoom\nPrefer SVG for crisp UI, charts, text\n\n\nStyling\nWorks with CSS + inline styles\nUse classes for reuse (.stroke-2, .muted)\n\n\nInteractivity\nJS events, hover states, SMIL/CSS animation\nKeep DOM small; batch updates\n\n\nAccessibility\nReal text & titles/readers\nUse &lt;title&gt;, &lt;desc&gt;, role, aria-*\n\n\nFile size\nOften smaller than PNG for simple art\nMinify; gzip (.svgz)\n\n\nPerformance\nDOM can get heavy for 10k+ nodes\nUse &lt;use&gt;, simplify paths; swap to Canvas for very dense scenes",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#essential-building-blocks",
    "href": "svgs.html#essential-building-blocks",
    "title": "SVG",
    "section": "Essential building blocks",
    "text": "Essential building blocks\n\nCoordinate system & responsiveness\n\nUse viewBox=\"minX minY width height\" to define drawing coords.\nMake it responsive: set width=\"100%\" and rely on viewBox for scaling (omit fixed height or control via CSS).\n\n&lt;svg viewBox=\"0 0 400 200\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;!-- content --&gt;\n&lt;/svg&gt;\n\n\nShapes & paths (the core tags)\n\n\n\n\n\n\n\n\nElement\nKey attributes\nNotes\n\n\n\n\n&lt;rect&gt;\nx y width height rx ry\nRounded corners via rx/ry\n\n\n&lt;circle&gt;\ncx cy r\nPerfect for nodes/dots\n\n\n&lt;ellipse&gt;\ncx cy rx ry\nScalable circles\n\n\n&lt;line&gt;\nx1 y1 x2 y2\nSimple segment\n\n\n&lt;polyline&gt;\npoints\nOpen shape\n\n\n&lt;polygon&gt;\npoints\nAuto-closed shape\n\n\n&lt;path&gt;\nd\nPowerful Bézier curves & arcs\n\n\n\nPath command mini-cheat\n\nM x y move; L x y line; H x/V y axis lines\nC x1 y1 x2 y2 x y cubic; Q x1 y1 x y quadratic\nA rx ry rot large-arc sweep x y arc; Z close path\n\n\n\nStyling\n\nInline: fill, stroke, stroke-width, opacity\nCSS: target classes/IDs for reusable styles.\n\n&lt;style&gt;\n  .muted { stroke: #94a3b8; fill: none; }\n&lt;/style&gt;\n&lt;path class=\"muted\" d=\"M10 10 L190 10\"/&gt;\n\n\nDefinitions & reuse\n\nPut assets in &lt;defs&gt;: gradients, filters, symbols, clip/mask.\nReuse with &lt;use href=\"#symbolId\" /&gt;.\n\n\n\nText & labels\n\n&lt;text x y&gt;, &lt;tspan&gt; for subspans, &lt;textPath&gt; to flow along a curve.\nFor charts/diagrams: set text-anchor=\"middle\" and dominant-baseline=\"middle\" for centering.",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#effects-animation",
    "href": "svgs.html#effects-animation",
    "title": "SVG",
    "section": "Effects & animation",
    "text": "Effects & animation\n\nGradients/Patterns: &lt;linearGradient&gt;, &lt;radialGradient&gt;, &lt;pattern&gt;\nFilters: &lt;feGaussianBlur&gt;, &lt;feDropShadow&gt;, &lt;feColorMatrix&gt; …\nAnimations:\n\nSMIL (built-in): &lt;animate&gt;, &lt;animateTransform&gt;\nCSS animations: for properties that are CSS-animatable\nJavaScript/D3: full control + data-binding\n\n\nExample SMIL:\n&lt;circle cx=\"40\" cy=\"40\" r=\"10\" fill=\"tomato\"&gt;\n  &lt;animate attributeName=\"cx\" dur=\"2s\" values=\"40;160;40\" repeatCount=\"indefinite\"/&gt;\n&lt;/circle&gt;",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#accessibility-security",
    "href": "svgs.html#accessibility-security",
    "title": "SVG",
    "section": "Accessibility & security",
    "text": "Accessibility & security\n\nAdd &lt;title&gt; and &lt;desc&gt; as first children for screen readers.\nAvoid untrusted inline scripts in SVG; sanitize user-uploaded SVGs.\nFor decorative SVGs: role=\"img\" + aria-hidden=\"true\" (if appropriate).",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#optimizing-production-tips",
    "href": "svgs.html#optimizing-production-tips",
    "title": "SVG",
    "section": "Optimizing & production tips",
    "text": "Optimizing & production tips\n\nMinify (SVGO) and gzip (.svgz).\nBreak complex art into smaller symbols; instantiate via &lt;use&gt;.\nConvert extremely dense layers to Canvas/WebGL, overlay SVG for crisp labels.\nWhen embedding in web apps:\n\nInline (&lt;svg&gt;…&lt;/svg&gt;) for full CSS/JS control.\n&lt;img src=\"…\"&gt; when you want it static and sandboxed.\nReact: import as component or inline in JSX.",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#python-example-generate-a-responsive-svg-bar-chart-pure-stdlib",
    "href": "svgs.html#python-example-generate-a-responsive-svg-bar-chart-pure-stdlib",
    "title": "SVG",
    "section": "Python example: generate a responsive SVG bar chart (pure stdlib)",
    "text": "Python example: generate a responsive SVG bar chart (pure stdlib)\nWorks in JupyterLab (and anywhere Python runs). Produces an SVG string and writes to file.\n\nfrom xml.etree.ElementTree import Element, SubElement, tostring\nfrom IPython.display import SVG, display  # Optional: for Jupyter inline display\n\ndef svg_bar_chart(\n    values, labels=None, width=520, height=280, margin=40, colors=None, title=None\n):\n    \"\"\"Return an SVG string for a responsive bar chart.\"\"\"\n    labels = labels or [str(i+1) for i in range(len(values))]\n    max_v = max(values) if values else 1\n    plot_w = width - 2 * margin\n    plot_h = height - 2 * margin\n    bar_w = plot_w / max(len(values), 1)\n\n    svg = Element(\"svg\", {\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"viewBox\": f\"0 0 {width} {height}\",\n        \"width\": \"100%\"  # responsive\n    })\n\n    # Styles (scoped to this SVG)\n    style = SubElement(svg, \"style\")\n    style.text = \"\"\"\n    .axis { stroke: #1f2937; stroke-width: 1; }\n    .grid { stroke: #e5e7eb; stroke-width: 1; }\n    .label { fill: #374151; font: 12px/1.2 DejaVu Sans, Arial; }\n    .title { fill: #111827; font: bold 14px/1.2 DejaVu Sans, Arial; }\n    \"\"\"\n\n    # Background\n    SubElement(svg, \"rect\", {\"x\": \"0\", \"y\": \"0\", \"width\": str(width), \"height\": str(height), \"fill\": \"#ffffff\"})\n\n    # Grid (y)\n    for gy in range(5):\n        y = margin + (gy * plot_h / 4.0)\n        SubElement(svg, \"line\", {\"x1\": str(margin), \"y1\": f\"{y:.2f}\",\n                                 \"x2\": str(width - margin), \"y2\": f\"{y:.2f}\",\n                                 \"class\": \"grid\"})\n\n    # Axes\n    SubElement(svg, \"line\", {\"x1\": str(margin), \"y1\": str(height - margin),\n                             \"x2\": str(width - margin), \"y2\": str(height - margin),\n                             \"class\": \"axis\"})\n    SubElement(svg, \"line\", {\"x1\": str(margin), \"y1\": str(margin),\n                             \"x2\": str(margin), \"y2\": str(height - margin),\n                             \"class\": \"axis\"})\n\n    # Bars\n    for i, v in enumerate(values):\n        # Height proportional to value\n        bh = 0 if max_v == 0 else (v / max_v) * plot_h\n        x = margin + i * bar_w + 6\n        y = (height - margin) - bh\n        fill = (colors[i % len(colors)] if colors else \"#60a5fa\")  # default blue-ish\n        SubElement(svg, \"rect\", {\n            \"x\": f\"{x:.2f}\", \"y\": f\"{y:.2f}\",\n            \"width\": f\"{bar_w - 12:.2f}\", \"height\": f\"{bh:.2f}\",\n            \"fill\": fill, \"rx\": \"4\", \"ry\": \"4\"\n        })\n        # X labels\n        SubElement(svg, \"text\", {\n            \"x\": f\"{x + (bar_w - 12)/2:.2f}\",\n            \"y\": f\"{height - margin + 16:.2f}\",\n            \"text-anchor\": \"middle\",\n            \"class\": \"label\"\n        }).text = labels[i]\n        # Value labels\n        SubElement(svg, \"text\", {\n            \"x\": f\"{x + (bar_w - 12)/2:.2f}\",\n            \"y\": f\"{y - 6:.2f}\",\n            \"text-anchor\": \"middle\",\n            \"class\": \"label\"\n        }).text = str(v)\n\n    # Title\n    if title:\n        SubElement(svg, \"text\", {\n            \"x\": f\"{width/2:.2f}\", \"y\": f\"{margin - 12:.2f}\",\n            \"text-anchor\": \"middle\", \"class\": \"title\"\n        }).text = title\n\n    return tostring(svg, encoding=\"unicode\")\n\n# --- Example usage ---\nvals = [3, 7, 5, 9, 4, 6]\nlabs = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nsvg_str = svg_bar_chart(vals, labs, title=\"Example SVG Bar Chart\")\n\n# Save to file\nwith open(\"chart.svg\", \"w\", encoding=\"utf-8\") as f:\n    f.write(svg_str)\n\n# In JupyterLab, render inline:\ndisplay(SVG(data=svg_str))\n\n\n\n\n\n\n\n\nWhy this approach?\n\nZero dependencies (stdlib xml.etree.ElementTree).\nResponsive via viewBox + width=\"100%\".\nEasy to extend (tooltips, &lt;title&gt;, animations, gradients).",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#advanced-features-youll-likely-use-next",
    "href": "svgs.html#advanced-features-youll-likely-use-next",
    "title": "SVG",
    "section": "Advanced features you’ll likely use next",
    "text": "Advanced features you’ll likely use next\n\nMarkers (arrows): use &lt;marker&gt; in &lt;defs&gt; and marker-end=\"url(#id)\".\nText along curves: define a path (&lt;path id=\"wave\" d=\"…\"&gt;) then &lt;textPath href=\"#wave\"&gt;.\nMasks & clips: spotlight effects, image brushes (&lt;mask&gt;, &lt;clipPath&gt;).\nFilters: crisp drop-shadows that print beautifully (&lt;feDropShadow&gt; beats CSS blur for vector fidelity).\nSymbol sprites: define icons once with &lt;symbol&gt; and instantiate with &lt;use&gt; all over.",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#tooling-ecosystem",
    "href": "svgs.html#tooling-ecosystem",
    "title": "SVG",
    "section": "Tooling & ecosystem",
    "text": "Tooling & ecosystem\n\nAuthoring: Inkscape, Illustrator, Figma (export SVG; simplify before shipping).\nProgrammatic (Python): svgwrite (nice API), cairosvg (convert SVG→PNG/PDF), lxml (advanced XML), BeautifulSoup (post-process).\nWeb: D3.js for data binding; React inline SVG components for UI; SVGO for minification.",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#quick-checklist-for-production",
    "href": "svgs.html#quick-checklist-for-production",
    "title": "SVG",
    "section": "Quick checklist for production",
    "text": "Quick checklist for production\n\n✅ Use viewBox + responsive sizing\n✅ Add &lt;title&gt;/&lt;desc&gt; for accessibility\n✅ Minify & gzip\n✅ Sanitize user-supplied SVGs\n✅ Keep DOM lightweight; prefer &lt;use&gt; for repetition\n✅ Consider Canvas/WebGL for very dense layers; keep labels in SVG",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "svgs.html#example",
    "href": "svgs.html#example",
    "title": "SVG",
    "section": "Example",
    "text": "Example\n\n🟦 1. Basic Rectangle + Circle\n\nfrom IPython.display import SVG, display\n\nsvg_str = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"120\"&gt;\n  &lt;rect x=\"10\" y=\"10\" width=\"80\" height=\"100\" fill=\"lightblue\" stroke=\"navy\" stroke-width=\"2\"/&gt;\n  &lt;circle cx=\"150\" cy=\"60\" r=\"40\" fill=\"salmon\" stroke=\"red\" stroke-width=\"2\"/&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_str))\n\n\n\n\n\n\n\n\n\n\n\n🖊 2. Line + Polygon\n\nsvg_str = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"120\"&gt;\n  &lt;line x1=\"10\" y1=\"10\" x2=\"190\" y2=\"110\" stroke=\"green\" stroke-width=\"3\"/&gt;\n  &lt;polygon points=\"60,20 100,100 20,100\" fill=\"orange\" stroke=\"black\" stroke-width=\"2\"/&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_str))\n\n\n\n\n\n\n\n\n\n\n📝 3. Text Example\n\nsvg_str = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"250\" height=\"100\"&gt;\n  &lt;text x=\"20\" y=\"40\" font-family=\"Arial\" font-size=\"20\" fill=\"purple\"&gt;Hello SVG!&lt;/text&gt;\n  &lt;text x=\"20\" y=\"70\" font-family=\"Courier New\" font-size=\"16\" fill=\"darkblue\"&gt;In JupyterLab&lt;/text&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_str))\n\n\n\n\n\n\n\n\n\n\n🌈 4. Gradient Fill\n\nsvg_str = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"220\" height=\"120\"&gt;\n  &lt;defs&gt;\n    &lt;linearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"&gt;\n      &lt;stop offset=\"0%\" style=\"stop-color:skyblue; stop-opacity:1\" /&gt;\n      &lt;stop offset=\"100%\" style=\"stop-color:steelblue; stop-opacity:1\" /&gt;\n    &lt;/linearGradient&gt;\n  &lt;/defs&gt;\n  &lt;rect x=\"10\" y=\"10\" width=\"200\" height=\"100\" fill=\"url(#grad)\" stroke=\"black\"/&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_str))\n\n\n\n\n\n\n\n\n\n\n🔄 5. Simple Animation\n\nsvg_str = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"250\" height=\"120\"&gt;\n  &lt;circle cx=\"40\" cy=\"60\" r=\"20\" fill=\"tomato\"&gt;\n    &lt;animate attributeName=\"cx\" from=\"40\" to=\"200\" dur=\"2s\" repeatCount=\"indefinite\" /&gt;\n  &lt;/circle&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_str))\n\n\n\n\n\n\n\n\n\n\n🔄 6. Bouncing Ball\n\nfrom IPython.display import SVG, display\n\nsvg_bounce = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"150\"&gt;\n  &lt;circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"tomato\"&gt;\n    &lt;animate attributeName=\"cy\" values=\"50;120;50\" dur=\"1s\" repeatCount=\"indefinite\"/&gt;\n    &lt;animate attributeName=\"cx\" values=\"50;250;50\" dur=\"2s\" repeatCount=\"indefinite\"/&gt;\n  &lt;/circle&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_bounce))\n\n\n\n\n\n\n\n\n\n\n🌈 7. Color-Changing Circle\n\nsvg_color = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"&gt;\n  &lt;circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"red\"&gt;\n    &lt;animate attributeName=\"fill\" values=\"red;blue;green;purple;red\" dur=\"4s\" repeatCount=\"indefinite\"/&gt;\n  &lt;/circle&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_color))\n\n\n\n\n\n\n\n\n\n\n📊 8. Growing Bar Graph\n\nsvg_bar = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"150\"&gt;\n  &lt;rect x=\"30\" y=\"100\" width=\"40\" height=\"0\" fill=\"steelblue\"&gt;\n    &lt;animate attributeName=\"height\" from=\"0\" to=\"80\" dur=\"1s\" fill=\"freeze\"/&gt;\n    &lt;animate attributeName=\"y\" from=\"100\" to=\"20\" dur=\"1s\" fill=\"freeze\"/&gt;\n  &lt;/rect&gt;\n  &lt;rect x=\"100\" y=\"100\" width=\"40\" height=\"0\" fill=\"orange\"&gt;\n    &lt;animate attributeName=\"height\" from=\"0\" to=\"60\" dur=\"1.5s\" fill=\"freeze\"/&gt;\n    &lt;animate attributeName=\"y\" from=\"100\" to=\"40\" dur=\"1.5s\" fill=\"freeze\"/&gt;\n  &lt;/rect&gt;\n  &lt;rect x=\"170\" y=\"100\" width=\"40\" height=\"0\" fill=\"tomato\"&gt;\n    &lt;animate attributeName=\"height\" from=\"0\" to=\"100\" dur=\"2s\" fill=\"freeze\"/&gt;\n    &lt;animate attributeName=\"y\" from=\"100\" to=\"0\" dur=\"2s\" fill=\"freeze\"/&gt;\n  &lt;/rect&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_bar))\n\n\n\n\n\n\n\n\n\n\n🌀 9. Rotating Loader (Spinner)\n\nsvg_spinner = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 100 100\"&gt;\n  &lt;circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"blue\" stroke-width=\"6\" fill=\"none\" stroke-dasharray=\"60 40\"&gt;\n    &lt;animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"1s\" repeatCount=\"indefinite\"/&gt;\n  &lt;/circle&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_spinner))\n\n\n\n\n\n\n\n\n\n\n🌟 10. Star Path Glow Animation\n\nsvg_star = \"\"\"\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"250\" height=\"250\"&gt;\n  &lt;polygon points=\"125,20 150,100 230,100 160,150 185,230 125,180 65,230 90,150 20,100 100,100\"\n           fill=\"gold\" stroke=\"orange\" stroke-width=\"3\"&gt;\n    &lt;animate attributeName=\"fill\" values=\"gold;yellow;orange;gold\" dur=\"3s\" repeatCount=\"indefinite\"/&gt;\n    &lt;animate attributeName=\"stroke-width\" values=\"3;6;3\" dur=\"2s\" repeatCount=\"indefinite\"/&gt;\n  &lt;/polygon&gt;\n&lt;/svg&gt;\n\"\"\"\n\ndisplay(SVG(svg_star))",
    "crumbs": [
      "Blog",
      "SVG"
    ]
  },
  {
    "objectID": "Javascript/datatables.html",
    "href": "Javascript/datatables.html",
    "title": "Datatables",
    "section": "",
    "text": "Sure! Here’s a streamlined guide on Displaying Tables with DataTables Using Ajax and Fetch API. This guide assumes you have your backend (e.g., Django DRF) already set up to provide the necessary data via API endpoints.",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#include-datatables-assets",
    "href": "Javascript/datatables.html#include-datatables-assets",
    "title": "Datatables",
    "section": "1. Include DataTables Assets",
    "text": "1. Include DataTables Assets\nFirst, ensure you include jQuery and DataTables CSS/JS in your HTML.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;DataTables Example&lt;/title&gt;\n    &lt;!-- DataTables CSS --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table id=\"exampleTable\" class=\"display\" style=\"width:100%\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;ID&lt;/th&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n                &lt;th&gt;Department&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;!-- Data will be populated here --&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;!-- jQuery --&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- DataTables JS --&gt;\n    &lt;script src=\"https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#using-datatables-with-jquery-ajax",
    "href": "Javascript/datatables.html#using-datatables-with-jquery-ajax",
    "title": "Datatables",
    "section": "2. Using DataTables with jQuery Ajax",
    "text": "2. Using DataTables with jQuery Ajax\nDataTables natively supports Ajax using jQuery. Here’s how to set it up:\n\nInitialize DataTables with Ajax\n&lt;script&gt;\n$(document).ready(function() {\n    $('#exampleTable').DataTable({\n        \"ajax\": {\n            \"url\": \"/api/data/\", // Your API endpoint\n            \"dataSrc\": \"\" // Adjust based on your API response structure\n        },\n        \"columns\": [\n            { \"data\": \"id\" },\n            { \"data\": \"name\" },\n            { \"data\": \"email\" },\n            { \"data\": \"department\" }\n        ]\n    });\n});\n&lt;/script&gt;\n\n\nExplanation:\n\najax.url: URL of your API endpoint.\najax.dataSrc: Key in your JSON response where data array is located. Use \"\" if the data is the root array.\ncolumns: Define which data fields to display in each column.",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#using-datatables-with-fetch-api",
    "href": "Javascript/datatables.html#using-datatables-with-fetch-api",
    "title": "Datatables",
    "section": "3. Using DataTables with Fetch API",
    "text": "3. Using DataTables with Fetch API\nWhile DataTables is optimized for jQuery’s Ajax, you can integrate it with the Fetch API using its API methods.\n\nFetch Data and Populate DataTables\n&lt;script&gt;\ndocument.addEventListener('DOMContentLoaded', function() {\n    fetch('/api/data/') // Your API endpoint\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            $('#exampleTable').DataTable({\n                data: data, // Your data array\n                columns: [\n                    { data: 'id' },\n                    { data: 'name' },\n                    { data: 'email' },\n                    { data: 'department' }\n                ]\n            });\n        })\n        .catch(error =&gt; console.error('Error fetching data:', error));\n});\n&lt;/script&gt;\n\n\nExplanation:\n\nFetch Data: Use the Fetch API to retrieve data from the API endpoint.\nInitialize DataTables: Pass the fetched data to DataTables during initialization.",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#handling-data-formatting",
    "href": "Javascript/datatables.html#handling-data-formatting",
    "title": "Datatables",
    "section": "4. Handling Data Formatting",
    "text": "4. Handling Data Formatting\nEnsure your API returns data in a format compatible with DataTables. Typically, an array of objects where each object represents a row.\n\nSample JSON Response:\n[\n    {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\",\n        \"department\": \"Engineering\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Jane Smith\",\n        \"email\": \"jane@example.com\",\n        \"department\": \"Marketing\"\n    }\n]",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#advanced-server-side-processing-with-fetch-api",
    "href": "Javascript/datatables.html#advanced-server-side-processing-with-fetch-api",
    "title": "Datatables",
    "section": "5. Advanced: Server-Side Processing with Fetch API",
    "text": "5. Advanced: Server-Side Processing with Fetch API\nFor large datasets, handle pagination, sorting, and searching on the server.\n\nModify Fetch Request with Parameters\n&lt;script&gt;\ndocument.addEventListener('DOMContentLoaded', function() {\n    const table = $('#exampleTable').DataTable({\n        \"processing\": true,\n        \"serverSide\": true,\n        \"ajax\": function(data, callback, settings) {\n            // Map DataTables parameters to your API\n            const params = {\n                search: data.search.value,\n                order: data.order.map(order =&gt; ({\n                    column: data.columns[order.column].data,\n                    dir: order.dir\n                })),\n                start: data.start,\n                length: data.length\n            };\n\n            fetch(`/api/data/?search=${params.search}&start=${params.start}&length=${params.length}`)\n                .then(response =&gt; response.json())\n                .then(json =&gt; {\n                    callback({\n                        recordsTotal: json.total, // Total records\n                        recordsFiltered: json.filtered, // Records after filtering\n                        data: json.results // Data array\n                    });\n                })\n                .catch(error =&gt; console.error('Error fetching data:', error));\n        },\n        \"columns\": [\n            { \"data\": \"id\" },\n            { \"data\": \"name\" },\n            { \"data\": \"email\" },\n            { \"data\": \"department\" }\n        ]\n    });\n});\n&lt;/script&gt;\n\n\nExplanation:\n\nserverSide: true: Enables server-side processing.\nCustom ajax function: Handles sending parameters and processing the response to fit DataTables’ expectations.\nAPI Response: Should include total, filtered, and results fields.",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#styling-and-responsiveness",
    "href": "Javascript/datatables.html#styling-and-responsiveness",
    "title": "Datatables",
    "section": "6. Styling and Responsiveness",
    "text": "6. Styling and Responsiveness\nEnhance table appearance and ensure it adapts to different screen sizes.\n\nAdd Responsive Extension (Optional)\n&lt;!-- DataTables Responsive CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.datatables.net/responsive/2.4.1/css/responsive.dataTables.min.css\"&gt;\n&lt;!-- DataTables Responsive JS --&gt;\n&lt;script src=\"https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js\"&gt;&lt;/script&gt;\n\n\nInitialize with Responsive Option\n$('#exampleTable').DataTable({\n    \"responsive\": true,\n    // ... other options\n});",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/datatables.html#adding-export-buttons-optional",
    "href": "Javascript/datatables.html#adding-export-buttons-optional",
    "title": "Datatables",
    "section": "7. Adding Export Buttons (Optional)",
    "text": "7. Adding Export Buttons (Optional)\nAllow users to export table data in various formats.\n\nInclude Buttons Extension\n&lt;!-- DataTables Buttons CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.datatables.net/buttons/2.3.6/css/buttons.dataTables.min.css\"&gt;\n&lt;!-- DataTables Buttons JS --&gt;\n&lt;script src=\"https://cdn.datatables.net/buttons/2.3.6/js/dataTables.buttons.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdn.datatables.net/buttons/2.3.6/js/buttons.html5.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdn.datatables.net/buttons/2.3.6/js/buttons.print.min.js\"&gt;&lt;/script&gt;\n\n\nInitialize with Buttons\n$('#exampleTable').DataTable({\n    \"dom\": 'Bfrtip',\n    \"buttons\": [\n        'copy', 'csv', 'excel', 'pdf', 'print'\n    ],\n    // ... other options\n});",
    "crumbs": [
      "Blog",
      "Javascript",
      "Datatables"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html",
    "href": "Javascript/highcharts.html",
    "title": "High Charts",
    "section": "",
    "text": "First, set up your Django project and install the necessary dependencies:\npip install django djangorestframework\nCreate a new Django project and app:\ndjango-admin startproject myproject\ncd myproject\npython manage.py startapp charts\nAdd the following to INSTALLED_APPS in myproject/settings.py:\nINSTALLED_APPS = [\n    # other apps\n    'rest_framework',\n    'charts',  # your new app\n]\n\n\n\nIn the charts/models.py, define a model that holds the data you want to visualize using Highcharts. For example, let’s create a model for sales data:\nfrom django.db import models\n\nclass SalesData(models.Model):\n    date = models.DateField()\n    revenue = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"{self.date}: {self.revenue}\"\n\n\n\nIn charts/serializers.py, create a serializer to convert the SalesData model into JSON format:\nfrom rest_framework import serializers\nfrom .models import SalesData\n\nclass SalesDataSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SalesData\n        fields = ['date', 'revenue']\n\n\n\nIn charts/views.py, create an API view that fetches and returns the sales data:\nfrom rest_framework import generics\nfrom .models import SalesData\nfrom .serializers import SalesDataSerializer\n\nclass SalesDataList(generics.ListAPIView):\n    queryset = SalesData.objects.all()\n    serializer_class = SalesDataSerializer\n\n\n\nIn charts/urls.py, create a route for the API view:\nfrom django.urls import path\nfrom .views import SalesDataList\n\nurlpatterns = [\n    path('sales/', SalesDataList.as_view(), name='sales-data'),\n]\nIn your main myproject/urls.py, include the charts app URLs:\nfrom django.urls import path, include\n\nurlpatterns = [\n    # other URLs\n    path('api/', include('charts.urls')),\n]\n\n\n\nRun the migrations and create some sample data for testing:\npython manage.py makemigrations\npython manage.py migrate\nIn the Django admin or shell, create a few SalesData records for testing.",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#setting-up-a-django-drf-project",
    "href": "Javascript/highcharts.html#setting-up-a-django-drf-project",
    "title": "High Charts",
    "section": "",
    "text": "First, set up your Django project and install the necessary dependencies:\npip install django djangorestframework\nCreate a new Django project and app:\ndjango-admin startproject myproject\ncd myproject\npython manage.py startapp charts\nAdd the following to INSTALLED_APPS in myproject/settings.py:\nINSTALLED_APPS = [\n    # other apps\n    'rest_framework',\n    'charts',  # your new app\n]\n\n\n\nIn the charts/models.py, define a model that holds the data you want to visualize using Highcharts. For example, let’s create a model for sales data:\nfrom django.db import models\n\nclass SalesData(models.Model):\n    date = models.DateField()\n    revenue = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"{self.date}: {self.revenue}\"\n\n\n\nIn charts/serializers.py, create a serializer to convert the SalesData model into JSON format:\nfrom rest_framework import serializers\nfrom .models import SalesData\n\nclass SalesDataSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SalesData\n        fields = ['date', 'revenue']\n\n\n\nIn charts/views.py, create an API view that fetches and returns the sales data:\nfrom rest_framework import generics\nfrom .models import SalesData\nfrom .serializers import SalesDataSerializer\n\nclass SalesDataList(generics.ListAPIView):\n    queryset = SalesData.objects.all()\n    serializer_class = SalesDataSerializer\n\n\n\nIn charts/urls.py, create a route for the API view:\nfrom django.urls import path\nfrom .views import SalesDataList\n\nurlpatterns = [\n    path('sales/', SalesDataList.as_view(), name='sales-data'),\n]\nIn your main myproject/urls.py, include the charts app URLs:\nfrom django.urls import path, include\n\nurlpatterns = [\n    # other URLs\n    path('api/', include('charts.urls')),\n]\n\n\n\nRun the migrations and create some sample data for testing:\npython manage.py makemigrations\npython manage.py migrate\nIn the Django admin or shell, create a few SalesData records for testing.",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#frontend-integration-highcharts-setup",
    "href": "Javascript/highcharts.html#frontend-integration-highcharts-setup",
    "title": "High Charts",
    "section": "2. Frontend Integration: Highcharts Setup",
    "text": "2. Frontend Integration: Highcharts Setup\nOnce you have the Django DRF API serving data, you can set up Highcharts on the frontend to visualize it.\n\na. Setting Up Highcharts in a Django Template\nIn the charts/templates/charts/index.html file, include Highcharts via CDN and fetch data using JavaScript. For example:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Sales Data&lt;/title&gt;\n    &lt;script src=\"https://code.highcharts.com/highcharts.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://code.highcharts.com/modules/exporting.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"container\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            fetch('/api/sales/')\n                .then(response =&gt; response.json())\n                .then(data =&gt; {\n                    const categories = data.map(item =&gt; item.date);\n                    const revenues = data.map(item =&gt; parseFloat(item.revenue));\n\n                    Highcharts.chart('container', {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'Sales Revenue Over Time'\n                        },\n                        xAxis: {\n                            categories: categories\n                        },\n                        yAxis: {\n                            title: {\n                                text: 'Revenue (USD)'\n                            }\n                        },\n                        series: [{\n                            name: 'Revenue',\n                            data: revenues\n                        }]\n                    });\n                });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nb. Serving the Template\nIn charts/views.py, create a view to serve the HTML page that contains the Highcharts:\nfrom django.shortcuts import render\n\ndef index(request):\n    return render(request, 'charts/index.html')\nUpdate charts/urls.py to serve this view:\nfrom django.urls import path\nfrom .views import SalesDataList, index\n\nurlpatterns = [\n    path('sales/', SalesDataList.as_view(), name='sales-data'),\n    path('', index, name='index'),\n]",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#handling-data-from-django-drf-in-highcharts",
    "href": "Javascript/highcharts.html#handling-data-from-django-drf-in-highcharts",
    "title": "High Charts",
    "section": "3. Handling Data from Django DRF in Highcharts",
    "text": "3. Handling Data from Django DRF in Highcharts\nWhen fetching data from Django DRF, you often deal with JSON arrays or objects. Highcharts requires the data to be processed into a specific format.\n\nExample of Mapping API Data to Highcharts\nfetch('/api/sales/')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        const categories = data.map(item =&gt; item.date);\n        const revenues = data.map(item =&gt; parseFloat(item.revenue));\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'  // Type of chart\n            },\n            title: {\n                text: 'Monthly Sales Revenue'\n            },\n            xAxis: {\n                categories: categories\n            },\n            yAxis: {\n                title: {\n                    text: 'Revenue (USD)'\n                }\n            },\n            series: [{\n                name: 'Revenue',\n                data: revenues\n            }]\n        });\n    });",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#customizing-highcharts-in-django-projects",
    "href": "Javascript/highcharts.html#customizing-highcharts-in-django-projects",
    "title": "High Charts",
    "section": "4. Customizing Highcharts in Django Projects",
    "text": "4. Customizing Highcharts in Django Projects\n\na. Customizing Chart Types\nYou can change the chart type (e.g., line, column, pie) by modifying the chart.type property. Highcharts supports multiple chart types, such as line, bar, pie, scatter, and more.\nExample:\nchart: {\n    type: 'bar'  // Bar chart instead of a line chart\n}\n\n\nb. Adding Tooltips and Data Labels\nYou can add tooltips and data labels for better interactivity and user experience:\ntooltip: {\n    pointFormat: '{series.name}: &lt;b&gt;{point.y:.2f}&lt;/b&gt;&lt;br/&gt;',\n    valueSuffix: ' USD'\n},\nplotOptions: {\n    series: {\n        dataLabels: {\n            enabled: true,\n            format: '{point.y:.2f}'\n        }\n    }\n}\n\n\nc. Handling Time Series Data\nIf you’re working with time series data (e.g., date-based data), you can configure the x-axis to be a datetime axis:\nxAxis: {\n    type: 'datetime',\n    categories: data.map(item =&gt; new Date(item.date).getTime()),  // Convert dates to timestamps\n    labels: {\n        format: '{value:%Y-%m-%d}'  // Format the date labels\n    }\n}",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#real-time-updates-in-highcharts-with-drf",
    "href": "Javascript/highcharts.html#real-time-updates-in-highcharts-with-drf",
    "title": "High Charts",
    "section": "5. Real-Time Updates in Highcharts with DRF",
    "text": "5. Real-Time Updates in Highcharts with DRF\nTo update Highcharts in real-time, you can either use: - Polling: Periodically fetch new data from the DRF API using JavaScript setInterval. - WebSockets: Use Django Channels to push real-time updates to the frontend.\n\nExample: Polling Data for Real-Time Updates\nsetInterval(() =&gt; {\n    fetch('/api/sales/')\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            const categories = data.map(item =&gt; item.date);\n            const revenues = data.map(item =&gt; parseFloat(item.revenue));\n\n            const chart = Highcharts.chart('container', {\n                series: [{\n                    data: revenues\n                }],\n                xAxis: {\n                    categories: categories\n                }\n            });\n            chart.redraw();  // Update the chart with new data\n        });\n}, 5000);  // Fetch new data every 5 seconds",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#exporting-charts",
    "href": "Javascript/highcharts.html#exporting-charts",
    "title": "High Charts",
    "section": "6. Exporting Charts",
    "text": "6. Exporting Charts\nHighcharts has built-in support for exporting charts as PNG, JPEG, PDF, or SVG. You can enable exporting by including the exporting.js module and adding export buttons.\n\nExample:\n&lt;script src=\"https://code.highcharts.com/modules/exporting.js\"&gt;&lt;/script&gt;\n\nHighcharts.chart('container', {\n    exporting: {\n        enabled: true  // Adds export buttons for saving chart as PNG, PDF, etc.\n    }\n});",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#common-highcharts-modules",
    "href": "Javascript/highcharts.html#common-highcharts-modules",
    "title": "High Charts",
    "section": "7. Common Highcharts Modules",
    "text": "7. Common Highcharts Modules\nHighcharts provides several additional modules that you can include in your Django DRF project: - Highcharts Stock: For financial and stock charts. - Highcharts Maps: For visualizing geographical data. - Highcharts Gantt: For Gantt charts and project management timelines.\nInclude these as separate modules:\n&lt;script src=\"https://code.highcharts.com/stock/highstock.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://code.highcharts.com/maps/modules/map\n\n.js\"&gt;&lt;/script&gt;",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/highcharts.html#recommanded-data-structure-from-drf-with-ajax-with-fetch-api",
    "href": "Javascript/highcharts.html#recommanded-data-structure-from-drf-with-ajax-with-fetch-api",
    "title": "High Charts",
    "section": "Recommanded Data Structure from DRF with Ajax with Fetch API",
    "text": "Recommanded Data Structure from DRF with Ajax with Fetch API\n\nWhen working with Django REST Framework (DRF) and sending data for use with Highcharts (a popular charting library) via AJAX using Fetch API, the structure of your JSON response from the DRF API must be properly formatted to match the expected data structure for Highcharts.\n\n\nRecommended JSON Structure for Highcharts Series Chart\nHighcharts accepts a specific format for its data, particularly for series-based charts (e.g., line charts, column charts). Here’s a general overview of the JSON structure for series data in Highcharts:\n{\n  \"chart\": {\n    \"type\": \"line\"  // Chart type (e.g., 'line', 'column', etc.)\n  },\n  \"title\": {\n    \"text\": \"Example Chart Title\"\n  },\n  \"xAxis\": {\n    \"categories\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]  // Labels for X-axis\n  },\n  \"series\": [\n    {\n      \"name\": \"Series 1\",\n      \"data\": [29.9, 71.5, 106.4, 129.2, 144.0]  // Data points for Series 1\n    },\n    {\n      \"name\": \"Series 2\",\n      \"data\": [34.9, 68.5, 98.4, 124.2, 145.0]  // Data points for Series 2\n    }\n  ]\n}\nFor a typical line or column chart in Highcharts, you will need to return two main pieces of data: 1. Categories (X-axis): A list of values representing the categories (e.g., months, days, time points). 2. Series (Y-axis): An array of objects where each object represents a series of data points with a name (label for the series) and data (the actual data points).\n\n\nExample DRF JSON Response\nYour DRF view should return a similar JSON structure that can be easily consumed by the front-end JavaScript using the Fetch API. Here’s how you might structure the JSON in your Django view:\n{\n  \"chart_type\": \"line\",  // Optional: Provide chart type from the backend\n  \"categories\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"],  // X-axis categories\n  \"series\": [\n    {\n      \"name\": \"Series 1\",\n      \"data\": [29.9, 71.5, 106.4, 129.2, 144.0]  // Y-axis data points for Series 1\n    },\n    {\n      \"name\": \"Series 2\",\n      \"data\": [34.9, 68.5, 98.4, 124.2, 145.0]  // Y-axis data points for Series 2\n    }\n  ]\n}\n\n\nExample Django DRF View\nHere’s how you can set up your Django view to return this data:\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass HighchartsDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        data = {\n            \"chart_type\": \"line\",\n            \"categories\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"],\n            \"series\": [\n                {\n                    \"name\": \"Series 1\",\n                    \"data\": [29.9, 71.5, 106.4, 129.2, 144.0]\n                },\n                {\n                    \"name\": \"Series 2\",\n                    \"data\": [34.9, 68.5, 98.4, 124.2, 145.0]\n                }\n            ]\n        }\n        return Response(data)\n\n\nExample JavaScript Fetch API to Fetch and Use Data in Highcharts\nOn the front-end, you can use the Fetch API to request data from your DRF API and use it to render a Highcharts chart:\ndocument.addEventListener('DOMContentLoaded', function () {\n  fetch('http://localhost:8000/api/highcharts-data/')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n      Highcharts.chart('container', {\n        chart: {\n          type: data.chart_type  // Dynamic chart type from API\n        },\n        title: {\n          text: 'Django DRF Highcharts Example'\n        },\n        xAxis: {\n          categories: data.categories  // X-axis categories from API\n        },\n        series: data.series  // Series data from API\n      });\n    })\n    .catch(error =&gt; console.error('Error fetching data:', error));\n});\n\n\nPoints to Consider:\n\nDynamic Data: The data in your DRF response could be dynamically generated based on queries (e.g., fetching data from a database). You should ensure the categories (X-axis) and series data are generated correctly.\nChart Customization: You can also return additional chart customization options (such as the chart_type or title) from the DRF API if the chart configuration needs to be dynamic.\nEfficient Data Transfer: Depending on the size of your data, you may want to optimize the payload size (e.g., avoid sending unnecessary data or compress responses).\nCORS: If your front end is hosted separately from your Django API, ensure that CORS is correctly configured to allow the front-end application to access your API.\nAuthentication: If your API is protected (e.g., requiring authentication), make sure you handle token-based or session-based authentication in your AJAX requests.\n\n\n\nConclusion\nFor a typical Highcharts series chart in a Django DRF project, the JSON structure should include: - categories (for the X-axis). - series (an array of objects containing series names and data points).\nBy following this structure, you can easily integrate your Django DRF back end with a Highcharts front end using the Fetch API to retrieve data asynchronously.",
    "crumbs": [
      "Blog",
      "Javascript",
      "High Charts"
    ]
  },
  {
    "objectID": "Javascript/fetch_api.html",
    "href": "Javascript/fetch_api.html",
    "title": "Fetch API",
    "section": "",
    "text": "Key Features of Fetch API:\n\nPromise-Based: The Fetch API returns promises, making it easier to handle asynchronous requests with cleaner, more readable code. This eliminates the need for callbacks or event-based responses that were common with XMLHttpRequest.\nExample:\nfetch('https://api.example.com/data')\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error('Error:', error));\nSimplified Syntax: Fetch has a more streamlined and cleaner syntax compared to XMLHttpRequest. It is designed to handle the most common use cases for fetching resources from a server or submitting data to a server.\nHandles Different HTTP Methods: You can make GET, POST, PUT, DELETE, and other HTTP requests easily with Fetch. The method of the request can be specified using options in the second argument.\nExample for a POST request:\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    name: 'John Doe',\n    email: 'john@example.com'\n  }),\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data))\n.catch(error =&gt; console.error('Error:', error));\nResponse Object: Fetch returns a Response object that contains several useful methods and properties:\n\nresponse.ok: Boolean indicating whether the response was successful (status code in the range 200–299).\nresponse.status: HTTP status code of the response.\nresponse.text(): Extracts the response body as a plain text string.\nresponse.json(): Extracts the response body as a JSON object (most commonly used for APIs).\n\nExample of response handling:\nfetch('https://api.example.com/data')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error('There has been a problem with your fetch operation:', error));\nSupports CORS: Fetch fully supports Cross-Origin Resource Sharing (CORS), making it easier to work with resources from different domains as long as the server allows it by setting appropriate headers.\nStreams: The Fetch API supports streaming data, which allows you to start processing large responses incrementally as they are received, rather than waiting for the entire response to load.\nAbort Controller: Fetch supports AbortController, which allows you to cancel a fetch request that has already been initiated. This is useful for scenarios where you want to abort a request that’s taking too long or if the user navigates away from a page.\nExample:\nconst controller = new AbortController();\nconst signal = controller.signal;\n\nfetch('https://api.example.com/data', { signal })\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error('Fetch aborted or failed:', error));\n\n// Abort the fetch request after 3 seconds\nsetTimeout(() =&gt; controller.abort(), 3000);\nHandles Various Response Formats: The Fetch API can handle various types of responses:\n\nJSON: Using response.json().\nText: Using response.text().\nBlob: Useful for working with binary data like images or PDFs (response.blob()).\nFormData: For handling form submissions and file uploads.\n\n\n\n\nAdvantages of Fetch API:\n\nSimplicity: It’s simpler and more intuitive compared to XMLHttpRequest.\nReadability: The promise-based approach makes code more readable and avoids “callback hell.”\nConsistency: Works consistently across the majority of modern browsers.\nStreaming support: Can handle large files in chunks without loading them all into memory.\n\n\n\nLimitations:\n\nNo support for progress events: Unlike XMLHttpRequest, Fetch doesn’t allow for monitoring the progress of the upload or download process.\nNo built-in support for timeouts: Although you can cancel a request using AbortController, Fetch doesn’t have built-in timeout functionality like XMLHttpRequest.\nError handling: Fetch only rejects a promise for network errors. It does not reject HTTP error statuses like 404 or 500; you have to manually handle them.\n\n\n\nUse Cases:\n\nFetching Data from APIs: Fetch is widely used to retrieve data from APIs, especially RESTful services returning JSON data.\nSubmitting Forms: Can be used to submit form data asynchronously without reloading the page.\nFile Downloads: Fetch can download binary data like images and PDFs using the Blob format.\nCanceling Requests: Using AbortController, you can abort long-running or unnecessary requests.\n\n\n\nExample of Full Implementation:\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nfetchData();\n\n\nConclusion:\nThe Fetch API is a modern, powerful way to make network requests in JavaScript. It simplifies many common tasks such as making HTTP requests, handling responses, and error management, all while using a cleaner and more readable promise-based syntax. It is supported by most modern browsers and has become the go-to for web developers when working with APIs and web servers.\nFor more details, you can visit the official documentation: - MDN Web Docs: Fetch API\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Javascript",
      "Fetch API"
    ]
  },
  {
    "objectID": "React/react_overview.html#what-is-react",
    "href": "React/react_overview.html#what-is-react",
    "title": "React Overview",
    "section": "🧠 1. What Is React?",
    "text": "🧠 1. What Is React?\nReact is a JavaScript library for building user interfaces, developed and maintained by Meta (Facebook).\n\nDeclarative: Describe UI state, and React takes care of the DOM.\nComponent-Based: Build encapsulated components.\nUnidirectional Data Flow: State flows down, actions bubble up.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#core-concepts",
    "href": "React/react_overview.html#core-concepts",
    "title": "React Overview",
    "section": "🚀 2. Core Concepts",
    "text": "🚀 2. Core Concepts\n\n\n\n\n\n\n\nConcept\nDescription\n\n\n\n\nJSX\nSyntax extension that looks like HTML in JavaScript.\n\n\nComponents\nReusable UI elements (Function or Class-based).\n\n\nProps\nRead-only data passed to components.\n\n\nState\nLocal data within a component.\n\n\nHooks\nFunctions that let you use state, side effects, etc. in functional components.\n\n\nVirtual DOM\nA lightweight copy of the actual DOM for efficient updates.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#essential-react-hooks",
    "href": "React/react_overview.html#essential-react-hooks",
    "title": "React Overview",
    "section": "🔁 3. Essential React Hooks",
    "text": "🔁 3. Essential React Hooks\n\n\n\n\n\n\n\nHook\nPurpose\n\n\n\n\nuseState\nAdd local state to components.\n\n\nuseEffect\nHandle side effects (API calls, event listeners).\n\n\nuseContext\nGlobal state using React Context API.\n\n\nuseRef\nPersistent reference to a DOM element or value.\n\n\nuseMemo / useCallback\nOptimize performance with memoization.\n\n\nuseReducer\nAlternative to useState for complex state logic.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#react-ecosystem",
    "href": "React/react_overview.html#react-ecosystem",
    "title": "React Overview",
    "section": "📦 4. React Ecosystem",
    "text": "📦 4. React Ecosystem\n\n\n\n\n\n\n\nTool\nUse Case\n\n\n\n\nReact Router\nDeclarative routing (react-router-dom).\n\n\nRedux / Zustand / Recoil\nGlobal state management.\n\n\nNext.js\nFramework for SSR, SSG, and API routes.\n\n\nVite / Webpack\nBuild tools and bundlers.\n\n\nReact Query / SWR\nData fetching, caching, syncing.\n\n\nTailwind CSS / Emotion / Styled-Components\nStyling approaches.\n\n\nFormik / React Hook Form\nForms and validation.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#modern-workflow-setup",
    "href": "React/react_overview.html#modern-workflow-setup",
    "title": "React Overview",
    "section": "⚙️ 5. Modern Workflow Setup",
    "text": "⚙️ 5. Modern Workflow Setup\n# Recommended Dev Setup\nnpm create vite@latest my-app -- --template react\ncd my-app\nnpm install\nnpm run dev\nUse:\n\nESLint + Prettier for linting/formatting.\nTypeScript for static typing.\nJest / React Testing Library for testing.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#advanced-concepts",
    "href": "React/react_overview.html#advanced-concepts",
    "title": "React Overview",
    "section": "🧩 6. Advanced Concepts",
    "text": "🧩 6. Advanced Concepts\n\n\n\n\n\n\n\nConcept\nDescription\n\n\n\n\nCustom Hooks\nEncapsulate logic that uses built-in hooks.\n\n\nPortals\nRender elements outside the component hierarchy.\n\n\nError Boundaries\nCatch rendering errors in class components.\n\n\nCode Splitting\nLazy load components (React.lazy, Suspense).\n\n\nConcurrent Mode\nOptimize responsiveness with new rendering methods (partial support).",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#design-patterns",
    "href": "React/react_overview.html#design-patterns",
    "title": "React Overview",
    "section": "🧠 7. Design Patterns",
    "text": "🧠 7. Design Patterns\n\n\n\n\n\n\n\nPattern\nDescription\n\n\n\n\nContainer/Presentational\nSeparate logic and UI.\n\n\nCompound Components\nComponents that share state implicitly.\n\n\nRender Props / HOCs\nFlexible code reuse (less common in favor of hooks).\n\n\nControlled vs Uncontrolled Inputs\nForms behavior strategy.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#security-performance",
    "href": "React/react_overview.html#security-performance",
    "title": "React Overview",
    "section": "🔒 8. Security & Performance",
    "text": "🔒 8. Security & Performance\n\n\n\n\n\n\n\nTopic\nPractice\n\n\n\n\nAvoid XSS\nEscape user-generated HTML. Use dangerouslySetInnerHTML with caution.\n\n\nMemoization\nUse React.memo, useMemo, useCallback for expensive renders.\n\n\nTree Shaking\nImport only what you use.\n\n\nLazy Loading\nLoad components or routes only when needed.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#react-data-visualization-dashboards",
    "href": "React/react_overview.html#react-data-visualization-dashboards",
    "title": "React Overview",
    "section": "📊 9. React + Data Visualization / Dashboards",
    "text": "📊 9. React + Data Visualization / Dashboards\n\n\n\n\n\n\n\nTool\nPurpose\n\n\n\n\nPlotly.js / Recharts / Victory\nRender interactive charts.\n\n\nD3.js\nFull control over SVG + data transforms (more complex).\n\n\nZustand + React Query\nManage state + server data in dashboards.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#testing-react",
    "href": "React/react_overview.html#testing-react",
    "title": "React Overview",
    "section": "🧪 10. Testing React",
    "text": "🧪 10. Testing React\n\n\n\n\n\n\n\nTool\nUse Case\n\n\n\n\nJest\nTest runner and assertion library.\n\n\nReact Testing Library\nFocus on testing user behavior, not implementation.\n\n\nCypress / Playwright\nE2E browser testing.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#deployment",
    "href": "React/react_overview.html#deployment",
    "title": "React Overview",
    "section": "🌐 11. Deployment",
    "text": "🌐 11. Deployment\n\n\n\nPlatform\nNote\n\n\n\n\nVercel\nBest for Next.js; seamless CI/CD.\n\n\nNetlify\nEasy for React/Vite apps.\n\n\nAWS / GCP / Azure\nMore control, more config.\n\n\nDocker\nFor custom deployments.",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#learning-roadmap",
    "href": "React/react_overview.html#learning-roadmap",
    "title": "React Overview",
    "section": "📈 12. Learning Roadmap",
    "text": "📈 12. Learning Roadmap\n\nBeginner\n\nJSX, Props, State\nFunctional Components\nBasic Hooks\n\n\n\nIntermediate\n\nReact Router\nState Management (Context or Redux)\nForm Handling\nSide Effects (API calls)\n\n\n\nAdvanced\n\nCustom Hooks\nMemoization\nCode Splitting\nTesting & CI\nSSR with Next.js\nAccessibility & SEO",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_overview.html#resources",
    "href": "React/react_overview.html#resources",
    "title": "React Overview",
    "section": "📚 13. Resources",
    "text": "📚 13. Resources\n\n\n\nType\nLink\n\n\n\n\nOfficial Docs\nhttps://react.dev\n\n\nNext.js Docs\nhttps://nextjs.org/learn\n\n\nEpic React by Kent C. Dodds\nhttps://epicreact.dev\n\n\nUI Libraries\nRadix, shadcn/ui, MUI\n\n\nComponent Tools\nStorybook, Bit.dev",
    "crumbs": [
      "Blog",
      "React",
      "React Overview"
    ]
  },
  {
    "objectID": "React/react_setup.html#quick-setup-vite-react-typescript",
    "href": "React/react_setup.html#quick-setup-vite-react-typescript",
    "title": "React Setup",
    "section": "🚀 1. Quick Setup (Vite + React + TypeScript)",
    "text": "🚀 1. Quick Setup (Vite + React + TypeScript)\n\n📦 Installation\n# Create project\nnpm create vite@latest my-app -- --template react-ts\n\n# Move into project\ncd my-app\n\n# Install dependencies\nnpm install\n\n# Start dev server\nnpm run dev",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#project-structure-explained",
    "href": "React/react_setup.html#project-structure-explained",
    "title": "React Setup",
    "section": "🗂️ 2. Project Structure Explained",
    "text": "🗂️ 2. Project Structure Explained\nmy-app/\n├── public/               # Static assets (favicon, robots.txt)\n│   └── vite.svg\n├── src/                  # All source code lives here\n│   ├── assets/           # Images, fonts, etc.\n│   ├── components/       # Reusable UI components\n│   │   └── Button.tsx\n│   ├── pages/            # Pages for routes (e.g., Home, About)\n│   │   └── Home.tsx\n│   ├── hooks/            # Custom React hooks\n│   ├── styles/           # Global styles (e.g., Tailwind, CSS Modules)\n│   ├── App.tsx           # Root component\n│   ├── main.tsx          # Entry point (ReactDOM.render)\n│   └── types/            # Shared TypeScript types\n├── .eslintrc.cjs         # Linting rules\n├── index.html            # HTML template\n├── package.json          # Project config and dependencies\n├── tsconfig.json         # TypeScript configuration\n└── vite.config.ts        # Vite config",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#core-files-concepts",
    "href": "React/react_setup.html#core-files-concepts",
    "title": "React Setup",
    "section": "💡 3. Core Files & Concepts",
    "text": "💡 3. Core Files & Concepts\n\nmain.tsx — Entry Point\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/global.css'; // if using global styles\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;\n);\n\n\nApp.tsx — Root Component\nimport React from 'react';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;Welcome to React&lt;/h1&gt;\n      &lt;Home /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#component-example",
    "href": "React/react_setup.html#component-example",
    "title": "React Setup",
    "section": "🧩 4. Component Example",
    "text": "🧩 4. Component Example\n\ncomponents/Button.tsx\nimport React from 'react';\n\ntype Props = {\n  label: string;\n  onClick: () =&gt; void;\n};\n\nconst Button: React.FC&lt;Props&gt; = ({ label, onClick }) =&gt; (\n  &lt;button onClick={onClick} className=\"btn\"&gt;\n    {label}\n  &lt;/button&gt;\n);\n\nexport default Button;",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#routing-setup-with-react-router-dom",
    "href": "React/react_setup.html#routing-setup-with-react-router-dom",
    "title": "React Setup",
    "section": "🌐 5. Routing Setup (with react-router-dom)",
    "text": "🌐 5. Routing Setup (with react-router-dom)\n\n📦 Install\nnpm install react-router-dom\n\n\n🛠️ Setup\n\nmain.tsx\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;\n);\n\n\nApp.tsx\nimport { Routes, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport About from './pages/About';\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n    &lt;/Routes&gt;\n  );\n}",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#custom-hook-example",
    "href": "React/react_setup.html#custom-hook-example",
    "title": "React Setup",
    "section": "🎣 6. Custom Hook Example",
    "text": "🎣 6. Custom Hook Example\n\nhooks/useCounter.ts\nimport { useState } from 'react';\n\nexport function useCounter(initial = 0) {\n  const [count, setCount] = useState(initial);\n  const increment = () =&gt; setCount((c) =&gt; c + 1);\n  const decrement = () =&gt; setCount((c) =&gt; c - 1);\n  return { count, increment, decrement };\n}",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#testing-setup",
    "href": "React/react_setup.html#testing-setup",
    "title": "React Setup",
    "section": "🧪 7. Testing Setup",
    "text": "🧪 7. Testing Setup\n\n📦 Install\nnpm install --save-dev vitest @testing-library/react @testing-library/jest-dom\n\n\nButton.test.tsx\nimport { render, screen } from '@testing-library/react';\nimport Button from './Button';\n\ntest('renders button with label', () =&gt; {\n  render(&lt;Button label=\"Click me\" onClick={() =&gt; {}} /&gt;);\n  expect(screen.getByText('Click me')).toBeInTheDocument();\n});",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#linting-formatting",
    "href": "React/react_setup.html#linting-formatting",
    "title": "React Setup",
    "section": "🧼 8. Linting + Formatting",
    "text": "🧼 8. Linting + Formatting\n\n📦 Install\nnpm install -D eslint prettier eslint-plugin-react eslint-config-prettier\n\n\n.eslintrc.cjs\nmodule.exports = {\n  extends: ['react-app', 'plugin:react/recommended', 'prettier'],\n};",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#styling-options",
    "href": "React/react_setup.html#styling-options",
    "title": "React Setup",
    "section": "🎨 9. Styling Options",
    "text": "🎨 9. Styling Options\n\n\n\nApproach\nTools\n\n\n\n\nUtility-first CSS\nTailwind CSS\n\n\nComponent-scoped\nCSS Modules / Styled-components\n\n\nGlobal CSS\nPlain CSS / SCSS\n\n\n\n# Tailwind example setup\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "React/react_setup.html#helpful-commands",
    "href": "React/react_setup.html#helpful-commands",
    "title": "React Setup",
    "section": "📦 10. Helpful Commands",
    "text": "📦 10. Helpful Commands\n\n\n\nTask\nCommand\n\n\n\n\nStart dev server\nnpm run dev\n\n\nBuild for prod\nnpm run build\n\n\nPreview build\nnpm run preview\n\n\nRun tests\nnpx vitest or npm run test\n\n\nFormat code\nnpx prettier --write .",
    "crumbs": [
      "Blog",
      "React",
      "React Setup"
    ]
  },
  {
    "objectID": "grafana.html",
    "href": "grafana.html",
    "title": "Grafana",
    "section": "",
    "text": "sudo apt-get install -y adduser libfontconfig1 musl\nwget https://dl.grafana.com/enterprise/release/grafana-enterprise_10.2.0_amd64.deb\nsudo dpkg -i grafana-enterprise_10.2.0_amd64.deb",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "grafana.html#installation",
    "href": "grafana.html#installation",
    "title": "Grafana",
    "section": "",
    "text": "sudo apt-get install -y adduser libfontconfig1 musl\nwget https://dl.grafana.com/enterprise/release/grafana-enterprise_10.2.0_amd64.deb\nsudo dpkg -i grafana-enterprise_10.2.0_amd64.deb",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "grafana.html#to-start-grafana-server",
    "href": "grafana.html#to-start-grafana-server",
    "title": "Grafana",
    "section": "To Start Grafana Server",
    "text": "To Start Grafana Server\nsudo systemctl start grafana-server",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "grafana.html#to-get-grafana-server-status",
    "href": "grafana.html#to-get-grafana-server-status",
    "title": "Grafana",
    "section": "To get Grafana Server status",
    "text": "To get Grafana Server status\nsudo systemctl status grafana-server",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "grafana.html#to-stop-grafana-server",
    "href": "grafana.html#to-stop-grafana-server",
    "title": "Grafana",
    "section": "To Stop Grafana server",
    "text": "To Stop Grafana server\nsudo systemctl stop grafana-server",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "grafana.html#localhost-port",
    "href": "grafana.html#localhost-port",
    "title": "Grafana",
    "section": "LocalHost Port",
    "text": "LocalHost Port\nhttp://localhost:3000",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "grafana.html#first-login",
    "href": "grafana.html#first-login",
    "title": "Grafana",
    "section": "First Login",
    "text": "First Login\nuser: admin\npass: admin\n\ntoken = 'b4bTbQgLdRCvoBZQSjaRlUh8lnslIflVDFet6VeToen4GWu-MYwHilUddyWZorKPFCSFiu1KLNSvptXcHVDzPg=='",
    "crumbs": [
      "Blog",
      "Grafana"
    ]
  },
  {
    "objectID": "markdown.html",
    "href": "markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "**This is bold text**\n__This is bold text__\nThis is bold text\n\n\n\n*This is italic text*\n_This is italic text_\nThis is italic text\n\n\n\n***This is bold and italic***\n___This is bold and italic___\nThis is bold and italic\n\n\n\n~~This text is struck through~~\nThis text is struck through",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#basic-text-formatting",
    "href": "markdown.html#basic-text-formatting",
    "title": "Markdown",
    "section": "",
    "text": "**This is bold text**\n__This is bold text__\nThis is bold text\n\n\n\n*This is italic text*\n_This is italic text_\nThis is italic text\n\n\n\n***This is bold and italic***\n___This is bold and italic___\nThis is bold and italic\n\n\n\n~~This text is struck through~~\nThis text is struck through",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#headings",
    "href": "markdown.html#headings",
    "title": "Markdown",
    "section": "2. Headings",
    "text": "2. Headings\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#lists",
    "href": "markdown.html#lists",
    "title": "Markdown",
    "section": "3. Lists",
    "text": "3. Lists\n\nOrdered List\n1. First item\n2. Second item\n   1. Sub-item\n   2. Sub-item\n3. Third item\n\nFirst item\n\nSecond item\n\nSub-item\n\nSub-item\n\n\nThird item\n\n\n\nUnordered List\n- First item\n- Second item\n  - Sub-item\n  - Sub-item\n- Third item\n\nFirst item\n\nSecond item\n\nSub-item\n\nSub-item\n\n\nThird item",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#links",
    "href": "markdown.html#links",
    "title": "Markdown",
    "section": "4. Links",
    "text": "4. Links\n[Clickable text](https://example.com)\nClickable text\n\nReference-style Links\n[Clickable text][1]\n\n[1]: https://example.com",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#images",
    "href": "markdown.html#images",
    "title": "Markdown",
    "section": "5. Images",
    "text": "5. Images\n![Alt text](https://example.com/image.png)\n\n\n\nAlt text",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#code",
    "href": "markdown.html#code",
    "title": "Markdown",
    "section": "6. Code",
    "text": "6. Code\n\nInline Code\n`Inline code`\nInline code\n\n\nCode Block\n\nCode block\n\nFor specific languages:\n\\```python\nprint(\"Hello, World!\")\n\\```",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#blockquotes",
    "href": "markdown.html#blockquotes",
    "title": "Markdown",
    "section": "7. Blockquotes",
    "text": "7. Blockquotes\n&gt; This is a blockquote\n&gt;&gt; Nested blockquote\n\nThis is a blockquote\n&gt; Nested blockquote",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#tables",
    "href": "markdown.html#tables",
    "title": "Markdown",
    "section": "9. Tables",
    "text": "9. Tables\n| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| Value 1  | Value 2  | Value 3  |\n| Value A  | Value B  | Value C  |\n\n\n\nColumn 1\nColumn 2\nColumn 3\n\n\n\n\nValue 1\nValue 2\nValue 3\n\n\nValue A\nValue B\nValue C\n\n\n\n\n\n\nTable 1: Main Caption\n\n\n\n\n\n\n\n(a) First Table\n\n\n\n\n\nCol1\nCol2\nCol3\n\n\n\n\nA\nB\nC\n\n\nE\nF\nG\n\n\nA\nG\nG\n\n\n\n\n\n\n\n\n\n\n\n(b) Second Table\n\n\n\n\n\nCol1\nCol2\nCol3\n\n\n\n\nA\nB\nC\n\n\nE\nF\nG\n\n\nA\nG\nG",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#task-lists",
    "href": "markdown.html#task-lists",
    "title": "Markdown",
    "section": "10. Task Lists",
    "text": "10. Task Lists\n- [x] Completed task\n- [ ] Incomplete task\n\nCompleted task\n\nIncomplete task",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#escaping-characters",
    "href": "markdown.html#escaping-characters",
    "title": "Markdown",
    "section": "11. Escaping Characters",
    "text": "11. Escaping Characters\nTo include Markdown characters as literal text, use a backslash (\\):\n\\*Literal asterisk\\*\n*Literal asterisk*",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#advanced-syntax",
    "href": "markdown.html#advanced-syntax",
    "title": "Markdown",
    "section": "12. Advanced Syntax",
    "text": "12. Advanced Syntax\n\nFootnotes\nThis is a sentence with a footnote.[^1]\n\n[^1]: This is the footnote text.\nThis is a sentence with a footnote.1\n\n\nDefinition Lists\nTerm 1\n: Definition 1\n\nTerm 2\n: Definition 2\n\nTerm 1\n\nDefinition 1\n\nTerm 2\n\nDefinition 2",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#html-in-markdown",
    "href": "markdown.html#html-in-markdown",
    "title": "Markdown",
    "section": "13. HTML in Markdown",
    "text": "13. HTML in Markdown\nYou can include raw HTML for additional formatting:\n&lt;div style=\"color: blue;\"&gt;This text is blue&lt;/div&gt;\n\nThis text is blue",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#extensions",
    "href": "markdown.html#extensions",
    "title": "Markdown",
    "section": "14. Extensions",
    "text": "14. Extensions\nMany Markdown processors support extended syntax: - Math (e.g., LaTeX): markdown   $$E = mc^2$$ (E = mc^2)\n\nMermaid Diagrams:\n```mermaid\ngraph TD;\n    A--&gt;B;\n```",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#diagrams",
    "href": "markdown.html#diagrams",
    "title": "Markdown",
    "section": "15. Diagrams",
    "text": "15. Diagrams\n\n\n\n\n\n\n\n\n\n\nA\n\nA\n\n\n\nB\n\nB\n\n\n\nA-&gt;B\n\n\n\n\n\nC\n\nC\n\n\n\nA-&gt;C\n\n\n\n\n\nD\n\nD\n\n\n\nB-&gt;D\n\n\n\n\n\nC-&gt;D\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#callouts",
    "href": "markdown.html#callouts",
    "title": "Markdown",
    "section": "16. Callouts",
    "text": "16. Callouts\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\n\n\n\n\n\n\nTip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default.",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#shortcuts-and-tricks",
    "href": "markdown.html#shortcuts-and-tricks",
    "title": "Markdown",
    "section": "Shortcuts and Tricks",
    "text": "Shortcuts and Tricks\n\nCommand Mode Shortcuts\nThere are a couple of useful keyboard shortcuts in Command Mode that you can leverage to make Jupyter Notebook faster to use. Remember that you can switch back and forth between Command Mode and Edit Mode with Esc and Enter.\n\nm:: Convert cell to Markdown\ny:: Convert cell to Code\nd+d:: Delete cell\no:: Toggle between hide or show output\nShift+Arrow up/Arrow down:: Select multiple cells. Once you have selected them you can operate on them like a batch (run, copy, paste etc).\nShift+M:: Merge selected cells\n\n\n\nCell Tricks\nThere are also some tricks that you can code into a cell:\n\n?function-name:: Shows the definition and docstring for that function\n??function-name:: Shows the source code for that function\ndoc(function-name):: Shows the definition, docstring and links to the documentation of the function (only works with fastai library imported)\nShift+Tab (press once):: See which parameters to pass to a function\nShift+Tab (press three times):: Get additional information on the method\n\nHere’s an example of using ? to learn about Python’s print() function:",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "markdown.html#footnotes",
    "href": "markdown.html#footnotes",
    "title": "Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is the footnote text.↩︎",
    "crumbs": [
      "Blog",
      "Markdown"
    ]
  },
  {
    "objectID": "npm.html",
    "href": "npm.html",
    "title": "npm",
    "section": "",
    "text": "Definition: npm is a command-line tool and an online repository for managing JavaScript packages.\nPurpose:\n\nInstall, manage, and share JavaScript libraries and frameworks.\nManage dependencies for JavaScript projects.\nPublish and share your own packages.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#what-is-npm",
    "href": "npm.html#what-is-npm",
    "title": "npm",
    "section": "",
    "text": "Definition: npm is a command-line tool and an online repository for managing JavaScript packages.\nPurpose:\n\nInstall, manage, and share JavaScript libraries and frameworks.\nManage dependencies for JavaScript projects.\nPublish and share your own packages.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#key-features-of-npm",
    "href": "npm.html#key-features-of-npm",
    "title": "npm",
    "section": "2. Key Features of npm",
    "text": "2. Key Features of npm\n\nPackage Management:\n\nInstall and manage third-party libraries for your project.\nSpecify project dependencies in package.json.\n\nVersion Control:\n\nManage package versions using semantic versioning (SemVer).\n\nScript Automation:\n\nUse npm scripts to automate tasks like testing, building, or running applications.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#installing-npm",
    "href": "npm.html#installing-npm",
    "title": "npm",
    "section": "3. Installing npm",
    "text": "3. Installing npm\nnpm is bundled with Node.js, so installing Node.js will automatically install npm.\n\nInstall Node.js (and npm):\n\nWindows/Mac: Download from Node.js official site.\nLinux: Use a package manager like nvm (Node Version Manager).\nsudo apt install npm\n\nVerify installation:\nnode -v   # Check Node.js version\nnpm -v    # Check npm version",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#key-npm-commands",
    "href": "npm.html#key-npm-commands",
    "title": "npm",
    "section": "4. Key npm Commands",
    "text": "4. Key npm Commands\n\na. Installing Packages\n\nLocal Installation (for a specific project):\nnpm install package-name\n\nInstalls the package in the node_modules directory.\nUpdates dependencies in package.json.\n\n\n\nGlobal Installation (for CLI tools):\nnpm install -g package-name\n\nInstalls the package globally, making it available system-wide.\n\n\n\nInstalling Specific Versions:\nnpm install package-name@version\n\n\nDevelopment Dependencies:\nnpm install package-name --save-dev\n\nAdds the package under devDependencies in package.json.\n\n\n\n\n\nb. Removing Packages\nnpm uninstall package-name\n\nRemoves the package from node_modules and package.json.\n\n\n\n\nc. Listing Installed Packages\nnpm list       # Lists locally installed packages\nnpm list -g    # Lists globally installed packages\n\n\n\nd. Initializing a New Project\nnpm init       # Interactive setup\nnpm init -y    # Automatically generate a `package.json` with defaults\n\n\n\ne. Updating Packages\nUpdate all dependencies to their latest compatible versions:\nnpm update\nUpdate a specific package:\nnpm install package-name@latest\nTo upgrade all packages to their latest versions:\nnpx npm-check-updates -u\nnpm install\n\n\n\nf. Running npm Scripts\nScripts defined in package.json can be run using:\nnpm run script-name\nExample:\n\"scripts\": {\n  \"start\": \"node app.js\",\n  \"build\": \"webpack --config webpack.config.js\",\n  \"test\": \"jest\"\n}\nRun the start script:\nnpm start",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#understanding-package.json",
    "href": "npm.html#understanding-package.json",
    "title": "npm",
    "section": "5. Understanding package.json",
    "text": "5. Understanding package.json\npackage.json is a metadata file that describes your project and its dependencies.\n\nKey Fields:\n\nname: Project name.\nversion: Current version of the project.\ndependencies: Lists runtime dependencies.\ndevDependencies: Lists development-only dependencies.\nscripts: Defines npm scripts for automating tasks.\n\nExample:\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^27.0.6\"\n  }\n}",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#npm-cache",
    "href": "npm.html#npm-cache",
    "title": "npm",
    "section": "6. npm Cache",
    "text": "6. npm Cache\nnpm uses a cache to store downloaded packages for faster re-installation.\n\nClear the cache:\n\nnpm cache clean --force",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#versioning-in-npm",
    "href": "npm.html#versioning-in-npm",
    "title": "npm",
    "section": "7. Versioning in npm",
    "text": "7. Versioning in npm\nnpm uses Semantic Versioning (SemVer): - ^1.2.3: Allows updates that do not change the major version (e.g., 1.x.x). - ~1.2.3: Allows updates that do not change the minor version (e.g., 1.2.x). - 1.2.3: Installs the exact version.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#using-.npmrc",
    "href": "npm.html#using-.npmrc",
    "title": "npm",
    "section": "8. Using .npmrc",
    "text": "8. Using .npmrc\nCustomize npm behavior with the .npmrc file: - Set a registry: bash   registry=https://registry.npmjs.org/ - Use a proxy: bash   proxy=http://proxy.example.com:8080",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#npm-registry",
    "href": "npm.html#npm-registry",
    "title": "npm",
    "section": "9. npm Registry",
    "text": "9. npm Registry\nThe npm registry is a public database of JavaScript packages.\n\nBrowse packages on npmjs.com.\nPublish your own package:\nnpm publish",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#common-issues-and-fixes",
    "href": "npm.html#common-issues-and-fixes",
    "title": "npm",
    "section": "10. Common Issues and Fixes",
    "text": "10. Common Issues and Fixes\n\na. Permission Errors\nUse nvm to manage Node.js versions and avoid using sudo with npm:\nnvm use stable\n\n\nb. Outdated npm\nUpdate npm to the latest version:\nnpm install -g npm",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#best-practices",
    "href": "npm.html#best-practices",
    "title": "npm",
    "section": "11. Best Practices",
    "text": "11. Best Practices\n\nUse package-lock.json:\n\nEnsures consistent dependency versions across environments.\n\nUse .gitignore:\n\nExclude node_modules from version control.\n\nUse Semantic Versioning:\n\nMaintain backward compatibility with ^ or ~.\n\nAutomate with Scripts:\n\nSimplify tasks like builds and testing with npm scripts.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#ecosystem",
    "href": "npm.html#ecosystem",
    "title": "npm",
    "section": "12. Ecosystem",
    "text": "12. Ecosystem\n\nPopular npm Libraries:\n\nexpress: Web framework.\nreact: Front-end library.\nlodash: Utility functions.\naxios: HTTP client.\njest: Testing framework.\n\nBuild Tools:\n\nwebpack: Asset bundler.\nparcel: Zero-config bundler.\nvite: Modern build tool.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "npm.html#alternatives-to-npm",
    "href": "npm.html#alternatives-to-npm",
    "title": "npm",
    "section": "13. Alternatives to npm",
    "text": "13. Alternatives to npm\n\nYarn: A faster, more secure package manager.\npnpm: Focuses on performance and efficient storage.",
    "crumbs": [
      "Blog",
      "npm"
    ]
  },
  {
    "objectID": "html.html",
    "href": "html.html",
    "title": "HTML",
    "section": "",
    "text": "Doctype Declaration: At the top of every HTML document, you declare the document type with &lt;!DOCTYPE html&gt;. This tells the browser that the page is written in HTML5.\nHTML Tag (&lt;html&gt;): The root element that contains all other elements.\nHead Section (&lt;head&gt;): Contains meta-information about the document, like the title (&lt;title&gt;), character set (&lt;meta charset=\"UTF-8\"&gt;), and links to CSS or JavaScript files.\nBody Section (&lt;body&gt;): Contains the content of the web page, such as text, images, links, and other media.\n\n\nBasic Example\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph of text.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#basic-structure-of-html",
    "href": "html.html#basic-structure-of-html",
    "title": "HTML",
    "section": "",
    "text": "Doctype Declaration: At the top of every HTML document, you declare the document type with &lt;!DOCTYPE html&gt;. This tells the browser that the page is written in HTML5.\nHTML Tag (&lt;html&gt;): The root element that contains all other elements.\nHead Section (&lt;head&gt;): Contains meta-information about the document, like the title (&lt;title&gt;), character set (&lt;meta charset=\"UTF-8\"&gt;), and links to CSS or JavaScript files.\nBody Section (&lt;body&gt;): Contains the content of the web page, such as text, images, links, and other media.\n\n\nBasic Example\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph of text.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#html-tags-and-elements",
    "href": "html.html#html-tags-and-elements",
    "title": "HTML",
    "section": "HTML Tags and Elements",
    "text": "HTML Tags and Elements\n\nTags: Keywords enclosed in angle brackets (e.g., &lt;tagname&gt;). Tags usually come in pairs with an opening tag (&lt;tag&gt;) and a closing tag (&lt;/tag&gt;), though some tags are self-closing (e.g., &lt;img /&gt;).\nElements: The complete structure from the opening tag to the closing tag, including the content between them (e.g., &lt;p&gt;This is a paragraph.&lt;/p&gt;).",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#common-html-tags",
    "href": "html.html#common-html-tags",
    "title": "HTML",
    "section": "Common HTML Tags",
    "text": "Common HTML Tags\n\nHeadings: &lt;h1&gt; to &lt;h6&gt; tags, where &lt;h1&gt; is the highest level and &lt;h6&gt; is the lowest.\nParagraphs: &lt;p&gt; tag for text blocks.\nLinks: &lt;a href=\"URL\"&gt;Link Text&lt;/a&gt; for creating hyperlinks.\nImages: &lt;img src=\"image.jpg\" alt=\"Description\"&gt; for embedding images.\nLists:\n\nUnordered: &lt;ul&gt; with &lt;li&gt; for each list item.\nOrdered: &lt;ol&gt; with &lt;li&gt; for each list item.\n\nTables: &lt;table&gt; containing &lt;tr&gt; (table rows), &lt;th&gt; (table headers), and &lt;td&gt; (table data).\nForms: &lt;form&gt; for creating user input fields, with various input types like &lt;input&gt;, &lt;textarea&gt;, and &lt;select&gt;.\n\n\nExamples:\n\nHeading\n\nqsdfasdfadf\n\n\n\nLink Google Link\n\n\nOrdered List\n\n\nq\n\n\nw\n\n\n\ne\n\n\nr\n\n\n\n\nUnordered List\n\n\nasdf\n\n\nvrewea\n\n\n\nasdf\n\n\n\n\n\n\nTable\nTable Attributes: - border: Specifies the width of the border around the table and cells. - cellpadding: Defines the space between the cell content and the cell borders. - cellspacing: Defines the space between individual table cells. - width and height: Define the dimensions of the table or cells. - align: Aligns the table on the page (left, center, right). - bgcolor: Sets the background color of the table or cells (deprecated in favor of CSS).\n\nExample\n\n\n\n\nMain Title\n\n\n\n\nStudent Name\n\n\nSubject\n\n\nGrade\n\n\n\n\n\n\nJohn Doe\n\n\nMathematics\n\n\nA\n\n\n\n\nJane Smith\n\n\nScience\n\n\nB+\n\n\n\n\nEmily Johnson\n\n\nHistory\n\n\nA-\n\n\n\n\n\n\n\n\n\nMain Title\n\n\n\n\nStudent Name\n\n\nSubject\n\n\nGrade\n\n\n\n\n\n\nJohn Doe\n\n\nMathematics\n\n\nA\n\n\n\n\nJane Smith\n\n\nScience\n\n\nB+\n\n\n\n\nEmily Johnson\n\n\nHistory\n\n\nA-",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#attributes",
    "href": "html.html#attributes",
    "title": "HTML",
    "section": "Attributes",
    "text": "Attributes\n\nGlobal Attributes: Common to all elements, like id, class, style, and title.\nSpecific Attributes: Relevant to particular tags, like href for &lt;a&gt;, src for &lt;img&gt;, and action for &lt;form&gt;\n\n\nExample\n\n&lt;a href=\"https://www.example.com\" title=\"Example Website\"&gt;Visit Example&lt;/a&gt;",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#semantic-html",
    "href": "html.html#semantic-html",
    "title": "HTML",
    "section": "Semantic HTML",
    "text": "Semantic HTML\n\nPurpose: To provide meaning to web content, helping both browsers and developers understand the structure of the web page.\n\n\nExamples: - &lt;header&gt; for page headers. - &lt;nav&gt; for navigation links. - &lt;article&gt; for self-contained content. - &lt;section&gt; for distinct sections of content. - &lt;footer&gt; for page footers.",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#html-forms",
    "href": "html.html#html-forms",
    "title": "HTML",
    "section": "HTML Forms",
    "text": "HTML Forms\n\nUsed for collecting user input.\n\nCommon elements include: - &lt;input&gt; for single-line text fields, checkboxes, radio buttons, etc. - &lt;textarea&gt; for multi-line text input. - &lt;button&gt; for clickable buttons. - &lt;select&gt; for dropdown lists.\n\nExample:\n\n&lt;form action=\"WEB_doc/Front_end/html.html\" method=\"POST\"&gt;\n  &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\nName:  Submit\n\n\n\n\nRegistration Form\n\n\n\nPersonal Information First Name:  Last Name:  Email:  Phone Number: \n\n\n\nAccount Information Username:  Password:  Confirm Password: \n\n\n\nPreferences Preferred Contact Method:  Email  Phone Subscribe to our newsletter:  Yes, sign me up! Country:  United States Canada United Kingdom Australia \n\n\n\nProfile Picture Upload a profile picture: \n\n\n\n\nRegister\n\n\nReset",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#html5-new-features",
    "href": "html.html#html5-new-features",
    "title": "HTML",
    "section": "HTML5 New Features",
    "text": "HTML5 New Features\n\nNew Elements: &lt;article&gt;, &lt;aside&gt;, &lt;figure&gt;, &lt;figcaption&gt;, &lt;footer&gt;, &lt;header&gt;, &lt;nav&gt;, &lt;section&gt;, &lt;main&gt;, etc.\nAudio and Video: &lt;audio nd &lt;video&gt; tags allow embedding multimedia without third-party plugins.\nCanvas and SVG: &lt;canvas&gt; for drawing graphics on the fly, &lt;svg&gt; for scalable vector graphics.\nLocal Storage: localStorage and sessionStorage for storing data on the client-side.\nGeolocation API: For accessing the user’s location.\nForms Enhancements: New input types like date, email, range, search, tel, url, and more.",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "html.html#accessibility-in-html",
    "href": "html.html#accessibility-in-html",
    "title": "HTML",
    "section": "Accessibility in HTML",
    "text": "Accessibility in HTML\n\nARIA (Accessible Rich Internet Applications): Attributes like aria-label, aria-hidden, etc., to improve accessibility.\nAlt Text: The alt attribute in images provides text descriptions for screen readers.\nSemantic Elements: Using proper tags like &lt;nav&gt;, &lt;header&gt;, etc., for better navigation for assistive technologies.\n\n\nfrom IPython.display import SVG, display\n\ndisplay(SVG(\"\"\"\n&lt;svg width=\"200\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;circle cx=\"100\" cy=\"100\" r=\"80\" fill=\"lightblue\" stroke=\"navy\" stroke-width=\"4\"/&gt;\n  &lt;text x=\"100\" y=\"110\" font-size=\"24\" text-anchor=\"middle\" fill=\"black\"&gt;\n    Hello SVG\n  &lt;/text&gt;\n&lt;/svg&gt;\n\"\"\"))",
    "crumbs": [
      "Blog",
      "HTML"
    ]
  },
  {
    "objectID": "3_plotly_dash.html",
    "href": "3_plotly_dash.html",
    "title": "Plotly Dash",
    "section": "",
    "text": "No Frontend Experience Required: Create web applications with just Python.\nHigh-Quality Visualizations: Built on Plotly.js, which is known for its publication-quality visualizations.\nInteractive Dashboards: Easily add complex interactions and live updates.\nFull Customization: Use HTML, CSS, and JavaScript for extensive customization.\nEnterprise Ready: Scalable from simple prototypes to large enterprise applications.",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#why-use-plotly-dash",
    "href": "3_plotly_dash.html#why-use-plotly-dash",
    "title": "Plotly Dash",
    "section": "",
    "text": "No Frontend Experience Required: Create web applications with just Python.\nHigh-Quality Visualizations: Built on Plotly.js, which is known for its publication-quality visualizations.\nInteractive Dashboards: Easily add complex interactions and live updates.\nFull Customization: Use HTML, CSS, and JavaScript for extensive customization.\nEnterprise Ready: Scalable from simple prototypes to large enterprise applications.",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#key-concepts-and-components",
    "href": "3_plotly_dash.html#key-concepts-and-components",
    "title": "Plotly Dash",
    "section": "2. Key Concepts and Components",
    "text": "2. Key Concepts and Components\n\n2.1. Dash Application Structure\nA basic Dash application consists of: - Layout: Defines the visual structure using Dash components. - Callbacks: Control interactivity and data flow within the app. - Server: The underlying Flask server that serves the application.\n\n\n2.2. Core Components\nDash provides a suite of UI components: - Dash Core Components (dcc): - Graphs (dcc.Graph) - Dropdowns (dcc.Dropdown) - Sliders (dcc.Slider) - Date Pickers (dcc.DatePickerSingle, dcc.DatePickerRange) - Tabs (dcc.Tabs) - Dash HTML Components (html): - Divs (html.Div) - Paragraphs (html.P) - Buttons (html.Button) - Images (html.Img) - Dash Bootstrap Components (dbc): - Pre-styled components using Bootstrap. - Cards, Alerts, Navbar, Forms, and more.\n\n\n2.3. Callbacks\nCallbacks make Dash applications interactive. They are: - Input: Triggers the callback when the value changes. - Output: Defines the component property to be updated. - State: Holds state information without triggering the callback.\n\n\n2.4. Graphing Library\nPlotly Dash uses Plotly.js for rendering graphs: - Over 40 chart types: line, bar, pie, scatter, heatmap, box plots, 3D charts, and more. - Customizable layout and styling using plotly.graph_objects.",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#getting-started-with-dash",
    "href": "3_plotly_dash.html#getting-started-with-dash",
    "title": "Plotly Dash",
    "section": "3. Getting Started with Dash",
    "text": "3. Getting Started with Dash\n\n3.1. Installation\npip install dash\nFor Bootstrap components:\npip install dash-bootstrap-components\n\n\n3.2. Basic Application Example\n# app.py\nimport dash\nfrom dash import dcc, html\nimport plotly.express as px\nfrom dash.dependencies import Input, Output\n\n# Initialize the Dash app\napp = dash.Dash(__name__)\n\n# Sample DataFrame\nimport pandas as pd\ndf = pd.DataFrame({\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [10, 20, 15, 30]\n})\n\n# Layout of the App\napp.layout = html.Div([\n    html.H1('Simple Bar Chart Example'),\n    dcc.Graph(\n        id='bar-chart',\n        figure=px.bar(df, x='Category', y='Values', title=\"Bar Chart Example\")\n    ),\n])\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\nRun the app:\n\npython app.py\n\nOpen in browser: http://127.0.0.1:8050",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#layout-and-styling",
    "href": "3_plotly_dash.html#layout-and-styling",
    "title": "Plotly Dash",
    "section": "4. Layout and Styling",
    "text": "4. Layout and Styling\n\n4.1. Layout with HTML Components\napp.layout = html.Div([\n    html.H1('Dashboard Title', style={'textAlign': 'center'}),\n    html.Div([\n        dcc.Dropdown(\n            id='dropdown',\n            options=[\n                {'label': 'Option 1', 'value': 'opt1'},\n                {'label': 'Option 2', 'value': 'opt2'}\n            ],\n            value='opt1'\n        )\n    ], style={'width': '50%', 'margin': 'auto'}),\n])\n\n\n4.2. Styling with CSS\n\nInline Styles: Use style attribute in components.\nExternal Stylesheets:\n\napp = dash.Dash(__name__, external_stylesheets=[\n    \"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\n])\n\nLocal Stylesheets: Place CSS files in assets folder. Dash automatically loads them.\n\n\n\n4.3. Using Dash Bootstrap Components\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = dbc.Container([\n    dbc.Row([\n        dbc.Col(html.H1('Bootstrap Dashboard'), width=12)\n    ]),\n    dbc.Row([\n        dbc.Col(dcc.Graph(id='example-graph'), width=8),\n        dbc.Col([\n            html.H3('Sidebar'),\n            html.P('Additional Info')\n        ], width=4)\n    ])\n])",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#interactivity-with-callbacks",
    "href": "3_plotly_dash.html#interactivity-with-callbacks",
    "title": "Plotly Dash",
    "section": "5. Interactivity with Callbacks",
    "text": "5. Interactivity with Callbacks\n\n5.1. Simple Callback Example\n@app.callback(\n    Output('output-div', 'children'),\n    Input('input-text', 'value')\n)\ndef update_output(value):\n    return f'You entered: {value}'\n\n\n5.2. Multiple Inputs and Outputs\n@app.callback(\n    Output('output-div', 'children'),\n    [Input('dropdown', 'value'),\n     Input('slider', 'value')]\n)\ndef update_output(dropdown_value, slider_value):\n    return f'Selected: {dropdown_value}, Slider Value: {slider_value}'\n\n\n5.3. Using State\n@app.callback(\n    Output('output-div', 'children'),\n    Input('submit-button', 'n_clicks'),\n    State('input-text', 'value')\n)\ndef update_output(n_clicks, value):\n    if n_clicks:\n        return f'You entered: {value}'",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#advanced-features",
    "href": "3_plotly_dash.html#advanced-features",
    "title": "Plotly Dash",
    "section": "6. Advanced Features",
    "text": "6. Advanced Features\n\n6.1. Live Updates with Interval Component\ndcc.Interval(\n    id='interval-component',\n    interval=60*1000,  # 1 minute in milliseconds\n    n_intervals=0\n)\n\n\n6.2. Multi-Page Layouts\nUse dcc.Location and multiple layouts:\ndcc.Location(id='url', refresh=False),\nhtml.Div(id='page-content')\n\n\n6.3. Integrating Dash in Django\n\nUsing django-plotly-dash Package: bash     pip install django-plotly-dash\nSettings Configuration: ```python INSTALLED_APPS = [ ‘django_plotly_dash.apps.DjangoPlotlyDashConfig’, ‘dpd_static_support’, ‘channels’, ]\nASGI_APPLICATION = ‘myproject.asgi.application’ CHANNEL_LAYERS = { “default”: { “BACKEND”: “channels.layers.InMemoryChannelLayer” } } ```\nEmbedding in Template: html     {% load plotly_dash %}     &lt;div class=\"container\"&gt;         {% plotly_dash_app name=\"TransactionGraph\" %}     &lt;/div&gt;",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#deployment-and-hosting",
    "href": "3_plotly_dash.html#deployment-and-hosting",
    "title": "Plotly Dash",
    "section": "7. Deployment and Hosting",
    "text": "7. Deployment and Hosting\n\n7.1. Gunicorn and Nginx\n\nInstall Gunicorn:\n\npip install gunicorn\n\nRun with Gunicorn:\n\ngunicorn app:server\n\nConfigure Nginx:\n\nserver {\n    listen 80;\n    server_name mydomain.com;\n\n    location / {\n        proxy_pass http://localhost:8050;\n        proxy_set_header Host $host;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n    }\n}\n\n\n7.2. Cloud Hosting\n\nHeroku: Free and easy deployment.\nAWS Elastic Beanstalk: For scalable deployments.\nGoogle Cloud Run: Serverless containerized apps.",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "3_plotly_dash.html#plotly-dash-vs-alternatives",
    "href": "3_plotly_dash.html#plotly-dash-vs-alternatives",
    "title": "Plotly Dash",
    "section": "8. Plotly Dash vs Alternatives",
    "text": "8. Plotly Dash vs Alternatives\n\n\n\n\n\n\n\n\n\nFeature\nPlotly Dash\nStreamlit\nGradio\n\n\n\n\nPurpose\nAdvanced dashboards\nRapid prototypes\nML demos\n\n\nEase of Use\n⭐⭐⭐⭐\n⭐⭐⭐⭐⭐\n⭐⭐⭐⭐⭐\n\n\nCustomization\n⭐⭐⭐⭐⭐\n⭐⭐\n⭐⭐\n\n\nDeployment\nEnterprise-grade\nSimple hosting\nSeparate app\n\n\nBest For\nData-driven apps\nMVPs and internal tools\nML models and demos",
    "crumbs": [
      "Blog",
      "Plotly Dash"
    ]
  },
  {
    "objectID": "bootstrap.html",
    "href": "bootstrap.html",
    "title": "Bootstrap",
    "section": "",
    "text": "CDN (Content Delivery Network): The easiest way to use Bootstrap is by including it via a CDN.\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Bootstrap demo&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\nDownload: Alternatively, you can download Bootstrap and include it locally in your project.\nBootstrap Versions: Bootstrap has evolved through several versions, with Bootstrap 5 being the latest. It removed dependency on jQuery, added more features, and improved the overall design and development experience.",
    "crumbs": [
      "Blog",
      "Bootstrap"
    ]
  },
  {
    "objectID": "bootstrap.html#getting-started-with-bootstrap",
    "href": "bootstrap.html#getting-started-with-bootstrap",
    "title": "Bootstrap",
    "section": "",
    "text": "CDN (Content Delivery Network): The easiest way to use Bootstrap is by including it via a CDN.\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Bootstrap demo&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\nDownload: Alternatively, you can download Bootstrap and include it locally in your project.\nBootstrap Versions: Bootstrap has evolved through several versions, with Bootstrap 5 being the latest. It removed dependency on jQuery, added more features, and improved the overall design and development experience.",
    "crumbs": [
      "Blog",
      "Bootstrap"
    ]
  },
  {
    "objectID": "bootstrap.html#bootstrap-grid-system",
    "href": "bootstrap.html#bootstrap-grid-system",
    "title": "Bootstrap",
    "section": "Bootstrap Grid System",
    "text": "Bootstrap Grid System\n\nResponsive Grid System: Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content. It’s based on a 12-column layout.\nBreakpoints: Bootstrap defines several responsive breakpoints (e.g., xs, sm, md, lg, xl, xxl) for different screen sizes.\nContainers: The grid system is wrapped in a .container class. Containers can be fixed-width (.container) or fluid-width (.container-fluid).\nRows and Columns: Use .row to create a horizontal group of columns and .col-* classes to define the width of columns.\n\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-4\"&gt;Column 1&lt;/div&gt;\n        &lt;div class=\"col-md-4\"&gt;Column 2&lt;/div&gt;\n        &lt;div class=\"col-md-4\"&gt;Column 3&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;",
    "crumbs": [
      "Blog",
      "Bootstrap"
    ]
  },
  {
    "objectID": "bootstrap.html#bootstrap-components",
    "href": "bootstrap.html#bootstrap-components",
    "title": "Bootstrap",
    "section": "Bootstrap Components",
    "text": "Bootstrap Components\n\nBootstrap provides a wide range of components that can be used to create a fully-functional and aesthetically pleasing UI.\n\n\nButtons: Bootstrap buttons are styled using the .btn class, and additional classes like .btn-primary, .btn-secondary, .btn-success, etc., for different colors.\n&lt;button type=\"button\" class=\"btn btn-primary\"&gt;Primary Button&lt;/button&gt;\n\n\nNavbar: A responsive navigation bar that can collapse into a hamburger menu on smaller screens.\n&lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n    &lt;a class=\"navbar-brand\" href=\"#\"&gt;Navbar&lt;/a&gt;\n    &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n        &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n        &lt;ul class=\"navbar-nav\"&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link active\" aria-current=\"page\" href=\"#\"&gt;Home&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Features&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Pricing&lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;\n\n\nCards: Flexible content containers with various options for headers, footers, images, and content.\n&lt;div class=\"card\" style=\"width: 18rem;\"&gt;\n    &lt;img src=\"...\" class=\"card-img-top\" alt=\"...\"&gt;\n    &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;Card title&lt;/h5&gt;\n        &lt;p class=\"card-text\"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;\n        &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Go somewhere&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n\nForms: Bootstrap styles forms to be more consistent and responsive, with various classes for form controls, validation states, and layout.\n&lt;form&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"exampleInputEmail1\" class=\"form-label\"&gt;Email address&lt;/label&gt;\n        &lt;input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"&gt;\n        &lt;div id=\"emailHelp\" class=\"form-text\"&gt;We'll never share your email with anyone else.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"exampleInputPassword1\" class=\"form-label\"&gt;Password&lt;/label&gt;\n        &lt;input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n\nModals: Popup dialogs that can display additional content without leaving the current page.\n&lt;button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\"&gt;\n    Launch demo modal\n&lt;/button&gt;\n\n&lt;div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"&gt;\n    &lt;div class=\"modal-dialog\"&gt;\n        &lt;div class=\"modal-content\"&gt;\n            &lt;div class=\"modal-header\"&gt;\n                &lt;h5 class=\"modal-title\" id=\"exampleModalLabel\"&gt;Modal title&lt;/h5&gt;\n                &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt;\n            &lt;/div&gt;\n            &lt;div class=\"modal-body\"&gt;\n                ...\n            &lt;/div&gt;\n            &lt;div class=\"modal-footer\"&gt;\n                &lt;button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"&gt;Close&lt;/button&gt;\n                &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Save changes&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n\nAlerts: Provides contextual feedback messages for typical user actions.\n&lt;div class=\"alert alert-warning\" role=\"alert\"&gt;\n    This is a warning alert—check it out!\n&lt;/div&gt;\n\n\nTables: Bootstrap tables are styled and responsive by default with classes like .table, .table-striped, .table-bordered, etc.\n&lt;table class=\"table\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th scope=\"col\"&gt;#&lt;/th&gt;\n            &lt;th scope=\"col\"&gt;First&lt;/th&gt;\n            &lt;th scope=\"col\"&gt;Last&lt;/th&gt;\n            &lt;th scope=\"col\"&gt;Handle&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;th scope=\"row\"&gt;1&lt;/th&gt;\n            &lt;td&gt;Mark&lt;/td&gt;\n            &lt;td&gt;Otto&lt;/td&gt;\n            &lt;td&gt;@mdo&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n\n\nCarousels: A slideshow component for cycling through elements like images or text.\n&lt;div id=\"carouselExampleControls\" class=\"carousel slide\" data-bs-ride=\"carousel\"&gt;\n    &lt;div class=\"carousel-inner\"&gt;\n        &lt;div class=\"carousel-item active\"&gt;\n            &lt;img src=\"...\" class=\"d-block w-100\" alt=\"...\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"carousel-item\"&gt;\n            &lt;img src=\"...\" class=\"d-block w-100\" alt=\"...\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleControls\" data-bs-slide=\"prev\"&gt;\n        &lt;span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n        &lt;span class=\"visually-hidden\"&gt;Previous&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleControls\" data-bs-slide=\"next\"&gt;\n        &lt;span class=\"carousel-control-next-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n        &lt;span class=\"visually-hidden\"&gt;Next&lt;/span&gt;\n    &lt;/button&gt;\n&lt;/div&gt;",
    "crumbs": [
      "Blog",
      "Bootstrap"
    ]
  },
  {
    "objectID": "bootstrap.html#custom-bootstrap-for-django",
    "href": "bootstrap.html#custom-bootstrap-for-django",
    "title": "Bootstrap",
    "section": "Custom Bootstrap for Django",
    "text": "Custom Bootstrap for Django\n\nInstalls\npip install django-sass-processor django-compressor libsass\nor\npoetry add django-sass-processor django-compressor libsass\n\n### Set Up Django Project Directory Structure\nmyproject/ ├── static/ │ ├── css/ │ ├── sass/ │ │ └── custom_bootstrap.scss │ └── bootstrap-5/ │ ├── css/ │ └── js/ ├── myapp/ │ └── templates/ │ └── base.html └── manage.py\n\n### Configure settings.py\n\n```python\nINSTALLED_APPS = [\n    ...\n    'compressor',\n    'sass_processor',\n]\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n\n# Enable Django Compressor and Sass Processor settings\nCOMPRESS_ENABLED = True\nCOMPRESS_OFFLINE = True\n\nCOMPRESS_PRECOMPILERS = (\n    ('text/x-scss', 'django_libsass.SassCompiler'),\n)\n\nSASS_PROCESSOR_ROOT = STATICFILES_DIRS[0]  # Directory where Sass files are located\nSTATICFILES_FINDERS = [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    'compressor.finders.CompressorFinder',\n]\n\n\n\nOffline Compression for Production\npython manage.py compress",
    "crumbs": [
      "Blog",
      "Bootstrap"
    ]
  },
  {
    "objectID": "React/react_libraries.html#routing-navigation",
    "href": "React/react_libraries.html#routing-navigation",
    "title": "React Libraries",
    "section": "📦 1. Routing & Navigation",
    "text": "📦 1. Routing & Navigation\n\n\n\n\n\n\n\nPackage\nUse Case\n\n\n\n\nreact-router-dom\nDeclarative routing (SPA, nested routes, lazy loading)\n\n\n@tanstack/react-router\nAdvanced router with data loading, similar to Remix/Next.js\n\n\n\nnpm install react-router-dom",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#global-state-management",
    "href": "React/react_libraries.html#global-state-management",
    "title": "React Libraries",
    "section": "🌍 2. Global State Management",
    "text": "🌍 2. Global State Management\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\nzustand\nSimple, scalable state with hooks (minimal Redux alternative)\n\n\nredux + react-redux\nPredictable state container (more boilerplate)\n\n\njotai\nPrimitive and minimal atomic state\n\n\nrecoil\nState management by Meta (atom/selectors model)\n\n\n\nnpm install zustand",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#data-fetching-caching",
    "href": "React/react_libraries.html#data-fetching-caching",
    "title": "React Libraries",
    "section": "🔌 3. Data Fetching / Caching",
    "text": "🔌 3. Data Fetching / Caching\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\n@tanstack/react-query (React Query)\nCaching, revalidation, pagination\n\n\nswr\nLightweight data-fetching library by Vercel\n\n\n\nnpm install @tanstack/react-query",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#styling",
    "href": "React/react_libraries.html#styling",
    "title": "React Libraries",
    "section": "🎨 4. Styling",
    "text": "🎨 4. Styling\n\n\n\nPackage\nDescription\n\n\n\n\ntailwindcss\nUtility-first CSS framework\n\n\nstyled-components\nCSS-in-JS styling\n\n\n@emotion/react\nAnother powerful CSS-in-JS library\n\n\nclassnames\nConditionally join classNames\n\n\n\nnpm install tailwindcss classnames",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#testing",
    "href": "React/react_libraries.html#testing",
    "title": "React Libraries",
    "section": "🧪 5. Testing",
    "text": "🧪 5. Testing\n\n\n\nPackage\nDescription\n\n\n\n\n@testing-library/react\nTest components like users do\n\n\njest / vitest\nTest runners\n\n\ncypress / playwright\nE2E browser testing\n\n\n\nnpm install --save-dev @testing-library/react vitest",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#form-handling-validation",
    "href": "React/react_libraries.html#form-handling-validation",
    "title": "React Libraries",
    "section": "🎭 6. Form Handling & Validation",
    "text": "🎭 6. Form Handling & Validation\n\n\n\nPackage\nDescription\n\n\n\n\nreact-hook-form\nPerformant, minimal form management\n\n\nformik\nTraditional form state management\n\n\nzod / yup\nSchema validation libraries\n\n\n\nnpm install react-hook-form zod",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#ui-components-design-systems",
    "href": "React/react_libraries.html#ui-components-design-systems",
    "title": "React Libraries",
    "section": "🧱 7. UI Components / Design Systems",
    "text": "🧱 7. UI Components / Design Systems\n\n\n\nPackage\nDescription\n\n\n\n\n@mui/material\nGoogle’s Material UI\n\n\n@chakra-ui/react\nAccessible, composable component library\n\n\nshadcn/ui\nModern, headless + Tailwind components\n\n\nantd\nEnterprise-grade components (Ant Design)\n\n\n\nnpm install @mui/material @emotion/react @emotion/styled",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#charts-visualization",
    "href": "React/react_libraries.html#charts-visualization",
    "title": "React Libraries",
    "section": "📊 8. Charts & Visualization",
    "text": "📊 8. Charts & Visualization\n\n\n\nPackage\nDescription\n\n\n\n\nrecharts\nComposable chart components\n\n\nchart.js + react-chartjs-2\nPopular canvas-based charting\n\n\nplotly.js\nInteractive and powerful charts\n\n\n\nnpm install recharts",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#dev-tools-productivity",
    "href": "React/react_libraries.html#dev-tools-productivity",
    "title": "React Libraries",
    "section": "🔧 9. Dev Tools & Productivity",
    "text": "🔧 9. Dev Tools & Productivity\n\n\n\nPackage\nDescription\n\n\n\n\neslint + prettier\nCode quality and formatting\n\n\nvite-plugin-eslint\nLive linting in Vite\n\n\neslint-plugin-react\nReact-specific lint rules\n\n\ntypescript\nOptional static typing\n\n\n\nnpm install -D eslint prettier eslint-plugin-react",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#ai-llm-integration",
    "href": "React/react_libraries.html#ai-llm-integration",
    "title": "React Libraries",
    "section": "🧠 10. AI & LLM Integration",
    "text": "🧠 10. AI & LLM Integration\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\nlangchain\nChain logic and prompts for LLMs\n\n\nopenai\nDirect API client to OpenAI\n\n\n@xenova/transformers\nTransformers.js inference in browser (LLM locally)\n\n\n\nnpm install openai",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#other-handy-utilities",
    "href": "React/react_libraries.html#other-handy-utilities",
    "title": "React Libraries",
    "section": "🔌 11. Other Handy Utilities",
    "text": "🔌 11. Other Handy Utilities\n\n\n\nPackage\nUse\n\n\n\n\naxios\nHTTP client\n\n\ndayjs or date-fns\nDate manipulation\n\n\nuuid\nGenerate UUIDs\n\n\ndotenv\nLoad environment variables\n\n\n\nnpm install axios dayjs uuid",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_libraries.html#summary-table",
    "href": "React/react_libraries.html#summary-table",
    "title": "React Libraries",
    "section": "📘 Summary Table",
    "text": "📘 Summary Table\n\n\n\nCategory\nMust-Have Addons\n\n\n\n\nRouting\nreact-router-dom\n\n\nState\nzustand, redux, jotai\n\n\nData Fetching\n@tanstack/react-query, swr\n\n\nStyling\ntailwindcss, styled-components, classnames\n\n\nForms\nreact-hook-form, zod\n\n\nUI Components\n@mui/material, shadcn/ui, chakra-ui\n\n\nTesting\n@testing-library/react, vitest\n\n\nCharts\nrecharts, chart.js, plotly.js\n\n\nUtils\naxios, uuid, dayjs",
    "crumbs": [
      "Blog",
      "React",
      "React Libraries"
    ]
  },
  {
    "objectID": "React/react_docker.html#project-structure-full-stack-docker",
    "href": "React/react_docker.html#project-structure-full-stack-docker",
    "title": "React Docker",
    "section": "🧱 Project Structure (Full Stack + Docker)",
    "text": "🧱 Project Structure (Full Stack + Docker)\nmyproject/\n├── backend/\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   ├── manage.py\n│   ├── myproject/\n│   └── api/\n├── frontend/\n│   ├── Dockerfile\n│   ├── vite.config.ts\n│   └── src/\n├── nginx/\n│   └── default.conf\n├── .env\n├── docker-compose.yml\n└── README.md",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#docker-compose.yml",
    "href": "React/react_docker.html#docker-compose.yml",
    "title": "React Docker",
    "section": "⚙️ 1. docker-compose.yml",
    "text": "⚙️ 1. docker-compose.yml\nversion: '3.9'\n\nservices:\n  backend:\n    build: ./backend\n    command: gunicorn myproject.wsgi:application --bind 0.0.0.0:8000\n    volumes:\n      - static_volume:/app/static\n      - media_volume:/app/media\n    env_file: .env\n    depends_on:\n      - db\n\n  frontend:\n    build: ./frontend\n    command: [\"npm\", \"run\", \"preview\", \"--\", \"--port\", \"5173\"]\n    depends_on:\n      - backend\n\n  nginx:\n    image: nginx:alpine\n    volumes:\n      - static_volume:/app/static\n      - media_volume:/app/media\n      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf\n    ports:\n      - \"80:80\"\n    depends_on:\n      - backend\n      - frontend\n\n  db:\n    image: postgres:15\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    env_file: .env\n\nvolumes:\n  static_volume:\n  media_volume:\n  postgres_data:",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#backenddockerfile",
    "href": "React/react_docker.html#backenddockerfile",
    "title": "React Docker",
    "section": "🐍 2. backend/Dockerfile",
    "text": "🐍 2. backend/Dockerfile\nFROM python:3.12-slim\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --upgrade pip && pip install -r requirements.txt\n\nCOPY . .\n\nRUN python manage.py collectstatic --noinput\n\nCMD [\"gunicorn\", \"myproject.wsgi:application\", \"--bind\", \"0.0.0.0:8000\"]\n\nMake sure requirements.txt contains:\n\nDjango&gt;=4.2\ndjangorestframework\ngunicorn\npsycopg2-binary\ndjango-cors-headers",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#frontenddockerfile-vite-react",
    "href": "React/react_docker.html#frontenddockerfile-vite-react",
    "title": "React Docker",
    "section": "⚛️ 3. frontend/Dockerfile (Vite + React)",
    "text": "⚛️ 3. frontend/Dockerfile (Vite + React)\n# Build stage\nFROM node:20-alpine as builder\n\nWORKDIR /app\nCOPY . .\nRUN npm install\nRUN npm run build\n\n# Serve stage\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#nginxdefault.conf",
    "href": "React/react_docker.html#nginxdefault.conf",
    "title": "React Docker",
    "section": "🌐 4. nginx/default.conf",
    "text": "🌐 4. nginx/default.conf\nserver {\n    listen 80;\n\n    location / {\n        root /usr/share/nginx/html;\n        index index.html;\n        try_files $uri $uri/ /index.html;\n    }\n\n    location /api/ {\n        proxy_pass http://backend:8000/api/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /static/ {\n        alias /app/static/;\n    }\n\n    location /media/ {\n        alias /app/media/;\n    }\n}",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#env-example",
    "href": "React/react_docker.html#env-example",
    "title": "React Docker",
    "section": "🔐 5. .env Example",
    "text": "🔐 5. .env Example\n# Django settings\nSECRET_KEY=supersecretkey\nDEBUG=0\nALLOWED_HOSTS=*\n\n# Postgres\nPOSTGRES_DB=postgres\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#commands-to-run",
    "href": "React/react_docker.html#commands-to-run",
    "title": "React Docker",
    "section": "🏁 6. Commands to Run",
    "text": "🏁 6. Commands to Run\n# Build and start\ndocker-compose up --build\n\n# Run DB migrations\ndocker-compose exec backend python manage.py migrate\n\n# Create superuser\ndocker-compose exec backend python manage.py createsuperuser",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#production-checklist",
    "href": "React/react_docker.html#production-checklist",
    "title": "React Docker",
    "section": "✅ 7. Production Checklist",
    "text": "✅ 7. Production Checklist\n\n\n\nItem\nRecommended Practice\n\n\n\n\nDEBUG = False\nIn production\n\n\nALLOWED_HOSTS\nSet actual domains\n\n\nUse django-environ\nFor env variables in Django settings\n\n\nHTTPS with Nginx\nUse Let’s Encrypt + Certbot\n\n\nStatic/media volume\nPersisted between containers\n\n\nFrontend build output\n/app/dist from Vite → served via Nginx",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_docker.html#bonus-build-script-optional",
    "href": "React/react_docker.html#bonus-build-script-optional",
    "title": "React Docker",
    "section": "📦 Bonus: Build Script (Optional)",
    "text": "📦 Bonus: Build Script (Optional)\n#!/bin/bash\n\ndocker-compose down -v\ndocker-compose build\ndocker-compose up -d\ndocker-compose exec backend python manage.py migrate",
    "crumbs": [
      "Blog",
      "React",
      "React Docker"
    ]
  },
  {
    "objectID": "React/react_&_django.html",
    "href": "React/react_&_django.html",
    "title": "React and Django",
    "section": "",
    "text": "Layer\nTechnology\nPurpose\n\n\n\n\nBackend\nDjango + Django REST Framework\nAPI + ORM + Auth\n\n\nFrontend\nReact (with Vite or Next.js)\nSPA / UI\n\n\nAPI Format\nJSON (via DRF)\nCommunicate between FE/BE\n\n\nAuth Options\nJWT / Session\nToken-based auth\n\n\nDeployment\nDocker / Gunicorn + Nginx / Vite static build\nProduction hosting",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#tech-stack-breakdown",
    "href": "React/react_&_django.html#tech-stack-breakdown",
    "title": "React and Django",
    "section": "",
    "text": "Layer\nTechnology\nPurpose\n\n\n\n\nBackend\nDjango + Django REST Framework\nAPI + ORM + Auth\n\n\nFrontend\nReact (with Vite or Next.js)\nSPA / UI\n\n\nAPI Format\nJSON (via DRF)\nCommunicate between FE/BE\n\n\nAuth Options\nJWT / Session\nToken-based auth\n\n\nDeployment\nDocker / Gunicorn + Nginx / Vite static build\nProduction hosting",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#backend-setup-django-drf",
    "href": "React/react_&_django.html#backend-setup-django-drf",
    "title": "React and Django",
    "section": "📦 2. Backend Setup (Django + DRF)",
    "text": "📦 2. Backend Setup (Django + DRF)\n\n📁 Project Structure\nmyproject/\n├── backend/\n│   ├── manage.py\n│   ├── myproject/         # Django settings\n│   └── api/               # Django app for your API\n│       ├── models.py\n│       ├── serializers.py\n│       ├── views.py\n│       ├── urls.py\n├── frontend/              # React app\n│   ├── package.json\n│   └── src/\n\n\n🧪 Create Backend\n# Create and activate virtualenv\npython -m venv .venv\nsource .venv/bin/activate\n\n# Install Django + DRF\npip install django djangorestframework djoser django-cors-headers\n\n# Create project and app\ndjango-admin startproject myproject backend\ncd backend\npython manage.py startapp api\n\n\n✍️ Update settings.py\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'corsheaders',\n    'api',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    ...\n]\n\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",  # or Vite dev server\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.AllowAny'],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n    ],\n}\n\n\n🔁 Sample API Setup\n\nmodels.py\nfrom django.db import models\n\nclass Todo(models.Model):\n    title = models.CharField(max_length=100)\n    completed = models.BooleanField(default=False)\n\n\nserializers.py\nfrom rest_framework import serializers\nfrom .models import Todo\n\nclass TodoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Todo\n        fields = '__all__'\n\n\nviews.py\nfrom rest_framework import viewsets\nfrom .models import Todo\nfrom .serializers import TodoSerializer\n\nclass TodoViewSet(viewsets.ModelViewSet):\n    queryset = Todo.objects.all()\n    serializer_class = TodoSerializer\n\n\nurls.py\nfrom rest_framework.routers import DefaultRouter\nfrom .views import TodoViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'todos', TodoViewSet)\n\nurlpatterns = router.urls\n\n\nbackend/urls.py\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('api/', include('api.urls')),\n]",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#frontend-setup-react-vite",
    "href": "React/react_&_django.html#frontend-setup-react-vite",
    "title": "React and Django",
    "section": "⚛️ 3. Frontend Setup (React + Vite)",
    "text": "⚛️ 3. Frontend Setup (React + Vite)\n# From project root\nnpm create vite@latest frontend -- --template react-ts\ncd frontend\nnpm install\n\n🧰 Useful Packages\nnpm install axios react-router-dom\n\n\n📁 Example Project Structure\nfrontend/\n├── src/\n│   ├── pages/\n│   │   └── TodoPage.tsx\n│   ├── components/\n│   ├── App.tsx\n│   ├── main.tsx\n\n\n🔁 Axios Setup\n\napi/axios.ts\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api/',\n});\n\nexport default api;",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#sample-react-page",
    "href": "React/react_&_django.html#sample-react-page",
    "title": "React and Django",
    "section": "📄 4. Sample React Page",
    "text": "📄 4. Sample React Page\n\npages/TodoPage.tsx\nimport React, { useEffect, useState } from 'react';\nimport api from '../api/axios';\n\ntype Todo = {\n  id: number;\n  title: string;\n  completed: boolean;\n};\n\nexport default function TodoPage() {\n  const [todos, setTodos] = useState&lt;Todo[]&gt;([]);\n\n  useEffect(() =&gt; {\n    api.get&lt;Todo[]&gt;('todos/').then((res) =&gt; setTodos(res.data));\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Todo List&lt;/h2&gt;\n      &lt;ul&gt;\n        {todos.map((todo) =&gt; (\n          &lt;li key={todo.id}&gt;{todo.title}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#authentication-optional",
    "href": "React/react_&_django.html#authentication-optional",
    "title": "React and Django",
    "section": "🔑 5. Authentication (Optional)",
    "text": "🔑 5. Authentication (Optional)\n\nUse djoser or JWT\npip install djangorestframework-simplejwt\nIn settings.py:\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\nThen in frontend, use:\nconst login = async () =&gt; {\n  const res = await api.post(\"token/\", { username, password });\n  localStorage.setItem(\"access\", res.data.access);\n};",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#deployment-overview",
    "href": "React/react_&_django.html#deployment-overview",
    "title": "React and Django",
    "section": "📦 6. Deployment Overview",
    "text": "📦 6. Deployment Overview\n\n\n\nLayer\nTool\n\n\n\n\nBackend\nGunicorn + Nginx + PostgreSQL\n\n\nFrontend\nBuild with Vite → dist/\n\n\nHosting\nRender, Heroku, Railway, Docker\n\n\n\n# Build frontend\ncd frontend\nnpm run build\n\n# Copy dist to Django\nmv dist ../backend/frontend_build/\n\n# Serve with Django staticfiles or Nginx",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#best-practices",
    "href": "React/react_&_django.html#best-practices",
    "title": "React and Django",
    "section": "✅ 7. Best Practices",
    "text": "✅ 7. Best Practices\n\n\n\nArea\nBest Practice\n\n\n\n\nCORS\nUse django-cors-headers in dev, stricter in prod\n\n\nEnv vars\nUse .env + python-decouple or django-environ\n\n\nSecurity\nUse HTTPS, CSRF token if needed\n\n\nPerformance\nUse pagination, limit fields in serializers\n\n\nAPI Design\nRESTful endpoints, versioning (/api/v1/)",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "React/react_&_django.html#summary-diagram",
    "href": "React/react_&_django.html#summary-diagram",
    "title": "React and Django",
    "section": "📘 Summary Diagram",
    "text": "📘 Summary Diagram\nFrontend (React)\n  ↓ axios\nAPI Gateway: `/api/`\n  ↓\nBackend (Django DRF)\n  ↳ DB (PostgreSQL / SQLite)\n\nWould you like a GitHub starter template or Docker setup for this stack?",
    "crumbs": [
      "Blog",
      "React",
      "React and Django"
    ]
  },
  {
    "objectID": "Javascript/javascript.html",
    "href": "Javascript/javascript.html",
    "title": "Javascript",
    "section": "",
    "text": "1. Understanding the Architecture:\n\nDjango REST Framework (DRF) provides the backend, offering an API that returns data (typically JSON) in response to HTTP requests.\nJavaScript (JS) on the front end is responsible for interacting with the DRF API to send and receive data asynchronously (usually via AJAX or fetch).\n\n\n\n2. Setting Up the Front End:\n\nDRF and Django are typically used with templates, but if you’re building a single-page application (SPA), the front end may be separated from Django’s template system.\nYou might still use Django’s built-in templating, but increasingly, front-end frameworks like React, Vue.js, or Vanilla JavaScript with build tools (Webpack, Vite) are preferred.\n\n\n\n3. Using APIs:\n\nDRF’s role is to expose data as a REST API. You’ll use JavaScript (or a framework) to interact with this API.\nUse fetch or Axios (or any HTTP client) to send HTTP requests from the front end to the API.\n\n\nExample of Fetching Data in JavaScript:\nfetch('http://localhost:8000/api/items/')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(data);  // Handle the JSON data\n  })\n  .catch(error =&gt; {\n    console.error('Error:', error);\n  });\n\nMethods: You’ll need to know how to send different types of requests:\n\nGET: To retrieve data from the API.\nPOST: To send data for creating new objects.\nPUT/PATCH: To update data.\nDELETE: To delete resources.\n\n\n\n\nExample of Sending Data:\nfetch('http://localhost:8000/api/items/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer &lt;token&gt;'  // If using token-based auth\n  },\n  body: JSON.stringify({name: 'Item', description: 'A new item'})\n})\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log('Item created:', data))\n  .catch(error =&gt; console.error('Error:', error));\n\n\n\n4. Cross-Origin Resource Sharing (CORS):\n\nWhen using JavaScript to make API requests from a front-end hosted on a different domain or port, you’ll need to handle CORS.\nDjango-cors-headers can be used to configure CORS in your DRF project.\n\n\nInstall and Configure django-cors-headers:\npip install django-cors-headers\nIn settings.py: ```python INSTALLED_APPS = [ …, ‘corsheaders’, ]\nMIDDLEWARE = [ ‘corsheaders.middleware.CorsMiddleware’, …, ]\n# Allow all origins (for development purposes): CORS_ALLOW_ALL_ORIGINS = True ```\n\nFor production, configure CORS_ALLOWED_ORIGINS with specific origins.\n\n\n\n\n5. Handling Authentication:\n\nJWT (JSON Web Tokens) or Token-based authentication are common in DRF projects.\nUse the front end to send the token along with requests for protected routes.\n\n\nExample of Adding Authorization Header:\nfetch('http://localhost:8000/api/protected/', {\n  headers: {\n    'Authorization': 'Bearer ' + localStorage.getItem('access_token')  // Add the token here\n  }\n});\n\nStore the token securely on the client side (e.g., in localStorage or sessionStorage).\n\n\n\n\n6. Error Handling in JavaScript:\n\nHandle errors that come from the DRF API, such as 400 (bad request), 401 (unauthorized), 403 (forbidden), or 500 (server error).\n\nExample: javascript    fetch('http://localhost:8000/api/resource/')      .then(response =&gt; {        if (!response.ok) {          throw new Error('Network response was not ok ' + response.statusText);        }        return response.json();      })      .then(data =&gt; console.log(data))      .catch(error =&gt; console.error('There was a problem with your fetch operation:', error));\n\n\n7. Handling Forms and File Uploads:\n\nFor HTML forms, use JavaScript’s FormData to send form data, including file uploads, to DRF.\n\nExample of File Upload: ```javascript const formData = new FormData(); formData.append(‘file’, fileInput.files[0]);\nfetch(‘http://localhost:8000/api/upload/’, { method: ‘POST’, body: formData }) .then(response =&gt; response.json()) .then(data =&gt; console.log(‘File uploaded:’, data)) .catch(error =&gt; console.error(‘Error:’, error)); ```\n\n\n8. Front-End Frameworks:\n\nReact and Vue.js are popular frameworks to work with DRF. They offer better state management, routing, and modularity for building complex front-end applications.\n\n#### Example in React: ```javascript import React, { useState, useEffect } from ‘react’;\nfunction Items() { const [items, setItems] = useState([]);\n useEffect(() =&gt; {\n   fetch('http://localhost:8000/api/items/')\n     .then(response =&gt; response.json())\n     .then(data =&gt; setItems(data))\n     .catch(error =&gt; console.error('Error:', error));\n }, []);\n\n return (\n   &lt;div&gt;\n     &lt;h1&gt;Items List&lt;/h1&gt;\n     &lt;ul&gt;\n       {items.map(item =&gt; (\n         &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;\n       ))}\n     &lt;/ul&gt;\n   &lt;/div&gt;\n );\n}\nexport default Items; ```\n\n\n9. Frontend Build Tools:\n\nIf you use modern front-end tooling like Webpack or Vite, you can bundle your JavaScript assets for Django.\n\n\nExample: Using Webpack with Django\n\nInstall Webpack:\nnpm install webpack webpack-cli --save-dev\nConfigure webpack.config.js:\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'static/js')\n  },\n  mode: 'development'\n};\nUse the generated bundle.js in your Django templates.\n\n\n\n\n10. Debugging and Testing:\n\nUse Chrome DevTools or Firefox Developer Tools for debugging JavaScript and network requests.\nFor automated testing of your JavaScript code interacting with DRF APIs, consider tools like Jest for unit tests and Cypress or Puppeteer for end-to-end testing.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Javascript",
      "Javascript"
    ]
  },
  {
    "objectID": "Javascript/jquery.html",
    "href": "Javascript/jquery.html",
    "title": "JQuery",
    "section": "",
    "text": "jQuery: Overview, Features, and Key Concepts\njQuery is a fast, small, and feature-rich JavaScript library that simplifies complex tasks such as event handling, HTML document traversal, animations, and AJAX calls. It was created in 2006 by John Resig and quickly became one of the most popular JavaScript libraries for web development due to its ease of use and cross-browser compatibility.\n\nKey Features of jQuery:\n\nDOM Manipulation:\n\njQuery allows you to easily select and manipulate DOM (Document Object Model) elements using a concise syntax.\nExample:\n$('#elementID').hide(); // Hides an element with the ID 'elementID'\n\nEvent Handling:\n\njQuery simplifies the process of adding event listeners to elements. Events like clicks, form submissions, and hovering can be handled efficiently.\nExample:\n$('#button').on('click', function() {\n  alert('Button clicked!');\n});\n\nAJAX:\n\nAJAX (Asynchronous JavaScript and XML) calls in jQuery allow you to fetch data asynchronously without reloading the entire page.\nExample:\n$.ajax({\n  url: '/api/data',\n  method: 'GET',\n  success: function(data) {\n    console.log(data);\n  }\n});\n\nCross-browser Compatibility:\n\nOne of the reasons jQuery became so popular is its ability to normalize cross-browser JavaScript issues, ensuring that the code works seamlessly across browsers.\n\nCSS Manipulation:\n\nYou can easily manipulate the CSS properties of DOM elements using jQuery, enabling you to dynamically change styles without directly interacting with the CSS files.\nExample:\n$('#box').css('background-color', 'blue');\n\nAnimations:\n\njQuery provides built-in methods to create smooth animations such as fading elements in and out, sliding elements, and more.\nExample:\n$('#box').fadeIn();\n\nChaining:\n\njQuery allows method chaining, enabling you to perform multiple operations on elements in a concise manner.\nExample:\n$('#box').slideUp().slideDown().fadeOut();\n\nSelectors:\n\njQuery uses a powerful selector engine, which is based on CSS selectors, making it easy to select elements from the DOM.\nExample:\n$('.className')  // Selects all elements with the class 'className'\n\nPlugins:\n\njQuery’s architecture supports an extensive range of third-party plugins, which can be used to extend its functionality.\n\n\n\n\n\nBasic Syntax:\nThe basic syntax of jQuery is:\n$(selector).action();\n\n$: Signifies that you are accessing jQuery.\nselector: Identifies the HTML element(s) to be selected.\naction: The operation to be performed on the selected element.\n\n\n\njQuery CDN:\njQuery can be included in your project by downloading it or using a CDN (Content Delivery Network). To include via CDN:\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n\n\nAdvantages of jQuery:\n\nEasy to Learn: jQuery has a gentle learning curve, and its concise syntax makes it approachable for new developers.\nReduces Code Length: Common JavaScript tasks (like event handling, animations, or AJAX) require fewer lines of code with jQuery compared to vanilla JavaScript.\nCross-Browser Compatibility: jQuery handles browser-specific quirks, reducing the need for developers to account for browser differences manually.\nRich Plugin Ecosystem: A large number of plugins exist to extend jQuery’s functionality, from image sliders to form validation.\n\n\n\nDisadvantages of jQuery:\n\nPerformance: In some cases, jQuery can be slower than using pure JavaScript, especially with complex animations or high-performance applications.\nOutdated for Modern JavaScript: Since the introduction of modern JavaScript frameworks and libraries like React, Vue, and Angular, jQuery’s popularity has diminished because those libraries offer more powerful tools for building large-scale applications.\nFile Size: Though relatively small, jQuery adds an additional file to be downloaded by the browser, which can impact load times on resource-constrained devices.\n\n\n\njQuery vs Vanilla JavaScript:\nWith modern browsers offering extensive support for JavaScript standards (like ES6+), many developers now prefer using vanilla JavaScript for tasks jQuery was initially intended to simplify. For instance: - DOM Manipulation: Can now be done using document.querySelector or document.getElementById. - AJAX: Fetch API (fetch()) is now natively supported in JavaScript and provides similar functionality to jQuery’s AJAX method.\n\n\nIs jQuery Still Relevant?\nWhile jQuery remains widely used, especially in legacy projects, its role in modern web development is diminishing as more developers adopt newer frameworks and pure JavaScript due to: - Modern JavaScript (ES6) introduces native methods for DOM manipulation, events, and AJAX. - Frameworks like React, Vue, and Angular provide more comprehensive tools for building web applications. - Performance: Native JavaScript is often faster and more efficient than using a library.\n\n\njQuery Best Practices:\n\nUse the Latest Version: Always ensure you’re using the latest version of jQuery for better performance and security.\nLeverage Selectors Efficiently: Be mindful of how you use selectors. Overly complex selectors can slow down performance.\nLimit DOM Manipulation: Manipulating the DOM can be expensive in terms of performance. Cache selectors or minimize the number of operations when possible.\n\n\n\nExample of Usage:\nHere’s a complete example showing how jQuery can enhance a simple HTML page:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;jQuery Example&lt;/title&gt;\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n    $(document).ready(function(){\n      $(\"#hide\").click(function(){\n        $(\"p\").hide();\n      });\n      $(\"#show\").click(function(){\n        $(\"p\").show();\n      });\n    });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;This is a heading&lt;/h2&gt;\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;p&gt;This is another paragraph.&lt;/p&gt;\n\n&lt;button id=\"hide\"&gt;Hide&lt;/button&gt;\n&lt;button id=\"show\"&gt;Show&lt;/button&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\nIn this example, the jQuery code listens for button clicks and hides or shows the paragraphs accordingly.\n\n\nConclusion:\nWhile jQuery’s relevance is slowly decreasing in favor of modern JavaScript frameworks and native browser APIs, it remains a useful tool for simpler projects and in legacy systems. It offers an easy way to handle DOM manipulation, event handling, and AJAX calls with concise syntax, making it an excellent choice for beginners and smaller-scale projects. However, for larger applications, modern JavaScript frameworks are now preferred.\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Javascript",
      "JQuery"
    ]
  },
  {
    "objectID": "1_streamlit.html",
    "href": "1_streamlit.html",
    "title": "Streamlit",
    "section": "",
    "text": "!pip list | grep streamlit\n\nstreamlit                           1.33.0",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#display-text",
    "href": "1_streamlit.html#display-text",
    "title": "Streamlit",
    "section": "Display text",
    "text": "Display text\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 import streamlit as st\n      2 import pandas as pd\n      3 import numpy as np\n\nFile ~/BENEDICT_Only/Benedict_Projects/Benedict_Webdevelopment/webdevelopment_doc/nbs/streamlit.py:5\n      2 import pandas as pd\n      3 import numpy as np\n----&gt; 5 st.title('Uber pickups in NYC')\n      7 DATE_COLUMN = 'date/time'\n      8 DATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n      9             'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\nAttributeError: partially initialized module 'streamlit' has no attribute 'title' (most likely due to a circular import)\n\n\n\nst.text('Fixed width text')\nst.markdown('_Markdown_') # see #*\nst.caption('Balloons. Hundreds of them...')\nst.latex(r''' e^{i\\pi} + 1 = 0 ''')\nst.write('Most objects') # df, err, func, keras!\nst.write(['st', 'is &lt;', 3]) # see *\nst.title('My title')\nst.header('My header')\nst.subheader('My sub')\nst.code('for i in range(8): foo()')\n\n# * optional kwarg unsafe_allow_html = True",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#display-text-1",
    "href": "1_streamlit.html#display-text-1",
    "title": "Streamlit",
    "section": "Display text",
    "text": "Display text\nst.dataframe(my_dataframe)\nst.table(data.iloc[0:10])\nst.json({'foo':'bar','fu':'ba'})\nst.metric(label=\"Temp\", value=\"273 K\", delta=\"1.2 K\")",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#display-media",
    "href": "1_streamlit.html#display-media",
    "title": "Streamlit",
    "section": "Display media",
    "text": "Display media\nst.image('./header.png')\nst.audio(data)\nst.video(data)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#columns",
    "href": "1_streamlit.html#columns",
    "title": "Streamlit",
    "section": "Columns",
    "text": "Columns\ncol1, col2 = st.columns(2)\ncol1.write('Column 1')\ncol2.write('Column 2')\n\n# Three columns with different widths\ncol1, col2, col3 = st.columns([3,1,1])\n# col1 is wider\n\n# Using 'with' notation:\n&gt;&gt;&gt; with col1:\n&gt;&gt;&gt;     st.write('This is column 1')",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#tabs",
    "href": "1_streamlit.html#tabs",
    "title": "Streamlit",
    "section": "Tabs",
    "text": "Tabs\n# Insert containers separated into tabs:\n&gt;&gt;&gt; tab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\n&gt;&gt;&gt; tab1.write(\"this is tab 1\")\n&gt;&gt;&gt; tab2.write(\"this is tab 2\")\n\n# You can also use \"with\" notation:\n&gt;&gt;&gt; with tab1:\n&gt;&gt;&gt;   st.radio('Select one:', [1, 2])",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#control-flow",
    "href": "1_streamlit.html#control-flow",
    "title": "Streamlit",
    "section": "Control flow",
    "text": "Control flow\n# Stop execution immediately:\nst.stop()\n# Rerun script immediately:\nst.experimental_rerun()\n\n# Group multiple widgets:\n&gt;&gt;&gt; with st.form(key='my_form'):\n&gt;&gt;&gt;   username = st.text_input('Username')\n&gt;&gt;&gt;   password = st.text_input('Password')\n&gt;&gt;&gt;   st.form_submit_button('Login')",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#personalize-apps-for-users",
    "href": "1_streamlit.html#personalize-apps-for-users",
    "title": "Streamlit",
    "section": "Personalize apps for users",
    "text": "Personalize apps for users\n# Show different content based on the user's email address.\n&gt;&gt;&gt; if st.user.email == 'jane@email.com':\n&gt;&gt;&gt;    display_jane_content()\n&gt;&gt;&gt; elif st.user.email == 'adam@foocorp.io':\n&gt;&gt;&gt;    display_adam_content()\n&gt;&gt;&gt; else:\n&gt;&gt;&gt;    st.write(\"Please contact us to get access!\")",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#display-interactive-widgets",
    "href": "1_streamlit.html#display-interactive-widgets",
    "title": "Streamlit",
    "section": "Display interactive widgets",
    "text": "Display interactive widgets\nst.button('Hit me')\nst.data_editor('Edit data', data)\nst.checkbox('Check me out')\nst.radio('Pick one:', ['nose','ear'])\nst.selectbox('Select', [1,2,3])\nst.multiselect('Multiselect', [1,2,3])\nst.slider('Slide me', min_value=0, max_value=10)\nst.select_slider('Slide to select', options=[1,'2'])\nst.text_input('Enter some text')\nst.number_input('Enter a number')\nst.text_area('Area for textual entry')\nst.date_input('Date input')\nst.time_input('Time entry')\nst.file_uploader('File uploader')\nst.download_button('On the dl', data)\nst.camera_input(\"一二三,茄子!\")\nst.color_picker('Pick a color')\n# Use widgets' returned values in variables\n&gt;&gt;&gt; for i in range(int(st.number_input('Num:'))): foo()\n&gt;&gt;&gt; if st.sidebar.selectbox('I:',['f']) == 'f': b()\n&gt;&gt;&gt; my_slider_val = st.slider('Quinn Mallory', 1, 88)\n&gt;&gt;&gt; st.write(slider_val)\n# Disable widgets to remove interactivity:\n&gt;&gt;&gt; st.slider('Pick a number', 0, 100, disabled=True)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#build-chat-based-apps",
    "href": "1_streamlit.html#build-chat-based-apps",
    "title": "Streamlit",
    "section": "Build chat-based apps",
    "text": "Build chat-based apps\n# Insert a chat message container.\n&gt;&gt;&gt; with st.chat_message(\"user\"):\n&gt;&gt;&gt;    st.write(\"Hello 👋\")\n&gt;&gt;&gt;    st.line_chart(np.random.randn(30, 3))\n\n# Display a chat input widget.\n&gt;&gt;&gt; st.chat_input(\"Say something\")",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#mutate-data",
    "href": "1_streamlit.html#mutate-data",
    "title": "Streamlit",
    "section": "Mutate data",
    "text": "Mutate data\n# Add rows to a dataframe after\n# showing it.\n&gt;&gt;&gt; element = st.dataframe(df1)\n&gt;&gt;&gt; element.add_rows(df2)\n\n# Add rows to a chart after\n# showing it.\n&gt;&gt;&gt; element = st.line_chart(df1)\n&gt;&gt;&gt; element.add_rows(df2)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#display-code",
    "href": "1_streamlit.html#display-code",
    "title": "Streamlit",
    "section": "Display code",
    "text": "Display code\nst.echo()\n&gt;&gt;&gt; with st.echo():\n&gt;&gt;&gt;     st.write('Code will be executed and printed')",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#placeholders-help-and-options",
    "href": "1_streamlit.html#placeholders-help-and-options",
    "title": "Streamlit",
    "section": "Placeholders, help, and options",
    "text": "Placeholders, help, and options\n# Replace any single element.\n&gt;&gt;&gt; element = st.empty()\n&gt;&gt;&gt; element.line_chart(...)\n&gt;&gt;&gt; element.text_input(...)  # Replaces previous.\n\n# Insert out of order.\n&gt;&gt;&gt; elements = st.container()\n&gt;&gt;&gt; elements.line_chart(...)\n&gt;&gt;&gt; st.write(\"Hello\")\n&gt;&gt;&gt; elements.text_input(...)  # Appears above \"Hello\".\n\nst.help(pandas.DataFrame)\nst.get_option(key)\nst.set_option(key, value)\nst.set_page_config(layout='wide')\nst.experimental_show(objects)\nst.experimental_get_query_params()\nst.experimental_set_query_params(**params)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#connect-to-data-sources",
    "href": "1_streamlit.html#connect-to-data-sources",
    "title": "Streamlit",
    "section": "Connect to data sources",
    "text": "Connect to data sources\nst.experimental_connection('pets_db', type='sql')\nconn = st.experimental_connection('sql')\nconn = st.experimental_connection('snowpark')\n\n&gt;&gt;&gt; class MyConnection(ExperimentalBaseConnection[myconn.MyConnection]):\n&gt;&gt;&gt;    def _connect(self, **kwargs) -&gt; MyConnection:\n&gt;&gt;&gt;        return myconn.connect(**self._secrets, **kwargs)\n&gt;&gt;&gt;    def query(self, query):\n&gt;&gt;&gt;       return self._instance.query(query)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#optimize-performance",
    "href": "1_streamlit.html#optimize-performance",
    "title": "Streamlit",
    "section": "Optimize performance",
    "text": "Optimize performance\n# E.g. Dataframe computation, storing downloaded data, etc.\n&gt;&gt;&gt; @st.cache_data\n... def foo(bar):\n...   # Do something expensive and return data\n...   return data\n# Executes foo\n&gt;&gt;&gt; d1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by value, d1 == d2\n&gt;&gt;&gt; d2 = foo(ref1)\n# Different arg, so function foo executes\n&gt;&gt;&gt; d3 = foo(ref2)\n# Clear all cached entries for this function\n&gt;&gt;&gt; foo.clear()\n# Clear values from *all* in-memory or on-disk cached functions\n&gt;&gt;&gt; st.cache_data.clear()",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#cache-global-resources",
    "href": "1_streamlit.html#cache-global-resources",
    "title": "Streamlit",
    "section": "Cache global resources",
    "text": "Cache global resources\n# E.g. TensorFlow session, database connection, etc.\n&gt;&gt;&gt; @st.cache_resource\n... def foo(bar):\n...   # Create and return a non-data object\n...   return session\n# Executes foo\n&gt;&gt;&gt; s1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by reference, s1 == s2\n&gt;&gt;&gt; s2 = foo(ref1)\n# Different arg, so function foo executes\n&gt;&gt;&gt; s3 = foo(ref2)\n# Clear all cached entries for this function\n&gt;&gt;&gt; foo.clear()\n# Clear all global resources from cache\n&gt;&gt;&gt; st.cache_resource.clear()",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#deprecated-caching",
    "href": "1_streamlit.html#deprecated-caching",
    "title": "Streamlit",
    "section": "Deprecated caching",
    "text": "Deprecated caching\n&gt;&gt;&gt; @st.cache\n... def foo(bar):\n...   # Do something expensive in here...\n...   return data\n&gt;&gt;&gt; # Executes foo\n&gt;&gt;&gt; d1 = foo(ref1)\n&gt;&gt;&gt; # Does not execute foo\n&gt;&gt;&gt; # Returns cached item by reference, d1 == d2\n&gt;&gt;&gt; d2 = foo(ref1)\n&gt;&gt;&gt; # Different arg, so function foo executes\n&gt;&gt;&gt; d3 = foo(ref2)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#display-progress-and-status",
    "href": "1_streamlit.html#display-progress-and-status",
    "title": "Streamlit",
    "section": "Display progress and status",
    "text": "Display progress and status\n# Show a spinner during a process\n&gt;&gt;&gt; with st.spinner(text='In progress'):\n&gt;&gt;&gt;   time.sleep(3)\n&gt;&gt;&gt;   st.success('Done')\n\n# Show and update progress bar\n&gt;&gt;&gt; bar = st.progress(50)\n&gt;&gt;&gt; time.sleep(3)\n&gt;&gt;&gt; bar.progress(100)\n\nst.balloons()\nst.snow()\nst.toast('Mr Stay-Puft')\nst.error('Error message')\nst.warning('Warning message')\nst.info('Info message')\nst.success('Success message')\nst.exception(e)",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "1_streamlit.html#examples",
    "href": "1_streamlit.html#examples",
    "title": "Streamlit",
    "section": "Examples",
    "text": "Examples\n\n!cat streamlit.py\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.title('Uber pickups in NYC')\n\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\n@st.cache_data\ndef load_data(nrows):\n    data = pd.read_csv(DATA_URL, nrows=nrows)\n    lowercase = lambda x: str(x).lower()\n    data.rename(lowercase, axis='columns', inplace=True)\n    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n    return data\n\ndata_load_state = st.text('Loading data...')\ndata = load_data(10000)\ndata_load_state.text(\"Done! (using st.cache_data)\")\n\nif st.checkbox('Show raw data'):\n    st.subheader('Raw data')\n    st.write(data)\n\nst.subheader('Number of pickups by hour')\nhist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\nst.bar_chart(hist_values)\n\n# Some number in the range 0-23\nhour_to_filter = st.slider('hour', 0, 23, 17)\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\n\nst.subheader('Map of all pickups at %s:00' % hour_to_filter)\nst.map(filtered_data)\n\n\n\n!cat Streamlit_app/Hello.py\n\nimport streamlit as st\n\nst.set_page_config(\n    page_title=\"Hello\",\n    page_icon=\"👋\",\n)\n\nst.write(\"# Welcome to Streamlit! 👋\")\n\nst.sidebar.success(\"Select a demo above.\")\n\nst.markdown(\n    \"\"\"\n    Streamlit is an open-source app framework built specifically for\n    Machine Learning and Data Science projects.\n    **👈 Select a demo from the sidebar** to see some examples\n    of what Streamlit can do!\n    ### Want to learn more?\n    - Check out [streamlit.io](https://streamlit.io)\n    - Jump into our [documentation](https://docs.streamlit.io)\n    - Ask a question in our [community\n        forums](https://discuss.streamlit.io)\n    ### See more complex demos\n    - Use a neural net to [analyze the Udacity Self-driving Car Image\n        Dataset](https://github.com/streamlit/demo-self-driving)\n    - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)\n\"\"\"\n)\n\n\n\n!cat Streamlit_app/pages/1_Plotting_Demo.py\n\nimport streamlit as st\nimport time\nimport numpy as np\n\nst.set_page_config(page_title=\"Plotting Demo\", page_icon=\"📈\")\n\nst.markdown(\"# Plotting Demo\")\nst.sidebar.header(\"Plotting Demo\")\nst.write(\n    \"\"\"This demo illustrates a combination of plotting and animation with\nStreamlit. We're generating a bunch of random numbers in a loop for around\n5 seconds. Enjoy!\"\"\"\n)\n\nprogress_bar = st.sidebar.progress(0)\nstatus_text = st.sidebar.empty()\nlast_rows = np.random.randn(1, 1)\nchart = st.line_chart(last_rows)\n\nfor i in range(1, 101):\n    new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n    status_text.text(\"%i%% Complete\" % i)\n    chart.add_rows(new_rows)\n    progress_bar.progress(i)\n    last_rows = new_rows\n    time.sleep(0.05)\n\nprogress_bar.empty()\n\n# Streamlit widgets automatically run the script from top to bottom. Since\n# this button is not connected to any other logic, it just causes a plain\n# rerun.\nst.button(\"Re-run\")\n\n\n\n!cat Streamlit_app/pages/2_Mapping_Demo.py\n\nimport streamlit as st\nimport pandas as pd\nimport pydeck as pdk\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"Mapping Demo\", page_icon=\"🌍\")\n\nst.markdown(\"# Mapping Demo\")\nst.sidebar.header(\"Mapping Demo\")\nst.write(\n    \"\"\"This demo shows how to use\n[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)\nto display geospatial data.\"\"\"\n)\n\n\n@st.cache_data\ndef from_data_file(filename):\n    url = (\n        \"http://raw.githubusercontent.com/streamlit/\"\n        \"example-data/master/hello/v1/%s\" % filename\n    )\n    return pd.read_json(url)\n\n\ntry:\n    ALL_LAYERS = {\n        \"Bike Rentals\": pdk.Layer(\n            \"HexagonLayer\",\n            data=from_data_file(\"bike_rental_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            radius=200,\n            elevation_scale=4,\n            elevation_range=[0, 1000],\n            extruded=True,\n        ),\n        \"Bart Stop Exits\": pdk.Layer(\n            \"ScatterplotLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_color=[200, 30, 0, 160],\n            get_radius=\"[exits]\",\n            radius_scale=0.05,\n        ),\n        \"Bart Stop Names\": pdk.Layer(\n            \"TextLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_text=\"name\",\n            get_color=[0, 0, 0, 200],\n            get_size=15,\n            get_alignment_baseline=\"'bottom'\",\n        ),\n        \"Outbound Flow\": pdk.Layer(\n            \"ArcLayer\",\n            data=from_data_file(\"bart_path_stats.json\"),\n            get_source_position=[\"lon\", \"lat\"],\n            get_target_position=[\"lon2\", \"lat2\"],\n            get_source_color=[200, 30, 0, 160],\n            get_target_color=[200, 30, 0, 160],\n            auto_highlight=True,\n            width_scale=0.0001,\n            get_width=\"outbound\",\n            width_min_pixels=3,\n            width_max_pixels=30,\n        ),\n    }\n    st.sidebar.markdown(\"### Map Layers\")\n    selected_layers = [\n        layer\n        for layer_name, layer in ALL_LAYERS.items()\n        if st.sidebar.checkbox(layer_name, True)\n    ]\n    if selected_layers:\n        st.pydeck_chart(\n            pdk.Deck(\n                map_style=\"mapbox://styles/mapbox/light-v9\",\n                initial_view_state={\n                    \"latitude\": 37.76,\n                    \"longitude\": -122.4,\n                    \"zoom\": 11,\n                    \"pitch\": 50,\n                },\n                layers=selected_layers,\n            )\n        )\n    else:\n        st.error(\"Please choose at least one layer above.\")\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )\n\n\n\n!cat Streamlit_app/pages/3_DataFrame_Demo.py\n\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"DataFrame Demo\", page_icon=\"📊\")\n\nst.markdown(\"# DataFrame Demo\")\nst.sidebar.header(\"DataFrame Demo\")\nst.write(\n    \"\"\"This demo shows how to use `st.write` to visualize Pandas DataFrames.\n(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)\"\"\"\n)\n\n\n@st.cache_data\ndef get_UN_data():\n    AWS_BUCKET_URL = \"http://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n    df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n    return df.set_index(\"Region\")\n\n\ntry:\n    df = get_UN_data()\n    countries = st.multiselect(\n        \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]\n    )\n    if not countries:\n        st.error(\"Please select at least one country.\")\n    else:\n        data = df.loc[countries]\n        data /= 1000000.0\n        st.write(\"### Gross Agricultural Production ($B)\", data.sort_index())\n\n        data = data.T.reset_index()\n        data = pd.melt(data, id_vars=[\"index\"]).rename(\n            columns={\"index\": \"year\", \"value\": \"Gross Agricultural Product ($B)\"}\n        )\n        chart = (\n            alt.Chart(data)\n            .mark_area(opacity=0.3)\n            .encode(\n                x=\"year:T\",\n                y=alt.Y(\"Gross Agricultural Product ($B):Q\", stack=None),\n                color=\"Region:N\",\n            )\n        )\n        st.altair_chart(chart, use_container_width=True)\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )",
    "crumbs": [
      "Blog",
      "Streamlit"
    ]
  },
  {
    "objectID": "webpack.html",
    "href": "webpack.html",
    "title": "Webpack",
    "section": "",
    "text": "sudo apt install npm\n\n\n\nnode -v\nnpm -v\n\n\n\n\nnpm init -y\n\n\n\nnpm install --save-dev webpack webpack-cli webpack-dev-server\nnpm install --save-dev ts-loader css-loader style-loader sass sass-loader\nnpm install --save-dev html-webpack-plugin mini-css-extract-plugin\n\nnpm install --save bootstrap sass typescript webpack webpack-cli webpack-dev-server ts-loader css-loader style-loader mini-css-extract-plugin html-webpack-plugin axios",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#getting-started",
    "href": "webpack.html#getting-started",
    "title": "Webpack",
    "section": "",
    "text": "sudo apt install npm\n\n\n\nnode -v\nnpm -v\n\n\n\n\nnpm init -y\n\n\n\nnpm install --save-dev webpack webpack-cli webpack-dev-server\nnpm install --save-dev ts-loader css-loader style-loader sass sass-loader\nnpm install --save-dev html-webpack-plugin mini-css-extract-plugin\n\nnpm install --save bootstrap sass typescript webpack webpack-cli webpack-dev-server ts-loader css-loader style-loader mini-css-extract-plugin html-webpack-plugin axios",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#what-is-webpack",
    "href": "webpack.html#what-is-webpack",
    "title": "Webpack",
    "section": "1. What is Webpack?",
    "text": "1. What is Webpack?\nWebpack is a tool that: - Bundles JavaScript files into a single file (or multiple files). - Transforms and optimizes other assets (CSS, images, fonts, etc.) into formats browsers can use. - Supports advanced features like code splitting, tree-shaking, and lazy loading.",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#key-features",
    "href": "webpack.html#key-features",
    "title": "Webpack",
    "section": "2. Key Features",
    "text": "2. Key Features\n\na) Module Bundling\n\nWebpack treats everything in your project as a module (JavaScript, CSS, images, etc.).\nSupports ES Modules (import/export) and CommonJS (require).\n\n\n\nb) Loaders\n\nLoaders transform files into modules (e.g., convert SCSS to CSS or TypeScript to JavaScript).\nExamples:\n\n  - babel loader: Transpiles modern JavaScript (ES6+) to browser-compatible JavaScript.\n  - css loader: Enables importing CSS in JavaScript.\n\n\nc) Plugins\n\nPlugins extend Webpack’s functionality (e.g., HTML generation, code optimization).\nExamples:\n\n  - html-webpack-plugin: Injects bundled JavaScript into an HTML template.\n  - terser-webpack-plugin: Optimizes and minifies JavaScript.\n\n\nd) Code Splitting\n\nSplits your code into smaller chunks to reduce the size of JavaScript files and improve load times.\n\n\n\ne) Tree Shaking\n\nRemoves unused code from your final bundle using ES6 module syntax.\n\n\n\nf) Hot Module Replacement (HMR)\n\nEnables live updating of modules in the browser without a full reload.",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#how-webpack-works",
    "href": "webpack.html#how-webpack-works",
    "title": "Webpack",
    "section": "3. How Webpack Works",
    "text": "3. How Webpack Works\n\na) Entry\nThe starting point of your application. Webpack begins building the dependency graph from here.\nExample:\nmodule.exports = {\n  entry: './src/index.js',\n};\n\n\nb) Output\nSpecifies the location and name of the bundled files.\nExample:\nmodule.exports = {\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n};\n\n\nc) Loaders\nProcess non-JavaScript files (e.g., CSS, images, TypeScript).\nExample:\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,  // Matches .css files\n        use: ['style-loader', 'css-loader'], // Processes CSS\n      },\n    ],\n  },\n};\n\n\nd) Plugins\nExtend Webpack’s functionality (e.g., optimization, asset management).\nExample:\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n    }),\n  ],\n};\n\n\ne) Mode\nDefines the environment: - development: Focuses on fast builds and debugging (includes source maps). - production: Optimizes the output for performance.\nExample:\nmodule.exports = {\n  mode: 'production', // or 'development'\n};",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#installation-and-setup",
    "href": "webpack.html#installation-and-setup",
    "title": "Webpack",
    "section": "4. Installation and Setup",
    "text": "4. Installation and Setup\n\na) Install Webpack\n\nInstall Webpack and Webpack CLI:\nnpm install webpack webpack-cli --save-dev\nCreate a Webpack configuration file (webpack.config.js):\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n};\nAdd scripts to package.json:\n\"scripts\": {\n  \"build\": \"webpack\"\n}\nRun Webpack:\nnpm run build\n\n\n\nb) Install Loaders\nInstall loaders to handle CSS, images, etc.:\nnpm install style-loader css-loader --save-dev\nAdd to webpack.config.js:\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n};",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#advanced-features",
    "href": "webpack.html#advanced-features",
    "title": "Webpack",
    "section": "5. Advanced Features",
    "text": "5. Advanced Features\n\na) Code Splitting\nSplit code into separate files for better performance. Example using dynamic imports:\nimport('./module.js').then((module) =&gt; {\n  module.default();\n});\n\n\nb) Tree Shaking\nRemove unused code:\nmodule.exports = {\n  mode: 'production',\n};\n\n\nc) Lazy Loading\nLoad parts of your app on demand:\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', () =&gt; {\n  import('./myModule.js').then((module) =&gt; {\n    module.doSomething();\n  });\n});\n\n\nd) Dev Server\nUse webpack-dev-server for live reloading during development: 1. Install: bash    npm install webpack-dev-server --save-dev\n\nAdd to webpack.config.js:\ndevServer: {\n  contentBase: './dist',\n  hot: true,\n},\nRun:\nnpx webpack serve",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#popular-plugins",
    "href": "webpack.html#popular-plugins",
    "title": "Webpack",
    "section": "6. Popular Plugins",
    "text": "6. Popular Plugins\n\nhtml-webpack-plugin: Automatically generates an HTML file with the correct script tags.\nmini-css-extract-plugin: Extracts CSS into separate files.\nclean-webpack-plugin: Cleans the dist folder before each build.\nterser-webpack-plugin: Minifies JavaScript files.\ncopy-webpack-plugin: Copies files to the dist folder.",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#example-configuration",
    "href": "webpack.html#example-configuration",
    "title": "Webpack",
    "section": "7. Example Configuration",
    "text": "7. Example Configuration\nHere’s a complete webpack.config.js for a basic project:\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.(png|jpg|gif)$/,\n        type: 'asset/resource',\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n    }),\n  ],\n  mode: 'development',\n  devServer: {\n    static: './dist',\n    hot: true,\n  },\n};",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#alternatives-to-webpack",
    "href": "webpack.html#alternatives-to-webpack",
    "title": "Webpack",
    "section": "8. Alternatives to Webpack",
    "text": "8. Alternatives to Webpack\nWhile Webpack is powerful, there are alternatives for specific needs: - Vite: Focused on fast builds and simplicity. - Rollup: Ideal for library bundling. - Parcel: Zero-config bundler with simpler defaults. - Esbuild: Extremely fast bundler optimized for performance.",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#pros-and-cons",
    "href": "webpack.html#pros-and-cons",
    "title": "Webpack",
    "section": "9. Pros and Cons",
    "text": "9. Pros and Cons\n\nPros\n\nHighly configurable for complex projects.\nSupports advanced features like HMR and tree-shaking.\nLarge ecosystem of plugins and loaders.\n\n\n\nCons\n\nCan be overwhelming for beginners.\nConfiguration can become verbose for simple projects.",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "webpack.html#resources",
    "href": "webpack.html#resources",
    "title": "Webpack",
    "section": "10. Resources",
    "text": "10. Resources\n\nOfficial Webpack Documentation\nWebpack Academy\nWebpack GitHub Repository\n\n\nWebpack is a versatile tool that can handle complex dependency graphs, optimize assets, and improve performance. While it has a learning curve, mastering Webpack provides significant benefits for managing modern web projects efficiently.",
    "crumbs": [
      "Blog",
      "Webpack"
    ]
  },
  {
    "objectID": "Flutter/dart.html",
    "href": "Flutter/dart.html",
    "title": "Dart",
    "section": "",
    "text": "void main() {\n  for (int i = 0; i &lt; 10; i++) {\n    print('hello ${i + 1}');\n  }\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#for-loop",
    "href": "Flutter/dart.html#for-loop",
    "title": "Dart",
    "section": "",
    "text": "void main() {\n  for (int i = 0; i &lt; 10; i++) {\n    print('hello ${i + 1}');\n  }\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#variables",
    "href": "Flutter/dart.html#variables",
    "title": "Dart",
    "section": "Variables",
    "text": "Variables\n\nInteger\nvoid main() {\n  int age = 30;\n  print(age);\n}\n\n\nString\nvoid main() {\n  String name = 'ben';\n  name = 'ken';\n  print(name);\n}\n\n\nBool\nvoid main() {\n  bool isNight = false;\n  print(isNight);\n}\n\n\nDynamic variable\nvoid main() {\n  dynamic name = 'ben';\n  name = 30;\n  print(name);\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#functions",
    "href": "Flutter/dart.html#functions",
    "title": "Dart",
    "section": "Functions",
    "text": "Functions\nvoid main() {\n  String greet = greeting();\n  int age = getAge();\n  print('${greet} and age:${age}');\n}\n\nString greeting() {\n  return 'hello';\n}\n\nint getAge() {\n  return 30;\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#function-simplified",
    "href": "Flutter/dart.html#function-simplified",
    "title": "Dart",
    "section": "Function simplified",
    "text": "Function simplified\nvoid main() {\n  String greet = greeting();\n  int age = getAge();\n  print('${greet} and age:${age}');\n}\n\nString greeting() =&gt; 'hello';\n\nint getAge() =&gt; 30;",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#list-array",
    "href": "Flutter/dart.html#list-array",
    "title": "Dart",
    "section": "List (array)",
    "text": "List (array)\nvoid main() {\n  List&lt;String&gt; names = ['ben', 'kim', 'charlie'];\n  \n  names.add('jeff');\n  names.remove('kim');\n  \n  print(names);\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#classes",
    "href": "Flutter/dart.html#classes",
    "title": "Dart",
    "section": "Classes",
    "text": "Classes\nvoid main() {\n  User user1 = User('ben', 25);\n  print(user1.username);\n  user1.login();\n}\n\n\nclass User {\n  late String username;\n  late int age;\n  \n  User(String name, int age){\n    this.username = name;\n    this.age = age;\n  }\n  \n  void login() {\n    print('user logged in');\n  }\n  \n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/dart.html#inheritance",
    "href": "Flutter/dart.html#inheritance",
    "title": "Dart",
    "section": "Inheritance",
    "text": "Inheritance\nclass SuperUser extends User {\n  SuperUser(String username, int age):super(username, age);\n    \n  void publish() {\n    print('Super user ${this.username}');\n  }\n}",
    "crumbs": [
      "Blog",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Flutter/riverpod.html",
    "href": "Flutter/riverpod.html",
    "title": "Riverpod",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Blog",
      "Flutter",
      "Riverpod"
    ]
  },
  {
    "objectID": "1_google_analytics.html",
    "href": "1_google_analytics.html",
    "title": "Google Analytics",
    "section": "",
    "text": "Go to Google Analytics\nClick Admin &gt; Create Account &gt; Create Property\nChoose GA4 (Google Analytics 4)\nSet up a new Web Stream and copy the Measurement ID (format: G-XXXXXXXXXX)\n\n\n\n\n\n\n\n\n\nOpen your base template (base.html):\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;My Django App&lt;/title&gt;\n    &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n\n      gtag('config', 'G-XXXXXXXXXX');\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\nReplace G-XXXXXXXXXX with your Google Analytics Measurement ID.\n\nReload the page and check Google Analytics Real-Time Dashboard.\n\n\n\n\nInstead of hardcoding the ID, you can use Django settings.\n\nIn settings.py:\n\nGOOGLE_ANALYTICS_ID = \"G-XXXXXXXXXX\"\n\nIn base.html:\n\n{% if GOOGLE_ANALYTICS_ID %}\n&lt;script async src=\"https://www.googletagmanager.com/gtag/js?id={{ GOOGLE_ANALYTICS_ID }}\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', '{{ GOOGLE_ANALYTICS_ID }}');\n&lt;/script&gt;\n{% endif %}\n\nModify context_processors.py:\n\ndef google_analytics(request):\n    from django.conf import settings\n    return {\"GOOGLE_ANALYTICS_ID\": getattr(settings, \"GOOGLE_ANALYTICS_ID\", \"\")}\n\nAdd context processor in settings.py:\n\nTEMPLATES = [\n    {\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"your_project.context_processors.google_analytics\",\n            ],\n        },\n    },\n]\nNow, Django dynamically injects the Google Analytics ID.\n\n\n\n\n\nGoogle Analytics allows you to track specific user actions.\n\n\n&lt;button onclick=\"gtag('event', 'button_click', {'event_category': 'User Actions', 'event_label': 'Signup Button'});\"&gt;\n    Sign Up\n&lt;/button&gt;\nNow, this event will appear in Google Analytics &gt; Events.\n\n\n\nGoogle Analytics automatically tracks page views, but if using AJAX-based navigation, manually track:\n&lt;script&gt;\n  gtag('config', '{{ GOOGLE_ANALYTICS_ID }}', {'page_path': '{{ request.path }}'});\n&lt;/script&gt;\n\n\n\n\n\nGoogle Tag Manager (GTM) allows you to manage GA and other tracking scripts in one place.\n\nGet GTM Container ID (e.g., GTM-XXXXXXX)\nAdd this to base.html:\n\n&lt;head&gt;\n    &lt;script async src=\"https://www.googletagmanager.com/gtm.js?id=GTM-XXXXXXX\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;noscript&gt;\n        &lt;iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX\"\n                height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"&gt;&lt;/iframe&gt;\n    &lt;/noscript&gt;\n&lt;/body&gt;\nNow, manage tracking via Google Tag Manager instead of editing HTML.\n\n\n\n\nTo track authenticated users:\n&lt;script&gt;\n  gtag('set', {'user_id': '{{ request.user.id }}'}); \n&lt;/script&gt;\nThis enables user tracking in Google Analytics &gt; User Explorer.\n\n\n\n\nTo track Core Web Vitals:\n&lt;script&gt;\n  gtag('event', 'LCP', {'event_category': 'Performance', 'value': 2.5});\n  gtag('event', 'FID', {'event_category': 'Performance', 'value': 0.1});\n  gtag('event', 'CLS', {'event_category': 'Performance', 'value': 0.03});\n&lt;/script&gt;\nView results under GA &gt; Reports &gt; Performance.\n\n\n\n\nIf you want to track admin panel usage, add:\n{% if request.user.is_staff %}\n&lt;script&gt;\n  gtag('config', '{{ GOOGLE_ANALYTICS_ID }}', {'user_id': '{{ request.user.id }}', 'custom_dimension': 'admin_user'});\n&lt;/script&gt;\n{% endif %}\nNow, admin activity is logged separately.\n\n\n\n\n\n\n\nInstall Tag Assistant\nCheck if GA is loading correctly.\n\n\n\n\n&lt;script&gt;\n  gtag('config', 'G-XXXXXXXXXX', {'debug_mode': true});\n&lt;/script&gt;\n\n\n\nGo to Google Analytics &gt; Reports &gt; Realtime.\n\n\n\n\n\nInstead of client-side tracking, send analytics data via Django views.\n\n\nimport requests\n\nGA_ENDPOINT = \"https://www.google-analytics.com/mp/collect\"\nGA_ID = \"G-XXXXXXXXXX\"\nGA_SECRET = \"YOUR_MEASUREMENT_PROTOCOL_SECRET\"\n\ndef track_event(event_name, user_id=None):\n    payload = {\n        \"client_id\": user_id or \"anonymous\",\n        \"events\": [{\"name\": event_name}]\n    }\n    headers = {\"Content-Type\": \"application/json\"}\n    requests.post(f\"{GA_ENDPOINT}?measurement_id={GA_ID}&api_secret={GA_SECRET}\", json=payload, headers=headers)\n\n# Usage\ntrack_event(\"user_logged_in\", user_id=\"12345\")\nNow, backend events can be tracked without JavaScript.\n\n\n\n\n\n\n\n\nFeature\nGoogle Analytics\nDjango Debug Toolbar\nMatomo\n\n\n\n\nUser Tracking\n✅ Yes\n❌ No\n✅ Yes\n\n\nPageviews\n✅ Yes\n✅ Yes\n✅ Yes\n\n\nEvent Tracking\n✅ Yes\n❌ No\n✅ Yes\n\n\nRequires JavaScript\n✅ Yes\n❌ No\n❌ No\n\n\nGDPR Compliant\n❌ No\n✅ Yes\n✅ Yes\n\n\n\nFor privacy-focused apps, consider Matomo (self-hosted).\n\n\n\n\n✔ Basic Tracking: Add GA script in base.html\n✔ Custom Events: Track clicks, logins, form submissions\n✔ Google Tag Manager: Manage tracking codes centrally\n✔ Authenticated Users: Send user IDs to GA\n✔ Server-Side Tracking: Use Django views for analytics\nNow, your Django app is fully integrated with Google Analytics! 🚀",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#setting-up-google-analytics",
    "href": "1_google_analytics.html#setting-up-google-analytics",
    "title": "Google Analytics",
    "section": "",
    "text": "Go to Google Analytics\nClick Admin &gt; Create Account &gt; Create Property\nChoose GA4 (Google Analytics 4)\nSet up a new Web Stream and copy the Measurement ID (format: G-XXXXXXXXXX)",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#adding-google-analytics-to-django",
    "href": "1_google_analytics.html#adding-google-analytics-to-django",
    "title": "Google Analytics",
    "section": "",
    "text": "Open your base template (base.html):\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;My Django App&lt;/title&gt;\n    &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n\n      gtag('config', 'G-XXXXXXXXXX');\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\nReplace G-XXXXXXXXXX with your Google Analytics Measurement ID.\n\nReload the page and check Google Analytics Real-Time Dashboard.\n\n\n\n\nInstead of hardcoding the ID, you can use Django settings.\n\nIn settings.py:\n\nGOOGLE_ANALYTICS_ID = \"G-XXXXXXXXXX\"\n\nIn base.html:\n\n{% if GOOGLE_ANALYTICS_ID %}\n&lt;script async src=\"https://www.googletagmanager.com/gtag/js?id={{ GOOGLE_ANALYTICS_ID }}\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', '{{ GOOGLE_ANALYTICS_ID }}');\n&lt;/script&gt;\n{% endif %}\n\nModify context_processors.py:\n\ndef google_analytics(request):\n    from django.conf import settings\n    return {\"GOOGLE_ANALYTICS_ID\": getattr(settings, \"GOOGLE_ANALYTICS_ID\", \"\")}\n\nAdd context processor in settings.py:\n\nTEMPLATES = [\n    {\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"your_project.context_processors.google_analytics\",\n            ],\n        },\n    },\n]\nNow, Django dynamically injects the Google Analytics ID.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#tracking-custom-events",
    "href": "1_google_analytics.html#tracking-custom-events",
    "title": "Google Analytics",
    "section": "",
    "text": "Google Analytics allows you to track specific user actions.\n\n\n&lt;button onclick=\"gtag('event', 'button_click', {'event_category': 'User Actions', 'event_label': 'Signup Button'});\"&gt;\n    Sign Up\n&lt;/button&gt;\nNow, this event will appear in Google Analytics &gt; Events.\n\n\n\nGoogle Analytics automatically tracks page views, but if using AJAX-based navigation, manually track:\n&lt;script&gt;\n  gtag('config', '{{ GOOGLE_ANALYTICS_ID }}', {'page_path': '{{ request.path }}'});\n&lt;/script&gt;",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#google-tag-manager-integration",
    "href": "1_google_analytics.html#google-tag-manager-integration",
    "title": "Google Analytics",
    "section": "",
    "text": "Google Tag Manager (GTM) allows you to manage GA and other tracking scripts in one place.\n\nGet GTM Container ID (e.g., GTM-XXXXXXX)\nAdd this to base.html:\n\n&lt;head&gt;\n    &lt;script async src=\"https://www.googletagmanager.com/gtm.js?id=GTM-XXXXXXX\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;noscript&gt;\n        &lt;iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX\"\n                height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"&gt;&lt;/iframe&gt;\n    &lt;/noscript&gt;\n&lt;/body&gt;\nNow, manage tracking via Google Tag Manager instead of editing HTML.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#tracking-logged-in-users-in-django",
    "href": "1_google_analytics.html#tracking-logged-in-users-in-django",
    "title": "Google Analytics",
    "section": "",
    "text": "To track authenticated users:\n&lt;script&gt;\n  gtag('set', {'user_id': '{{ request.user.id }}'}); \n&lt;/script&gt;\nThis enables user tracking in Google Analytics &gt; User Explorer.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#monitoring-performance-lcp-fid-cls",
    "href": "1_google_analytics.html#monitoring-performance-lcp-fid-cls",
    "title": "Google Analytics",
    "section": "",
    "text": "To track Core Web Vitals:\n&lt;script&gt;\n  gtag('event', 'LCP', {'event_category': 'Performance', 'value': 2.5});\n  gtag('event', 'FID', {'event_category': 'Performance', 'value': 0.1});\n  gtag('event', 'CLS', {'event_category': 'Performance', 'value': 0.03});\n&lt;/script&gt;\nView results under GA &gt; Reports &gt; Performance.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#google-analytics-in-django-admin",
    "href": "1_google_analytics.html#google-analytics-in-django-admin",
    "title": "Google Analytics",
    "section": "",
    "text": "If you want to track admin panel usage, add:\n{% if request.user.is_staff %}\n&lt;script&gt;\n  gtag('config', '{{ GOOGLE_ANALYTICS_ID }}', {'user_id': '{{ request.user.id }}', 'custom_dimension': 'admin_user'});\n&lt;/script&gt;\n{% endif %}\nNow, admin activity is logged separately.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#testing-debugging",
    "href": "1_google_analytics.html#testing-debugging",
    "title": "Google Analytics",
    "section": "",
    "text": "Install Tag Assistant\nCheck if GA is loading correctly.\n\n\n\n\n&lt;script&gt;\n  gtag('config', 'G-XXXXXXXXXX', {'debug_mode': true});\n&lt;/script&gt;\n\n\n\nGo to Google Analytics &gt; Reports &gt; Realtime.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#server-side-tracking-with-django",
    "href": "1_google_analytics.html#server-side-tracking-with-django",
    "title": "Google Analytics",
    "section": "",
    "text": "Instead of client-side tracking, send analytics data via Django views.\n\n\nimport requests\n\nGA_ENDPOINT = \"https://www.google-analytics.com/mp/collect\"\nGA_ID = \"G-XXXXXXXXXX\"\nGA_SECRET = \"YOUR_MEASUREMENT_PROTOCOL_SECRET\"\n\ndef track_event(event_name, user_id=None):\n    payload = {\n        \"client_id\": user_id or \"anonymous\",\n        \"events\": [{\"name\": event_name}]\n    }\n    headers = {\"Content-Type\": \"application/json\"}\n    requests.post(f\"{GA_ENDPOINT}?measurement_id={GA_ID}&api_secret={GA_SECRET}\", json=payload, headers=headers)\n\n# Usage\ntrack_event(\"user_logged_in\", user_id=\"12345\")\nNow, backend events can be tracked without JavaScript.",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#comparing-django-analytics-tools",
    "href": "1_google_analytics.html#comparing-django-analytics-tools",
    "title": "Google Analytics",
    "section": "",
    "text": "Feature\nGoogle Analytics\nDjango Debug Toolbar\nMatomo\n\n\n\n\nUser Tracking\n✅ Yes\n❌ No\n✅ Yes\n\n\nPageviews\n✅ Yes\n✅ Yes\n✅ Yes\n\n\nEvent Tracking\n✅ Yes\n❌ No\n✅ Yes\n\n\nRequires JavaScript\n✅ Yes\n❌ No\n❌ No\n\n\nGDPR Compliant\n❌ No\n✅ Yes\n✅ Yes\n\n\n\nFor privacy-focused apps, consider Matomo (self-hosted).",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "1_google_analytics.html#conclusion",
    "href": "1_google_analytics.html#conclusion",
    "title": "Google Analytics",
    "section": "",
    "text": "✔ Basic Tracking: Add GA script in base.html\n✔ Custom Events: Track clicks, logins, form submissions\n✔ Google Tag Manager: Manage tracking codes centrally\n✔ Authenticated Users: Send user IDs to GA\n✔ Server-Side Tracking: Use Django views for analytics\nNow, your Django app is fully integrated with Google Analytics! 🚀",
    "crumbs": [
      "Blog",
      "Google Analytics"
    ]
  },
  {
    "objectID": "fasthtml.html",
    "href": "fasthtml.html",
    "title": "fastHTML",
    "section": "",
    "text": "pip install python-fasthtml\n\nfrom fasthtml.common import *\n\n\n# Assuming the file Front_end/app.py exists and contains some content\nfile_path = 'Front_end/app.py'\n\n# Reading and displaying the content of the file\nwith open(file_path, 'r') as file:\n    file_content = file.read()\n\n\nprint(file_content)\n\nfrom fasthtml.common import *\n\napp,rt = fast_app()\n\n\ndef NumList(i):\n    return Ul(*[Li(o) for o in range(i)])\n\n\n\n@rt('/')\ndef get(): \n    nums = NumList(5)\n    return Titled('Greeting',\n                  Div(nums, id='stuff', hx_get=\"/change\"),\n                 )\n\n@rt('/change')\ndef get(): \n    return Div(P('Change is good!'),\n               P(A('Home', href=\"/\"))\n              )\n\n\nserve()\n\n\n\nfast_app??\n\n\nSignature:\nfast_app(\n    db: Optional[str] = None,\n    render: Optional[&lt;built-in function callable&gt;] = None,\n    hdrs: Optional[tuple] = None,\n    ftrs: Optional[tuple] = None,\n    tbls: Optional[dict] = None,\n    before: Optional[tuple] = None,\n    middleware: Optional[tuple] = None,\n    live: bool = False,\n    debug: bool = False,\n    routes: Optional[tuple] = None,\n    exception_handlers: Optional[dict] = None,\n    on_startup: Optional[&lt;built-in function callable&gt;] = None,\n    on_shutdown: Optional[&lt;built-in function callable&gt;] = None,\n    lifespan: Optional[&lt;built-in function callable&gt;] = None,\n    default_hdrs=True,\n    pico: Optional[bool] = None,\n    ws_hdr: bool = False,\n    secret_key: Optional[str] = None,\n    key_fname: str = '.sesskey',\n    session_cookie: str = 'session_',\n    max_age: int = 31536000,\n    sess_path: str = '/',\n    same_site: str = 'lax',\n    sess_https_only: bool = False,\n    sess_domain: Optional[str] = None,\n    bodykw: Optional[dict] = None,\n    **kwargs,\n)\nDocstring: &lt;no docstring&gt;\nSource:   \ndef fast_app(\n        db:Optional[str]=None, # Database file name, if needed\n        render:Optional[callable]=None, # Function used to render default database class\n        hdrs:Optional[tuple]=None, # Additional FT elements to add to &lt;HEAD&gt;\n        ftrs:Optional[tuple]=None, # Additional FT elements to add to end of &lt;BODY&gt;\n        tbls:Optional[dict]=None, # Mapping from DB table names to dict table definitions\n        before:Optional[tuple]=None, # Functions to call prior to calling handler\n        middleware:Optional[tuple]=None, # Standard Starlette middleware\n        live:bool=False, # Enable live reloading\n        debug:bool=False, # Passed to Starlette, indicating if debug tracebacks should be returned on errors\n        routes:Optional[tuple]=None, # Passed to Starlette\n        exception_handlers:Optional[dict]=None, # Passed to Starlette\n        on_startup:Optional[callable]=None, # Passed to Starlette\n        on_shutdown:Optional[callable]=None, # Passed to Starlette\n        lifespan:Optional[callable]=None, # Passed to Starlette\n        default_hdrs=True, # Include default FastHTML headers such as HTMX script?\n        pico:Optional[bool]=None, # Include PicoCSS header?\n        ws_hdr:bool=False, # Include HTMX websocket extension header?\n        secret_key:Optional[str]=None, # Signing key for sessions\n        key_fname:str='.sesskey', # Session cookie signing key file name\n        session_cookie:str='session_', # Session cookie name\n        max_age:int=365*24*3600, # Session cookie expiry time\n        sess_path:str='/', # Session cookie path\n        same_site:str='lax', # Session cookie same site policy\n        sess_https_only:bool=False, # Session cookie HTTPS only?\n        sess_domain:Optional[str]=None, # Session cookie domain\n        bodykw:Optional[dict]=None,\n        **kwargs):\n    h = (picolink,) if pico or (pico is None and default_hdrs) else ()\n    if hdrs: h += tuple(hdrs)\n    app_cls = FastHTMLWithLiveReload if live else FastHTML\n    app = app_cls(hdrs=h, ftrs=ftrs, before=before, middleware=middleware, debug=debug, routes=routes, exception_handlers=exception_handlers,\n                  on_startup=on_startup, on_shutdown=on_shutdown, lifespan=lifespan, default_hdrs=default_hdrs, secret_key=secret_key,\n                  session_cookie=session_cookie, max_age=max_age, sess_path=sess_path, same_site=same_site, sess_https_only=sess_https_only,\n                  sess_domain=sess_domain, key_fname=key_fname, ws_hdr=ws_hdr, **(bodykw or {}))\n    @app.route(\"/{fname:path}.{ext:static}\")\n    async def get(fname:str, ext:str): return FileResponse(f'{fname}.{ext}')\n    if not db: return app,app.route\n    db = database(db)\n    if not tbls: tbls={}\n    if kwargs:\n        if isinstance(first(kwargs.values()), dict): tbls = kwargs\n        else:\n            kwargs['render'] = render\n            tbls['items'] = kwargs\n    dbtbls = [get_tbl(db.t, k, v) for k,v in tbls.items()]\n    if len(dbtbls)==1: dbtbls=dbtbls[0]\n    return app,app.route,*dbtbls\nFile:      ~/miniconda3/envs/pfast/lib/python3.12/site-packages/fasthtml/fastapp.py\nType:      function\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "fastHTML"
    ]
  },
  {
    "objectID": "2_gradio.html",
    "href": "2_gradio.html",
    "title": "Gradio",
    "section": "",
    "text": "!pip list | grep gradio\n\ngradio                              4.27.0\ngradio_client                       0.15.1",
    "crumbs": [
      "Blog",
      "Gradio"
    ]
  },
  {
    "objectID": "2_gradio.html#basic-interface-text-slider---text",
    "href": "2_gradio.html#basic-interface-text-slider---text",
    "title": "Gradio",
    "section": "Basic Interface: text, slider -> text",
    "text": "Basic Interface: text, slider -&gt; text\n\nimport gradio as gr\n\ndef greet(name, intensity):\n    return \"Hello, \" + name + \"!\" * int(intensity)\n\ndemo = gr.Interface(\n    fn=greet,\n    inputs=[\"text\", \"slider\"],\n    outputs=[\"text\"],\n)\n\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7860\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\ngr.Interface(\n    fn: 'Callable',\n    inputs: 'str | Component | list[str | Component] | None',\n    outputs: 'str | Component | list[str | Component] | None',\n    examples: 'list[Any] | list[list[Any]] | str | None' = None,\n    cache_examples: \"bool | Literal['lazy'] | None\" = None,\n    examples_per_page: 'int' = 10,\n    live: 'bool' = False,\n    title: 'str | None' = None,\n    description: 'str | None' = None,\n    article: 'str | None' = None,\n    thumbnail: 'str | None' = None,\n    theme: 'Theme | str | None' = None,\n    css: 'str | None' = None,\n    allow_flagging: \"Literal['never'] | Literal['auto'] | Literal['manual'] | None\" = None,\n    flagging_options: 'list[str] | list[tuple[str, str]] | None' = None,\n    flagging_dir: 'str' = 'flagged',\n    flagging_callback: 'FlaggingCallback | None' = None,\n    analytics_enabled: 'bool | None' = None,\n    batch: 'bool' = False,\n    max_batch_size: 'int' = 4,\n    api_name: 'str | Literal[False] | None' = 'predict',\n    _api_mode: 'bool' = False,\n    allow_duplication: 'bool' = False,\n    concurrency_limit: \"int | None | Literal['default']\" = 'default',\n    js: 'str | None' = None,\n    head: 'str | None' = None,\n    additional_inputs: 'str | Component | list[str | Component] | None' = None,\n    additional_inputs_accordion: 'str | Accordion | None' = None,\n    *,\n    submit_btn: 'str | Button' = 'Submit',\n    stop_btn: 'str | Button' = 'Stop',\n    clear_btn: 'str | Button' = 'Clear',\n    delete_cache: 'tuple[int, int] | None' = None,\n    **kwargs,\n)",
    "crumbs": [
      "Blog",
      "Gradio"
    ]
  },
  {
    "objectID": "2_gradio.html#image-output-slider---image",
    "href": "2_gradio.html#image-output-slider---image",
    "title": "Gradio",
    "section": "Image output: slider -> image",
    "text": "Image output: slider -&gt; image\n\nimport gradio as gr\nimport numpy as np\nimport time\n\ndef fake_diffusion(steps):\n    rng = np.random.default_rng()\n    for i in range(steps):\n        time.sleep(1)\n        image = rng.random(size=(600, 600, 3))\n        yield image\n    image = np.ones((1000,1000,3), np.uint8)\n    image[:] = [255, 124, 0]\n    yield image\n\n\ndemo = gr.Interface(fake_diffusion,\n                    inputs=gr.Slider(1, 10, 3, step=1),\n                    outputs=\"image\")\n\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7861\n\nTo create a public link, set `share=True` in `launch()`.",
    "crumbs": [
      "Blog",
      "Gradio"
    ]
  },
  {
    "objectID": "2_gradio.html#progress-bar-text---text",
    "href": "2_gradio.html#progress-bar-text---text",
    "title": "Gradio",
    "section": "Progress bar: text -> text",
    "text": "Progress bar: text -&gt; text\n\nimport gradio as gr\nimport time\n\ndef slowly_reverse(word, progress=gr.Progress()):\n    progress(0, desc=\"Starting\")\n    time.sleep(1)\n    progress(0.05)\n    new_string = \"\"\n    for letter in progress.tqdm(word, desc=\"Reversing\"):\n        time.sleep(0.25)\n        new_string = letter + new_string\n    return new_string\n\ndemo = gr.Interface(slowly_reverse, gr.Text(), gr.Text())\n\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7862\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\n\nimport gradio as gr\n\nsecret_word = \"gradio\"\n\nwith gr.Blocks() as demo:    \n    used_letters_var = gr.State([])\n    with gr.Row() as row:\n        with gr.Column():\n            input_letter = gr.Textbox(label=\"Enter letter\")\n            btn = gr.Button(\"Guess Letter\")\n        with gr.Column():\n            hangman = gr.Textbox(\n                label=\"Hangman\",\n                value=\"_\"*len(secret_word)\n            )\n            used_letters_box = gr.Textbox(label=\"Used Letters\")\n\n    def guess_letter(letter, used_letters):\n        used_letters.append(letter)\n        answer = \"\".join([\n            (letter if letter in used_letters else \"_\")\n            for letter in secret_word\n        ])\n        return {\n            used_letters_var: used_letters,\n            used_letters_box: \", \".join(used_letters),\n            hangman: answer\n        }\n    btn.click(\n        guess_letter, \n        [input_letter, used_letters_var],\n        [used_letters_var, used_letters_box, hangman]\n        )\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7863\n\nTo create a public link, set `share=True` in `launch()`.",
    "crumbs": [
      "Blog",
      "Gradio"
    ]
  },
  {
    "objectID": "2_gradio.html#audio-audio---audio",
    "href": "2_gradio.html#audio-audio---audio",
    "title": "Gradio",
    "section": "Audio: audio -> audio",
    "text": "Audio: audio -&gt; audio\n\nimport gradio as gr\nfrom pydub import AudioSegment\nfrom time import sleep\n\nwith gr.Blocks() as demo:\n    input_audio = gr.Audio(label=\"Input Audio\", type=\"filepath\", format=\"mp3\")\n    with gr.Row():\n        with gr.Column():\n            stream_as_file_btn = gr.Button(\"Stream as File\")\n            format = gr.Radio([\"wav\", \"mp3\"], value=\"wav\", label=\"Format\")\n            stream_as_file_output = gr.Audio(streaming=True)\n\n            def stream_file(audio_file, format):\n                audio = AudioSegment.from_file(audio_file)\n                i = 0\n                chunk_size = 1000\n                while chunk_size * i &lt; len(audio):\n                    chunk = audio[chunk_size * i : chunk_size * (i + 1)]\n                    i += 1\n                    if chunk:\n                        file = f\"/tmp/{i}.{format}\"\n                        chunk.export(file, format=format)\n                        yield file\n                        sleep(0.5)\n\n            stream_as_file_btn.click(\n                stream_file, [input_audio, format], stream_as_file_output\n            )\n\n            gr.Examples(\n                [[\"audio/cantina.wav\", \"wav\"], [\"audio/cantina.wav\", \"mp3\"]],\n                [input_audio, format],\n                fn=stream_file,\n                outputs=stream_as_file_output,\n            )\n\n        with gr.Column():\n            stream_as_bytes_btn = gr.Button(\"Stream as Bytes\")\n            stream_as_bytes_output = gr.Audio(format=\"bytes\", streaming=True)\n\n            def stream_bytes(audio_file):\n                chunk_size = 20_000\n                with open(audio_file, \"rb\") as f:\n                    while True:\n                        chunk = f.read(chunk_size)\n                        if chunk:\n                            yield chunk\n                            sleep(1)\n                        else:\n                            break\n            stream_as_bytes_btn.click(stream_bytes, input_audio, stream_as_bytes_output)\n\nif __name__ == \"__main__\":\n    demo.queue().launch()\n\nRunning on local URL:  http://127.0.0.1:7865\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/queueing.py\", line 527, in process_events\n    response = await route_utils.call_process_api(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/route_utils.py\", line 261, in call_process_api\n    output = await app.get_blocks().process_api(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1784, in process_api\n    inputs = await self.preprocess_data(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1506, in preprocess_data\n    processed_input.append(block.preprocess(inputs_cached))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/components/audio.py\", line 231, in preprocess\n    processing_utils.audio_to_file(\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/processing_utils.py\", line 560, in audio_to_file\n    file = audio.export(filename, format=format)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/pydub/audio_segment.py\", line 970, in export\n    raise CouldntEncodeError(\npydub.exceptions.CouldntEncodeError: Encoding failed. ffmpeg/avlib returned error code: 127\n\nCommand:['ffmpeg', '-y', '-f', 'wav', '-i', '/tmp/tmplaiefr8j', '-f', 'mp3', '/tmp/tmpiojnrpsx']\n\nOutput from ffmpeg/avlib:\n\nffmpeg: error while loading shared libraries: libopenh264.so.5: cannot open shared object file: No such file or directory\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/queueing.py\", line 527, in process_events\n    response = await route_utils.call_process_api(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/route_utils.py\", line 261, in call_process_api\n    output = await app.get_blocks().process_api(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1784, in process_api\n    inputs = await self.preprocess_data(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1506, in preprocess_data\n    processed_input.append(block.preprocess(inputs_cached))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/components/audio.py\", line 231, in preprocess\n    processing_utils.audio_to_file(\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/processing_utils.py\", line 560, in audio_to_file\n    file = audio.export(filename, format=format)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/pydub/audio_segment.py\", line 970, in export\n    raise CouldntEncodeError(\npydub.exceptions.CouldntEncodeError: Encoding failed. ffmpeg/avlib returned error code: 127\n\nCommand:['ffmpeg', '-y', '-f', 'wav', '-i', '/tmp/tmpuqq4b20d', '-f', 'mp3', '/tmp/tmphx041ptn']\n\nOutput from ffmpeg/avlib:\n\nffmpeg: error while loading shared libraries: libopenh264.so.5: cannot open shared object file: No such file or directory\n\n\n\n\nimport torch\n\nmodel = torch.hub.load('pytorch/vision:v0.6.0', 'resnet18', pretrained=True).eval()\n\nDownloading: \"https://github.com/pytorch/vision/zipball/v0.6.0\" to /home/ben/.cache/torch/hub/v0.6.0.zip\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\n\nimport requests\nfrom PIL import Image\nfrom torchvision import transforms\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef predict(inp):\n  inp = transforms.ToTensor()(inp).unsqueeze(0)\n  with torch.no_grad():\n    prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)\n    confidences = {labels[i]: float(prediction[i]) for i in range(1000)}\n  return confidences\n\n\nimport gradio as gr\n\ngr.Interface(fn=predict,\n             inputs=gr.Image(type=\"pil\"),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"tiger.jpg\", \"cheetah.jpg\"]).launch()\n\nRunning on local URL:  http://127.0.0.1:7869\n\nThanks for being a Gradio user! If you have questions or feedback, please join our Discord server and chat with us: https://discord.gg/feTf9x3ZSB\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/queueing.py\", line 527, in process_events\n    response = await route_utils.call_process_api(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/route_utils.py\", line 261, in call_process_api\n    output = await app.get_blocks().process_api(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1788, in process_api\n    result = await self.call_function(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1340, in call_function\n    prediction = await anyio.to_thread.run_sync(\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/anyio/to_thread.py\", line 33, in run_sync\n    return await get_asynclib().run_sync_in_worker_thread(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 877, in run_sync_in_worker_thread\n    return await future\n           ^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 807, in run\n    result = context.run(func, *args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/utils.py\", line 759, in wrapper\n    response = f(*args, **kwargs)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_145374/855710716.py\", line 10, in predict\n    inp = transforms.ToTensor()(inp).unsqueeze(0)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/transforms/transforms.py\", line 137, in __call__\n    return F.to_tensor(pic)\n           ^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/transforms/functional.py\", line 140, in to_tensor\n    raise TypeError(f\"pic should be PIL Image or ndarray. Got {type(pic)}\")\nTypeError: pic should be PIL Image or ndarray. Got &lt;class 'NoneType'&gt;",
    "crumbs": [
      "Blog",
      "Gradio"
    ]
  },
  {
    "objectID": "css.html",
    "href": "css.html",
    "title": "CSS",
    "section": "",
    "text": "Purpose: CSS is used to style and layout web pages. It allows you to apply styles like fonts, colors, spacing, and positioning to HTML elements.\n\n\nHow It Works: CSS rules are applied to HTML elements to control their appearance on the web page. These rules can be applied inline, internally within the HTML document, or externally via a separate CSS file.",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#introduction-to-css",
    "href": "css.html#introduction-to-css",
    "title": "CSS",
    "section": "",
    "text": "Purpose: CSS is used to style and layout web pages. It allows you to apply styles like fonts, colors, spacing, and positioning to HTML elements.\n\n\nHow It Works: CSS rules are applied to HTML elements to control their appearance on the web page. These rules can be applied inline, internally within the HTML document, or externally via a separate CSS file.",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#basic-syntax",
    "href": "css.html#basic-syntax",
    "title": "CSS",
    "section": "Basic Syntax",
    "text": "Basic Syntax\n\nSelectors: CSS selectors are used to select the HTML elements you want to style.\nProperties and Values: CSS properties define the styles (e.g., color, font-size), and values specify the behavior of these properties (e.g., red, 16px).\n\nh1 { color: blue; font-size: 24px; }",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#types-of-css",
    "href": "css.html#types-of-css",
    "title": "CSS",
    "section": "Types of CSS",
    "text": "Types of CSS\n\nInline CSS: Applied directly to an HTML element using the style attribute.\n\n&lt;h1 style=\"color: blue; font-size: 24px;\"&gt;Hello World&lt;/h1&gt;\n\nInternal CSS: Defined within a &lt;style&gt; block inside the &lt;head&gt; section of the HTML document.\n\n&lt;style&gt;\n    h1 {\n        color: blue;\n        font-size: 24px;\n    }\n&lt;/style&gt;\n\nExternal CSS: Linked from an external file using the &lt;link&gt; tag in the &lt;head&gt; section.\n\n&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#selectors-in-css",
    "href": "css.html#selectors-in-css",
    "title": "CSS",
    "section": "Selectors in CSS",
    "text": "Selectors in CSS\n\nUniversal Selector (*): Selects all elements.\nElement Selector: Selects elements by their name (e.g., p, h1).\nClass Selector (.classname): Selects elements by their class attribute.\nID Selector (#idname): Selects a single element by its ID.\nAttribute Selector: Selects elements based on their attributes.\nPseudo-Classes and Pseudo-Elements:\n\nPseudo-Classes: :hover, :active, :focus – Apply styles based on user interaction.\nPseudo-Elements: ::before, ::after – Insert content before or after an element.\n\n\n\nExample\n\n.example-class {\n    color: red;\n}\n\n#example-id {\n    color: green;\n}\n\na:hover {\n    text-decoration: underline;\n}",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#css-properties",
    "href": "css.html#css-properties",
    "title": "CSS",
    "section": "CSS Properties",
    "text": "CSS Properties\n\nColor and Background:\n\ncolor: Sets the text color.\nbackground-color: Sets the background color of an element.\nbackground-image: Sets an image as the background.\n\nText and Font:\n\nfont-family: Sets the font of the text.\nfont-size: Sets the size of the text.\nfont-weight: Sets the boldness of the text.\ntext-align: Aligns the text horizontally (left, right, center).\ntext-decoration: Underlines, overlines, or strikes through text.\n\nBox Model:\n\nBox Model Components: Content, padding, border, and margin.\nwidth and height: Set the width and height of an element.\npadding: Creates space inside the element, between the content and the border.\nborder: Sets the border around the element.\nmargin: Creates space outside the element, separating it from other elements.\n\n\n\nExample\n\ndiv {\n    width: 300px;\n    padding: 20px;\n    border: 1px solid black;\n    margin: 10px;\n}\n\nPositioning:\n\nStatic (default): Elements are positioned according to the normal flow of the document.\nRelative: Positioned relative to its normal position.\nAbsolute: Positioned relative to its nearest positioned ancestor.\nFixed: Positioned relative to the browser window, stays fixed when scrolling.\nSticky: Switches between relative and fixed, depending on the scroll position.\n\n\n.relative {\n    position: relative;\n    top: 10px;\n    left: 20px;\n}\n\nDisplay and Visibility:\n\ndisplay: Controls the display type of an element (e.g., block, inline, inline-block, none).\nvisibility: Controls the visibility of an element (visible, hidden).\n\nOverflow:\n\noverflow: Controls what happens when content overflows an element’s box (visible, hidden, scroll, auto).\n\nFlexbox:\n\nFlexible Box Layout: A modern layout module that provides an efficient way to lay out, align, and distribute space among items in a container.\ndisplay: flex: Enables flexbox for an element.\njustify-content: Aligns flex items along the main axis.\nalign-items: Aligns flex items along the cross axis.\nflex-direction: Defines the direction of the flex items (row, column). &gt; Example ```css .container { display: flex; justify-content: space-between; align-items: center; }\n\n\n\n- Grid Layout:\n  - CSS Grid Layout: A powerful layout system that allows you to create grid-based layouts.\n  - `display: grid`: Enables grid layout for an element.\n  - `grid-template-columns`: Defines the columns of the grid.\n  - `grid-template-rows`: Defines the rows of the grid.\n  - `gap`: Sets the spacing between grid items.\n\n&gt; Example\n```css\n.grid-container {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#responsive-design-with-css",
    "href": "css.html#responsive-design-with-css",
    "title": "CSS",
    "section": "Responsive Design with CSS",
    "text": "Responsive Design with CSS\n\nMedia Queries: Used to apply styles based on the device’s characteristics, such as screen width, height, and orientation.\n\n@media (max-width: 600px) {\n    body {\n        background-color: lightblue;\n    }\n}\n\nViewport Meta Tag: Ensures proper scaling and sizing on mobile devices.\n\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\nFlexible Units:\n\nRelative Units: em, rem, %, vw, vh.\nAbsolute Units: px, pt, in, cm.\n\nResponsive Images:\n\nmax-width: 100%: Ensures images scale down when the container is smaller than the image.",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#css-frameworks",
    "href": "css.html#css-frameworks",
    "title": "CSS",
    "section": "CSS Frameworks",
    "text": "CSS Frameworks\n\nBootstrap: A popular front-end framework that includes a responsive grid system, pre-built components, and utility classes.\nFoundation: A responsive front-end framework that provides a grid system and UI components.\nBulma: A modern CSS framework based on Flexbox.\n\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"&gt;",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#preprocessors",
    "href": "css.html#preprocessors",
    "title": "CSS",
    "section": "Preprocessors",
    "text": "Preprocessors\n\nSass (Syntactically Awesome Style Sheets): A CSS preprocessor that allows the use of variables, nested rules, mixins, and functions.\nLESS: Another CSS preprocessor similar to Sass, but with a different syntax. &gt; Example\n\n$primary-color: #333;\n\nbody {\n    color: $primary-color;\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n}",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#advanced-css-techniques",
    "href": "css.html#advanced-css-techniques",
    "title": "CSS",
    "section": "Advanced CSS Techniques",
    "text": "Advanced CSS Techniques\n\nTransitions: Smoothly animate changes to CSS properties.\nAnimations: Create complex animations using keyframes.\nTransformations: Rotate, scale, skew, or translate elements.\nCustom Properties (CSS Variables): Define reusable values with custom properties.\n\n\nExample\n\n.box {\n    width: 100px;\n    height: 100px;\n    background-color: red;\n    transition: background-color 0.5s ease;\n}\n\n.box:hover {\n    background-color: blue;\n}\n\n@keyframes example {\n    from {background-color: red;}\n    to {background-color: yellow;}\n}\n\n.animated-box {\n    animation: example 2s infinite;\n}",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "css.html#css-grid-and-flexbox",
    "href": "css.html#css-grid-and-flexbox",
    "title": "CSS",
    "section": "CSS Grid and Flexbox",
    "text": "CSS Grid and Flexbox\n\nCSS Grid: Best for two-dimensional layouts, allowing for both rows and columns.\nFlexbox: Best for one-dimensional layouts, controlling the layout of items along a single axis. &gt; Example (CSS Grid)\n\n.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 10px;\n}\n\n.grid-item {\n    background-color: lightgrey;\n    padding: 20px;\n    text-align: center;\n}\n\nExample (Flexbox)\n\n.flex-container {\n    display: flex;\n    justify-content: space-between;\n}\n\n.flex-item {\n    background-color: lightgrey;\n    padding: 20px;\n    text-align: center;\n}",
    "crumbs": [
      "Blog",
      "CSS"
    ]
  },
  {
    "objectID": "node.html",
    "href": "node.html",
    "title": "Node",
    "section": "",
    "text": "Install\n\nDownload and install nvm:\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n\nin lieu of restarting the shell\n\n\\. \"$HOME/.nvm/nvm.sh\"\n\nDownload and install Node.js:\n\nnvm install 22\n\nVerify the Node.js version:\n\nnode -v # Should print \"v22.16.0\".\nnvm current # Should print \"v22.16.0\".\n\nVerify npm version:\n\nnpm -v # Should print \"10.9.2\".\n\n\n1. What is Node.js?\n\nDefinition: Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine.\nPurpose: It allows developers to execute JavaScript code outside of a browser.\nKey Features:\n\nNon-blocking, event-driven architecture.\nSingle-threaded but capable of handling many concurrent connections efficiently using asynchronous I/O.\nExcellent for building scalable, real-time applications like chat apps and APIs.\n\n\n\n\n2. Core Features of Node.js\n\na. Non-Blocking I/O\n\nUses an event loop to manage asynchronous operations.\nI/O operations (e.g., file reads, database queries) do not block the execution of other code.\n\n\n\nb. Event-Driven Architecture\n\nBuilt around an event-driven model, using callbacks and events to handle tasks.\n\n\n\nc. JavaScript Everywhere\n\nUse JavaScript for both client-side and server-side code, promoting full-stack development.\n\n\n\nd. NPM (Node Package Manager)\n\nWorld’s largest software registry with over 1.3 million packages.\nSimplifies dependency management in projects.\n\n\n\n\n3. Node.js Components\n\na. Core Modules\nNode.js provides a set of built-in modules that simplify common tasks: - fs: File system operations (read/write files). - http: Create HTTP servers. - https: Handle HTTPS connections. - url: URL parsing and formatting. - path: File and directory path utilities. - stream: Work with streams (e.g., file streams). - events: Event emitter for creating and handling custom events.\n\n\nb. V8 JavaScript Engine\n\nCompiles JavaScript to machine code for high performance.\n\n\n\nc. Libuv\n\nA library that provides Node.js with its asynchronous capabilities, managing the event loop and thread pool.\n\n\n\nd. Package.json\n\nA metadata file used to manage project dependencies, scripts, and configurations.\n\n\n\n\n4. Use Cases\n\na. Web Servers\n\nNode.js is widely used to create scalable web servers with frameworks like Express.js.\n\n\n\nb. Real-Time Applications\n\nPerfect for real-time apps like chat applications, gaming, or collaborative tools (e.g., Google Docs).\n\n\n\nc. APIs and Microservices\n\nCreate RESTful and GraphQL APIs quickly and efficiently.\n\n\n\nd. Task Automation\n\nAutomate repetitive tasks (e.g., bundling, linting, testing) with tools like Gulp or Webpack.\n\n\n\ne. Serverless Computing\n\nBuild serverless functions for platforms like AWS Lambda or Google Cloud Functions.\n\n\n\nf. IoT Applications\n\nNode.js is lightweight and suitable for IoT systems with constrained hardware.\n\n\n\n\n5. Installing Node.js\nsudo apt install npm\n\n\n6. How Node.js Works\n\na. Single-Threaded Model\n\nDespite being single-threaded, Node.js can handle multiple connections simultaneously via asynchronous callbacks and an event loop.\n\n\n\nb. Event Loop\n\nThe event loop processes I/O operations asynchronously, delegating time-consuming tasks to a worker thread pool.\n\n\n\n\n7. Popular Node.js Frameworks\n\nExpress.js: Minimalist web framework for building APIs and web apps.\nKoa.js: Lightweight and modular web framework.\nNestJS: A framework for building scalable server-side applications.\nSocket.IO: Real-time, bidirectional communication between clients and servers.\nSails.js: MVC framework for building data-driven APIs.\n\n\n\n8. Working with Node.js\n\na. Initialize a Project\nmkdir my-project\ncd my-project\nnpm init -y\n\n\nb. Install Dependencies\nnpm install express\n\n\nc. Create a Simple Server\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello, Node.js!');\n});\n\napp.listen(3000, () =&gt; {\n  console.log('Server is running on http://localhost:3000');\n});\n\n\n\n9. Advanced Concepts\n\na. Streams\n\nUsed for processing data piece-by-piece (e.g., reading large files, handling video streams).\nTypes: Readable, Writable, Duplex, Transform.\n\n\n\nb. Cluster Module\n\nEnables scaling of Node.js applications by creating multiple child processes that share the same server port.\n\n\n\nc. Child Processes\n\nRun multiple processes to handle CPU-bound tasks.\n\n\n\nd. Middleware\n\nIn frameworks like Express.js, middleware functions handle requests and responses.\n\n\n\n\n10. Debugging Node.js\n\nUse console.log() for simple debugging.\nUse built-in tools like the Node.js Debugger:\nnode inspect app.js\nIntegrate with IDEs like VSCode for an advanced debugging experience.\n\n\n\n11. Best Practices\n\nUse Asynchronous Code:\n\nPrefer async/await or Promises over callbacks.\n\nError Handling:\n\nAlways handle errors in asynchronous code using .catch() or try-catch.\n\nEnvironment Variables:\n\nUse .env files and libraries like dotenv for sensitive configurations.\n\nUse Linting:\n\nUse tools like ESLint for consistent code quality.\n\nSecure Your App:\n\nSanitize inputs and validate requests to prevent vulnerabilities like SQL injection.\n\n\n\n\n12. Pros and Cons\n\nPros:\n\nHigh performance.\nScalable for real-time applications.\nLarge ecosystem (npm).\nJavaScript everywhere.\n\n\n\nCons:\n\nNot ideal for CPU-intensive tasks.\nCallback hell in older codebases (mitigated with async/await).\n\n\n\n\n13. Node.js Ecosystem\n\nnpm: The primary package manager.\nPM2: Process manager for production deployments.\nWebpack, Parcel: Bundlers for managing assets.\nMocha, Jest: Testing frameworks.\n\n\n\n14. Resources\n\nOfficial Documentation: https://nodejs.org\nLearning Platforms:\n\nfreeCodeCamp\nNode.js Design Patterns (Book)\n\nCommunity:\n\nNode.js GitHub Repository\nStack Overflow\n\n\n\n\n15. Use Node.js for the Right Tasks\nNode.js excels in: - Real-time applications. - APIs. - Lightweight, event-driven servers.\nBut it’s less suitable for CPU-intensive tasks like heavy computations, where languages like Python or Go may be better.\nLet me know if you want to dive deeper into any specific aspect of Node.js!\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Node"
    ]
  }
]